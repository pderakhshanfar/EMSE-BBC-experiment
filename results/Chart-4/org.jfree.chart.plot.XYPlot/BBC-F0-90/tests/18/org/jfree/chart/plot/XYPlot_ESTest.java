/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:44:27 GMT 2021
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.MouseWheelEvent;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferShort;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.MultiPixelPackedSampleModel;
import java.awt.image.PixelGrabber;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.SampleModel;
import java.awt.image.ShortLookupTable;
import java.awt.image.WritableRaster;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.sql.Connection;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.JWindow;
import javax.swing.TransferHandler;
import javax.swing.plaf.basic.BasicTextPaneUI;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.plaf.multi.MultiTabbedPaneUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.text.StyleContext;
import javax.swing.tree.FixedHeightLayoutCache;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.RenderingSource;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.annotations.XYTitleAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYCrosshairState;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.title.ImageTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CustomXYURLGenerator;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.StandardXYZURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.chart.util.TableOrder;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYPlot_ESTest extends XYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0);
      combinedDomainXYPlot0.removeRangeMarker((Marker) valueMarker0);
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0F);
      candlestickRenderer0.clone();
      candlestickRenderer0.getURLGenerator(2145367900, (-200), true);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(1729, customXYToolTipGenerator0, (XYURLGenerator) null);
      // Undeclared exception!
      combinedDomainXYPlot0.setRenderer(2145367900, (XYItemRenderer) standardXYItemRenderer0, true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      chartRenderingInfo0.setRenderingSource(chartPanel0);
      combinedRangeXYPlot0.zoomRangeAxes((-1.0), (-1.0), plotRenderingInfo0, (Point2D) null);
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      combinedRangeXYPlot0.setDomainAxis(1751268952, (ValueAxis) dateAxis0, true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(1012.137846982019, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, (ValueAxis) null, (ValueAxis) null, clusteredXYBarRenderer0);
      xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0, 65535, 65535, (-2068), 15, 65535, 27, false, true, false, false, true, true);
      jDBCXYDataset0.getDomainOrder();
      chartPanel1.getChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(300, 200, (double) 768, 14.42, chartRenderingInfo0);
      GeneralPath generalPath0 = new GeneralPath();
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      BasicTreeUI.NodeDimensionsHandler basicTreeUI_NodeDimensionsHandler0 = basicTreeUI0.new NodeDimensionsHandler();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle rectangle1 = chartPanel1.getBounds(rectangle0);
      basicTreeUI_NodeDimensionsHandler0.getNodeDimensions(categoryTableXYDataset0, 680, 2353, true, rectangle1);
      // Undeclared exception!
      try { 
        xYPlot0.select(generalPath0, (Rectangle2D) null, (RenderingSource) chartPanel1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "xxe3JyuDA%";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.getSymbols();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxis((-2762), (ValueAxis) symbolAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = new XYPlot();
      AffineTransform.getRotateInstance((double) 1.0F, (double) 10, (double) 10, (double) 1.0F);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 10, 10);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 10;
      floatArray0[5] = (float) 10;
      floatArray0[5] = (float) 10;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      ColorModel colorModel0 = ColorModel.getRGBdefault();
      BufferedImage bufferedImage1 = rescaleOp0.createCompatibleDestImage(bufferedImage0, colorModel0);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      combinedRangeXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D_Double0, plotOrientation0, 0.0F, dateAxis0, xYPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      combinedRangeXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) point0, false);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(491, 491, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(990.955327548848, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, 1.0F);
      ValueMarker valueMarker1 = new ValueMarker(420.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, 0.0F);
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(categoryMarker0);
      combinedDomainXYPlot0.markerChanged(markerChangeEvent0);
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker1);
      combinedDomainXYPlot0.removeRangeMarker((Marker) valueMarker0);
      combinedDomainXYPlot0.getDomainGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainAxisLocation(0, (AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AffineTransform.getRotateInstance((double) 1.0F, (double) 10, 72.0, (double) 1.0F);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 10, 10);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 500;
      floatArray0[5] = (float) 10;
      floatArray0[7] = (float) 10;
      floatArray0[8] = (float) 10;
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 10, chartRenderingInfo0);
      ColorModel colorModel0 = ColorModel.getRGBdefault();
      BufferedImage bufferedImage1 = rescaleOp0.createCompatibleDestImage(bufferedImage0, colorModel0);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      combinedRangeXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D_Double0, plotOrientation0, 0.0F, dateAxis0, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      jFreeChart0.getXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(14.42);
      combinedDomainXYPlot1.removeRangeMarker((Marker) valueMarker0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D_Double0, 10.0F, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = new Point();
      JViewport jViewport0 = new JViewport();
      Point point1 = jViewport0.getViewPosition();
      point0.setLocation(point1);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.zoomDomainAxes((-1184.0), plotRenderingInfo0, (Point2D) point0, true);
      combinedDomainXYPlot0.getDomainAxis(0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      NumberAxis numberAxis0 = new NumberAxis("Null 'state' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.getDomainAxis(500);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      Font font0 = stackedAreaRenderer0.getItemLabelFont(10, 500, false);
      JFreeChart jFreeChart0 = new JFreeChart("n)j", font0, combinedRangeXYPlot1, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1061), 15, 7, 1, (-14), 1, false, false, false, false, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot1.handleClick((-1061), 2030, plotRenderingInfo0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(871, 1024, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<LogarithmicAxis> vector0 = new Vector<LogarithmicAxis>();
      JTable jTable0 = new JTable(vector0, vector0);
      Rectangle rectangle0 = jTable0.getCellRect((-1879048192), 3, true);
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 0.05, numberAxis0.DEFAULT_TICK_MARK_STROKE, stackedAreaRenderer0.DEFAULT_OUTLINE_PAINT);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getQuadrantPaint(76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (76) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeMarkers();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 1.0F, 10, 2039.3694709597441);
      JFreeChart jFreeChart0 = new JFreeChart("Hans-Jurgen Greiner", combinedRangeXYPlot0);
      Stroke stroke0 = jFreeChart0.getBorderStroke();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Paint paint0 = thermometerPlot0.getValuePaint();
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D_Double0, 10.0, stroke0, paint0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, 255.12784349538393, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      TimeZone timeZone0 = TimeZone.getTimeZone("z");
      DateAxis dateAxis1 = new DateAxis("z", timeZone0);
      combinedRangeXYPlot0.getDomainAxisIndex(dateAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0);
      TimeZone timeZone0 = TimeZone.getTimeZone("aCn~jtBs");
      DateAxis dateAxis0 = new DateAxis("aCn~jtBs", timeZone0);
      combinedDomainXYPlot0.getDomainAxisIndex(dateAxis0);
      combinedDomainXYPlot0.removeRangeMarker((Marker) valueMarker0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[8];
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2766.971055250912, false, boxAndWhiskerXYToolTipGenerator0);
      xYItemRendererArray0[0] = (XYItemRenderer) candlestickRenderer0;
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) xYDotRenderer0;
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(3610.4649379748);
      xYItemRendererArray0[2] = (XYItemRenderer) stackedXYBarRenderer0;
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYItemRendererArray0[3] = (XYItemRenderer) xYBlockRenderer0;
      StackedXYBarRenderer stackedXYBarRenderer1 = new StackedXYBarRenderer();
      xYItemRendererArray0[4] = (XYItemRenderer) stackedXYBarRenderer1;
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(Integer.MAX_VALUE, boxAndWhiskerXYToolTipGenerator0, standardXYZURLGenerator0);
      xYItemRendererArray0[5] = (XYItemRenderer) xYAreaRenderer0;
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      xYItemRendererArray0[6] = (XYItemRenderer) deviationRenderer0;
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      xYItemRendererArray0[7] = (XYItemRenderer) clusteredXYBarRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation(Integer.MAX_VALUE, axisLocation1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 0.05);
      Point point0 = new Point(500, 500);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.zoomRangeAxes(0.05, plotRenderingInfo0, (Point2D) point0, true);
      JFreeChart jFreeChart0 = new JFreeChart("", logAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500);
      int[] intArray0 = new int[1];
      intArray0[0] = 500;
      PixelGrabber pixelGrabber0 = new PixelGrabber(bufferedImage0, (-2528), 500, (-2528), 82, intArray0, 500, 66);
      ColorModel colorModel0 = pixelGrabber0.getColorModel();
      BufferedImage bufferedImage1 = colorConvertOp0.createCompatibleDestImage(bufferedImage0, colorModel0);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      FixedHeightLayoutCache fixedHeightLayoutCache0 = new FixedHeightLayoutCache();
      JTree jTree0 = new JTree((TreeNode) null);
      jTree0.getPathForLocation(500, 10);
      Dimension dimension0 = new Dimension(15, 10);
      Rectangle rectangle0 = new Rectangle(dimension0);
      fixedHeightLayoutCache0.getBounds((TreePath) null, rectangle0);
      combinedRangeXYPlot0.drawAnnotations(graphics2D0, (Rectangle2D) null, plotRenderingInfo0);
      combinedRangeXYPlot0.getDomainCrosshairStroke();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("org.jfree.chart.renderer.xy.ClusteredXYBarRenderer", 1.0F, 10, 1.0F);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.handleClick(10, (-3212), (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("_mL_Kt", piePlot3D0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1.0), 10, 910.4923434, 910.4923434);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      combinedDomainXYPlot0.drawBackground(graphics2D0, rectangle0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.panRangeAxes(1.0F, plotRenderingInfo0, (Point2D) null);
      combinedRangeXYPlot0.getRendererForDataset((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeMarkers();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes(54, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Paint paint0 = combinedDomainCategoryPlot0.getDomainCrosshairPaint();
      combinedRangeXYPlot0.setQuadrantPaint(3, paint0);
      BasicStroke basicStroke0 = null;
      try {
        basicStroke0 = new BasicStroke(10, (-2980), 10, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal end cap value
         //
         verifyException("java.awt.BasicStroke", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) xYLine3DRenderer0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxisLocation(0, (AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("org.jfree.chart.renderer.xy.ClusteredXYBarRenderer", 1.0F, 10, 1.0F);
      NumberAxis numberAxis0 = new NumberAxis("??");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      ValueAxis valueAxis0 = combinedRangeXYPlot1.getDomainAxis(500);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot((ValueAxis) null);
      JFreeChart jFreeChart0 = new JFreeChart(";#lRO$t.#", valueAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot2, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1), 10, (-14), 3126, 500, 10, true, false, false, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.handleClick((-42), 266, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = new XYPlot();
      AffineTransform.getRotateInstance((double) 1.0F, (double) 10, 72.0, 485.31227794823);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 500;
      floatArray0[5] = (float) 10;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) 10;
      floatArray0[8] = (float) 10;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(3, 10, chartRenderingInfo0);
      combinedRangeXYPlot0.getDomainAxis(500);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.handleClick(10, (-964), plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String string0 = " out of bounds.";
      JFreeChart jFreeChart0 = new JFreeChart("Y@@VwfW!?Rig", (Font) null, combinedRangeXYPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.setBorderVisible(false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 1.0F, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawRangeCrosshair(graphics2D0, rectangle0, plotOrientation0, 1.0F, (ValueAxis) null, fastScatterPlot0.DEFAULT_GRIDLINE_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(1010.89316, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, (ValueAxis) null, (ValueAxis) null, clusteredXYBarRenderer0);
      xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0, 65535, 65535, (-2068), 15, 65535, 27, false, true, false, false, true, true);
      jDBCXYDataset0.getDomainOrder();
      chartPanel1.getChartRenderingInfo();
      xYPlot0.getDomainAxisIndex((ValueAxis) null);
      xYPlot0.isRangeZoomable();
      xYPlot0.isRangePannable();
      xYPlot0.getDataRange((ValueAxis) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      XYPlot xYPlot0 = new XYPlot();
      AffineTransform.getRotateInstance((double) 1.0F, (double) 10, 72.0, 485.31227794823);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 500;
      floatArray0[5] = (float) 10;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) 10;
      floatArray0[8] = (float) 10;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 10, chartRenderingInfo0);
      ColorModel colorModel0 = ColorModel.getRGBdefault();
      BufferedImage bufferedImage1 = rescaleOp0.createCompatibleDestImage(bufferedImage0, colorModel0);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      combinedRangeXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D_Double0, plotOrientation0, 1.0F, dateAxis0, xYPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      IntervalMarker intervalMarker0 = new IntervalMarker(10.0F, (-505.259981359949), xYPlot0.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.getDatasetCount();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addRangeMarker(1, (Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Graphics2D graphics2D0 = null;
      AffineTransform.getRotateInstance((-190.73111), (double) 10, 212.1034784, (-190.73111));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation1 = polarPlot0.getOrientation();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(100000.0, 1.0F);
      combinedRangeXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D_Double0, plotOrientation1, 303.0, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
      IntervalMarker intervalMarker0 = new IntervalMarker(4.0, Double.NEGATIVE_INFINITY, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.addDomainMarker(10, (Marker) intervalMarker0, layer0, false);
      combinedRangeXYPlot1.getFixedDomainAxisSpace();
      combinedRangeXYPlot1.calculateDomainAxisSpace((Graphics2D) null, rectangle2D_Double0, (AxisSpace) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      combinedRangeCategoryPlot0.getFixedDomainAxisSpace();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.calculateRangeAxisSpace((Graphics2D) null, rectangle2D_Double0, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomRangeAxes((double) 10, (double) 10, plotRenderingInfo0, (Point2D) null);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.getSeriesPaint(10);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(1010.89316, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      combinedDomainXYPlot0.setRangeGridlinePaint(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      // Undeclared exception!
      combinedDomainXYPlot0.setRangeAxis(2144277080, (ValueAxis) numberAxis3D0, false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.panRangeAxes(1.0F, plotRenderingInfo0, (Point2D) null);
      combinedRangeXYPlot0.setDataset(10, (XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(1010.89316, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, (ValueAxis) null, (ValueAxis) null, clusteredXYBarRenderer0);
      xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0, 65535, 65535, (-2068), 15, 65535, 27, false, true, false, false, true, true);
      jDBCXYDataset0.getDomainOrder();
      xYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      chartPanel1.getChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 200, (double) 768, 14.42, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(2929.667, 0.0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      // Undeclared exception!
      try { 
        jFreeChart0.DEFAULT_TITLE_FONT.getStringBounds(charArray0, 1024, 500, fontRenderContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // limit: 500
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      int int0 = 1751268952;
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      // Undeclared exception!
      combinedRangeXYPlot0.setDomainAxisLocation(1751268952, axisLocation2, false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(1010.89316, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) null);
      xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0, 65535, 65535, (-2068), 15, 65535, 31, false, true, false, false, true, true);
      jDBCXYDataset0.getDomainOrder();
      chartPanel1.getChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(300, 200, (double) 768, 970.0475552792179, chartRenderingInfo0);
      xYPlot0.setRangeGridlinePaint(clusteredXYBarRenderer0.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getEntityCollection();
      chartRenderingInfo0.clone();
      chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(10, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, (ValueAxis) null, (ValueAxis) null, clusteredXYBarRenderer0);
      XYPlot xYPlot1 = new XYPlot();
      xYPlot1.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot1);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0, 768, 15, 65535, (-5252), (-30), 10, false, false, false, true, true, true);
      jDBCXYDataset0.getDomainOrder();
      ChartRenderingInfo chartRenderingInfo0 = chartPanel1.getChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(680, 10, (double) 10, (double) 10, chartRenderingInfo0);
      combinedDomainXYPlot0.setRangeGridlinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = new Point(10, 10);
      combinedDomainXYPlot0.zoomDomainAxes((double) 10, (double) 10, plotRenderingInfo0, (Point2D) point0);
      JList<LegendItemCollection> jList0 = new JList<LegendItemCollection>();
      jList0.getCellBounds(10, 10);
      XYCrosshairState xYCrosshairState0 = new XYCrosshairState();
      combinedDomainXYPlot0.render((Graphics2D) null, (Rectangle2D) null, 3, plotRenderingInfo0, xYCrosshairState0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setVerticalTickLabels(false);
      ValueMarker valueMarker0 = new ValueMarker(0.6566816799897572);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(500, (Marker) valueMarker0, layer0, true);
      combinedRangeXYPlot0.clearRangeMarkers();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(1010.89316, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, (ValueAxis) null, (ValueAxis) null, clusteredXYBarRenderer0);
      xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      XYSeries xYSeries0 = new XYSeries("ZOOM_RESET_BOTH");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      chartPanel0.putSelectionState(jDBCXYDataset0, xYSeriesCollection0);
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0, 65535, 65535, (-2068), 15, 65535, 27, false, true, false, false, true, true);
      jDBCXYDataset0.getDomainOrder();
      chartPanel1.getChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(300, 200, (double) 768, 14.42, chartRenderingInfo0);
      xYPlot0.setRangeGridlinePaint(clusteredXYBarRenderer0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Layer layer0 = Layer.BACKGROUND;
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot1.setDomainCrosshairValue((double) 500);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      combinedRangeXYPlot0.setRangeAxis(10, (ValueAxis) numberAxis0);
      Area area0 = new Area(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-2570.88), (-2570.88), 897.0, 2, 10);
      Area area1 = area0.createTransformedArea(affineTransform0);
      Rectangle rectangle0 = area1.getBounds();
      Rectangle2D rectangle2D0 = area1.getBounds2D();
      Rectangle2D rectangle2D1 = rectangle0.createUnion(rectangle2D0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D1, plotOrientation0, 0.0, numberAxis0, combinedRangeXYPlot1.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Layer layer0 = Layer.BACKGROUND;
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot1.setDomainCrosshairValue((double) 500);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      combinedRangeXYPlot0.setRangeAxis(10, (ValueAxis) numberAxis0);
      Area area0 = new Area(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-2570.88), (-2570.88), 897.0, 2, 10);
      Area area1 = area0.createTransformedArea(affineTransform0);
      Rectangle rectangle0 = area1.getBounds();
      Rectangle2D rectangle2D0 = area1.getBounds2D();
      rectangle0.createUnion(rectangle2D0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedRangeXYPlot1.clearRangeAxes();
      combinedRangeXYPlot0.removeRangeMarker((Marker) categoryMarker0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Layer layer0 = Layer.BACKGROUND;
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot1.setDomainCrosshairValue((double) 500);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      combinedRangeXYPlot0.setRangeAxis(10, (ValueAxis) numberAxis0);
      Area area0 = new Area(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      AffineTransform affineTransform0 = new AffineTransform((-1.0), (-2570.88), (-2570.88), 897.0, 2, 10);
      Area area1 = area0.createTransformedArea(affineTransform0);
      Rectangle rectangle0 = area1.getBounds();
      Rectangle2D rectangle2D0 = area1.getBounds2D();
      Rectangle2D rectangle2D1 = rectangle0.createUnion(rectangle2D0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedRangeXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D1, plotOrientation0, (-872.87968071575), numberAxis0, combinedRangeXYPlot1.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      numberAxis0.setLowerMargin(10);
      combinedRangeXYPlot0.addRangeMarker(2, (Marker) categoryMarker0, layer0, true);
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("n-%~EH%i#");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      Graphics2D graphics2D0 = null;
      periodAxis0.setAutoRangeMinimumSize((double) 1.0F);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      ellipse2D_Double0.clone();
      ellipse2D_Double0.setFrameFromCenter(401.79392413841, 667.12, (double) 1.0F, (-2257.0));
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jfree.chart.axis.StandardTickUnitSource");
      Layer layer0 = null;
      combinedDomainXYPlot0.drawDomainMarkers((Graphics2D) null, rectangle2D0, 500, (Layer) null);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      combinedDomainXYPlot0.drawQuadrants((Graphics2D) null, rectangle2D0);
      valueAxisArray0[1] = (ValueAxis) periodAxis0;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      numberAxis3D0.setLabel((String) null);
      valueAxisArray0[2] = (ValueAxis) numberAxis3D0;
      Class<NumberAxis> class0 = NumberAxis.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 0.05);
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      cyclicNumberAxis0.setPositiveArrowVisible(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ValueMarker valueMarker0 = new ValueMarker((-1871.93299257), logAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker(3003, (Marker) valueMarker0, (Layer) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYPlot xYPlot0 = new XYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      // Undeclared exception!
      xYPlot0.setDataset(2144277080, (XYDataset) yIntervalSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = new BasicStroke();
      JFreeChart jFreeChart0 = new JFreeChart("The index value (", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 3632, 479, (-998), (-194), (-2442), 3632, false, false, false, false, false, true, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      rectangle0.height = (-998);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawVerticalLine((Graphics2D) null, rectangle0, (-998), basicStroke0, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      ValueMarker valueMarker0 = new ValueMarker((-1329.6916));
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot1.addRangeMarker((-1160), (Marker) valueMarker0, layer0, false);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot2.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(1010.89316, false);
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, (ValueAxis) null, (ValueAxis) null, clusteredXYBarRenderer0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0, 200, 300, 10, 200, 43, 420, false, false, false, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel1.getChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, (double) 1.0F, plotRenderingInfo0, (Point2D) point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      Point2D point2D0 = generalPath0.getCurrentPoint();
      combinedDomainXYPlot0.zoomDomainAxes((-2.147483648E9), 2116.0, (PlotRenderingInfo) null, point2D0);
      JList<LegendItemCollection> jList0 = new JList<LegendItemCollection>();
      Stack<LegendItemCollection> stack0 = new Stack<LegendItemCollection>();
      JList<LegendItemCollection> jList1 = new JList<LegendItemCollection>(stack0);
      jList1.getCellBounds(10, 10);
      XYCrosshairState xYCrosshairState0 = new XYCrosshairState();
      combinedDomainXYPlot0.render((Graphics2D) null, (Rectangle2D) null, 56, (PlotRenderingInfo) null, xYCrosshairState0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stroke stroke0 = combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(stroke0);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.clearDomainMarkers(5091);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot0.zoom(494.1002123);
      combinedDomainXYPlot0.isRangePannable();
      combinedDomainXYPlot0.getRenderer();
      System.setCurrentTimeMillis(10);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      combinedDomainXYPlot0.getRenderer(0);
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 0, false);
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
      combinedDomainXYPlot0.getQuadrantPaint(0);
      combinedDomainXYPlot0.getDataset();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1024, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle0, (AxisSpace) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("DefaultIntervalCategoryataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = new BasicStroke();
      combinedRangeXYPlot0.setQuadrantPaint(2, logAxis0.DEFAULT_AXIS_LINE_PAINT);
      BufferedImage bufferedImage0 = new BufferedImage(500, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      combinedRangeXYPlot0.drawQuadrants(graphics2D0, rectangle2D0);
      combinedRangeXYPlot0.getDomainGridlineStroke();
      combinedRangeXYPlot0.getDomainMarkers((Layer) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(1010.89316, false);
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, (ValueAxis) null, (ValueAxis) null, clusteredXYBarRenderer0);
      xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0, 65535, 65535, (-2068), 15, 65535, 27, false, false, false, false, false, false);
      chartPanel1.getChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(300, 200, (double) 768, 14.42, chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      point2D_Double0.x = 721.829143;
      point2D_Double0.setLocation(10.0, (double) 420);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.clearDomainMarkers();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxisLocation((-2018), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, 771);
      xYPlot0.setDataset(771, (XYDataset) dynamicTimeSeriesCollection0);
      xYPlot0.zoom((-1202.1947614768335));
      LogAxis logAxis0 = new LogAxis();
      xYPlot0.indexOf(dynamicTimeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1313.65718071);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.getErrorIndicatorStroke();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.getDomainTickBandPaint();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      XYItemRenderer xYItemRenderer0 = null;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRenderer((-2), (XYItemRenderer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ZoneId zoneId0 = ZoneId.from(zonedDateTime0);
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.JAPANESE;
      DateAxis dateAxis0 = new DateAxis(") should be in the range 0 to 3.", timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, dateAxis0);
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      AxisLocation axisLocation2 = axisLocation1.getOpposite();
      AxisLocation.getOpposite(axisLocation2);
      combinedRangeXYPlot0.setRangeAxisLocation(500, axisLocation2, true);
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getRangeAxis();
      combinedRangeXYPlot0.getDomainCrosshairValue();
      combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      TimeSeries timeSeries0 = new TimeSeries(2.0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      combinedRangeXYPlot0.setDataset(500, (XYDataset) timeSeriesCollection0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      short[][] shortArray0 = new short[5][5];
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)727;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[0];
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[9];
      shortArray3[0] = (short)727;
      shortArray3[1] = (short)727;
      shortArray3[2] = (short)727;
      shortArray3[3] = (short)727;
      shortArray3[4] = (short)727;
      shortArray3[5] = (short)727;
      shortArray3[6] = (short)727;
      shortArray3[7] = (short)727;
      shortArray3[8] = (short)72;
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[4];
      shortArray4[0] = (short)727;
      shortArray4[1] = (short)727;
      shortArray4[2] = (short)727;
      shortArray4[3] = (short)727;
      shortArray0[3] = shortArray4;
      short[] shortArray5 = new short[2];
      shortArray5[0] = (short)727;
      shortArray5[1] = (short)72;
      shortArray0[4] = shortArray5;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(3, shortArray0);
      JFreeChart jFreeChart0 = new JFreeChart("u$", combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      float[] floatArray0 = new float[0];
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      int int0 = 4733;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((short)727, (short)72, 4733);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 4733
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      stackedAreaRenderer0.findRangeBounds(defaultKeyedValues2DDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis((ValueAxis) moduloAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<PeriodAxis> linkedList0 = new LinkedList<PeriodAxis>();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isDomainPannable();
      GeneralPath generalPath0 = new GeneralPath();
      NumberAxis numberAxis0 = new NumberAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(numberAxis0);
      axisChangeEvent0.getChart();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      generalPath0.append((Shape) rectangle2D0, false);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, (-1593), (-1676), 15, (-1593), 10, (-1659), true, true, true, true, true, false);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) null, (RenderingSource) chartPanel0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDataset((-1383), (XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxisLocation((AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      combinedDomainXYPlot0.setRangeGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.panDomainAxes(0.05, plotRenderingInfo1, point2D_Double0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.getZoomFillPaint();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      combinedDomainXYPlot0.setRangeAxis(10, (ValueAxis) numberAxis0, true);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3901, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Point point0 = new Point((-1), 6);
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      Vector<AxisLocation> vector0 = new Vector<AxisLocation>();
      combinedRangeXYPlot0.drawRangeGridlines(graphics2D0, rectangle2D0, vector0);
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      Point point1 = new Point();
      Dimension dimension0 = new Dimension(500, (-3655));
      Rectangle rectangle1 = new Rectangle(point1, dimension0);
      Rectangle2D rectangle2D1 = combinedDomainXYPlot0.DEFAULT_INSETS.createInsetRectangle((Rectangle2D) rectangle1);
      combinedDomainXYPlot2.drawZeroDomainBaseline(graphics2D1, rectangle2D1);
      Graphics2D graphics2D2 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.drawVerticalLine(graphics2D2, rectangle1, 0.0, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE, combinedDomainXYPlot2.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot2.panRangeAxes(0, plotRenderingInfo1, point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      Point2D point2D0 = xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.createBufferedImage(2107, 200);
      point2D0.setLocation((double) 300, Double.NaN);
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.panDomainAxes(43, plotRenderingInfo1, point2D0);
      xYPlot0.zoomDomainAxes((-829.09), plotRenderingInfo1, point2D0, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      defaultWindDataset0.validateObject();
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(10, (XYToolTipGenerator) null, true);
      combinedDomainXYPlot0.configureDomainAxes();
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      combinedDomainXYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.createBufferedImage(768, 300, (double) 10, Double.NaN, chartRenderingInfo0);
      point2D_Double0.setLocation(1007.8645915664, 4.0);
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      PlotRenderingInfo plotRenderingInfo2 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.panDomainAxes(200, plotRenderingInfo2, point2D_Double0);
      combinedRangeXYPlot0.zoomDomainAxes(0.05, plotRenderingInfo1, (Point2D) point2D_Double0, true);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.removeChangeListener(jFreeChart0);
      combinedRangeXYPlot1.setRangeZeroBaselinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("ZOOM_IN_RANGE", Double.NaN, 0.05, 0.05);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYPointerAnnotation0, false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogAxis logAxis0 = new LogAxis("]&a &\"*!!");
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.createBufferedImage(2107, 2219, (double) 680, (-1982.73837617), chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      point2D_Double0.setLocation((double) 2219, 10.0);
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.panDomainAxes(1024, plotRenderingInfo1, point2D_Double0);
      xYPlot0.zoomDomainAxes((double) 10, plotRenderingInfo1, (Point2D) point2D_Double0, false);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      RingPlot ringPlot0 = new RingPlot();
      Paint paint0 = ringPlot0.lookupSectionOutlinePaint(1.0F);
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(paint0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      chartRenderingInfo1.clone();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo1);
      xYPlot0.zoomDomainAxes((double) xYLineAndShapeRenderer0.ZERO, plotRenderingInfo0, (Point2D) null, false);
      xYPlot0.indexOf(jDBCXYDataset0);
      // Undeclared exception!
      try { 
        xYPlot0.mapDatasetToDomainAxes(0, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("LL85<6/I$Tq");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.getDomainTickBandPaint();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) null);
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection0);
      combinedDomainXYPlot0.setRangeGridlinePaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedDomainXYPlot0.getQuadrantOrigin();
      combinedDomainXYPlot0.getDomainAxisEdge();
      JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-383), (-527), 3353, 10, (-1), (-383), true, false, true, true, false, false, true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxes(10, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setVerticalTickLabels(false);
      ValueMarker valueMarker0 = new ValueMarker(0.6566816799897572);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(500, (Marker) valueMarker0, layer0, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.getRangeMinorGridlineStroke();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker(500, (Marker) null, (Layer) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "...");
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1878.172), 2, 3836.9388, 0.0F);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      valueAxis0.setLeftArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(3836.9388, 1);
      combinedDomainXYPlot0.getSeriesCount();
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      Rectangle2D rectangle2D0 = valueAxis0.DEFAULT_AXIS_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawBackground((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDataset((XYDataset) null);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.getErrorIndicatorStroke();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.7049915209277383);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDataset((XYDataset) null);
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.clearSelection();
      Color color0 = (Color)CyclicNumberAxis.DEFAULT_ADVANCE_LINE_PAINT;
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[9];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((double) 1.0F, plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("fv%@t}x");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.zoomRangeAxes(1290.032815, plotRenderingInfo0, (Point2D) point0, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      combinedDomainXYPlot0.zoomDomainAxes(Double.NaN, plotRenderingInfo0, (Point2D) point0);
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(false, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, basicStroke0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, 2.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Point point0 = new Point();
      xYPlot0.zoomDomainAxes(2107.0, (PlotRenderingInfo) null, (Point2D) point0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(" ,iGwe");
      XYPlot xYPlot1 = new XYPlot();
      DatasetGroup datasetGroup0 = new DatasetGroup();
      jDBCXYDataset0.setGroup(datasetGroup0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      xYPlot0.indexOf(jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.xy.XYSplineRenderer");
      XYPlot xYPlot0 = new XYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      xYPlot0.getPlotType();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      xYPlot0.indexOf(jDBCXYDataset0);
      xYPlot0.getRangeTickBandPaint();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getPlotType();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "XY Plot";
      stringArray0[3] = "XY Plot";
      stringArray0[4] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      xYPlot0.setDomainAxis(3492, (ValueAxis) symbolAxis0, true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot2.setNotify(true);
      combinedRangeXYPlot1.equals(combinedRangeXYPlot2);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(4.0);
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      int int0 = Plot.MINIMUM_WIDTH_TO_DRAW;
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      combinedRangeXYPlot3.setQuadrantOrigin(point0);
      combinedRangeXYPlot2.clearSelection();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot1);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot3.zoomRangeAxes((-1084.0), plotRenderingInfo0, (Point2D) point0);
      combinedRangeXYPlot3.getRangeZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getDomainAxis((-240));
      combinedRangeXYPlot0.getRangeMinorGridlinePaint();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, candlestickRenderer0.DEFAULT_PAINT, valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.addDomainMarker((Marker) categoryMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) xYStepAreaRenderer0);
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.zoomDomainAxes((double) 500, 1555.4255836151785, plotRenderingInfo0, (Point2D) point0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(549, 1103, 500, (IndexColorModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.isDomainMinorGridlinesVisible();
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("]&a &\"*!!");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      combinedRangeXYPlot0.configureDomainAxes();
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker(0, (Marker) valueMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("v");
      DateAxis dateAxis0 = new DateAxis("v", timeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.zoomRangeAxes(43.0, plotRenderingInfo0, (Point2D) point0, true);
      combinedDomainXYPlot0.getQuadrantPaint(0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogAxis logAxis0 = new LogAxis("]&a &\"*!!");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeMarkers(10);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      JList<Rectangle2D.Double> jList0 = new JList<Rectangle2D.Double>();
      jList0.indexToLocation((byte)70);
      combinedRangeXYPlot0.panRangeAxes(0.0, plotRenderingInfo0, (Point2D) null);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      combinedRangeXYPlot0.isRangeCrosshairVisible();
      ArrayList<YIntervalRenderer> arrayList0 = new ArrayList<YIntervalRenderer>();
      Vector<YIntervalRenderer> vector0 = new Vector<YIntervalRenderer>(arrayList0);
      // Undeclared exception!
      try { 
        xYPlot0.mapDatasetToDomainAxes(500, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.clearRangeMarkers(10);
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      ArrayList<YIntervalRenderer> arrayList0 = new ArrayList<YIntervalRenderer>();
      Vector<YIntervalRenderer> vector0 = new Vector<YIntervalRenderer>(arrayList0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes((-1), arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeMarkers(2292, (Layer) null);
      LogAxis logAxis0 = new LogAxis("]&a &\"*!!");
      ArrayList<YIntervalRenderer> arrayList0 = new ArrayList<YIntervalRenderer>();
      ArrayDeque<YIntervalRenderer> arrayDeque0 = new ArrayDeque<YIntervalRenderer>();
      Vector<YIntervalRenderer> vector0 = new Vector<YIntervalRenderer>(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      SystemColor systemColor0 = SystemColor.textHighlight;
      combinedRangeXYPlot0.setNoDataMessagePaint(systemColor0);
      combinedRangeXYPlot0.getRenderer((-93));
      combinedRangeXYPlot0.getIndexOf((XYItemRenderer) null);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(systemColor0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      combinedRangeXYPlot0.clearRangeMarkers(2145367900);
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = 43.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2145367900;
      XYPolygonAnnotation xYPolygonAnnotation0 = null;
      try {
        xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'polygon' array must contain an even number of items.
         //
         verifyException("org.jfree.chart.annotations.XYPolygonAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.xy.XYSplineRenderer");
      XYPlot xYPlot0 = new XYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDomainCrosshairValue(0.0, true);
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      combinedRangeXYPlot0.getDomainAxis();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      stack0.add(xYSeriesCollection0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(10, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be Integer instances.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M,&_nRV");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      ArrayList<YIntervalRenderer> arrayList0 = new ArrayList<YIntervalRenderer>();
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      arrayList0.add(yIntervalRenderer0);
      Vector<YIntervalRenderer> vector0 = new Vector<YIntervalRenderer>(arrayList0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxes(0, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be Integer instances.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-0.6903318966121068), (-2798.51));
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getQuadrantPaint(3);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      SeriesRenderingOrder seriesRenderingOrder1 = SeriesRenderingOrder.REVERSE;
      combinedDomainXYPlot1.setSeriesRenderingOrder(seriesRenderingOrder1);
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 5
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.getQuadrantOrigin();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(logAxis0.DEFAULT_TICK_LABEL_PAINT);
      JFreeChart jFreeChart0 = new JFreeChart("Indices must be unique.", combinedRangeXYPlot0);
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addRangeMarker(679, (Marker) null, layer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.getQuadrantOrigin();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(logAxis0.DEFAULT_TICK_LABEL_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("NG&M54pEXq-+z", logAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot1, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      BasicTreeUI.NodeDimensionsHandler basicTreeUI_NodeDimensionsHandler0 = metalTreeUI0.new NodeDimensionsHandler();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation((-1.0), (-1.0), (-949.529861), 420, jFreeChart0);
      Rectangle rectangle0 = new Rectangle(2, 10);
      basicTreeUI_NodeDimensionsHandler0.getNodeDimensions(xYDrawableAnnotation0, (-1918), 200, false, rectangle0);
      Rectangle rectangle1 = chartPanel0.getBounds((Rectangle) null);
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot1.getRangeAxisEdge();
      logAxis0.valueToJava2D(10, rectangle1, rectangleEdge0);
      JFreeChart jFreeChart1 = new JFreeChart("Indices must be unique.", combinedRangeXYPlot0);
      XYPlot xYPlot0 = jFreeChart1.getXYPlot();
      xYPlot0.getRangeMinorGridlineStroke();
      combinedRangeXYPlot0.clearRangeMarkers(15);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairPaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(15, "qR?SL~5<@{=6pl\"X");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      AxisLocation axisLocation0 = null;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setDomainAxisLocation((AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2472.149958068, 0.05);
      XYPlot xYPlot0 = new XYPlot();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      xYPlot0.indexOf(timePeriodValuesCollection0);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        xYPlot0.removeRangeMarker(500, (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      combinedDomainXYPlot0.setDataset((XYDataset) xIntervalSeriesCollection0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot1.getRendererForDataset(xIntervalSeriesCollection0);
      combinedDomainXYPlot2.getRangeAxisEdge(65535);
      combinedDomainXYPlot0.clearSelection();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "labelOutlineVisible");
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      xYPlot0.getQuadrantOrigin();
      cyclicNumberAxis0.setAutoTickUnitSelection(false, false);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      defaultWindDataset0.removeChangeListener(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1024, 43, 10, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      combinedRangeXYPlot0.clearDomainAxes();
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<PeriodAxis> linkedList0 = new LinkedList<PeriodAxis>();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isDomainPannable();
      GeneralPath generalPath0 = new GeneralPath();
      NumberAxis numberAxis0 = new NumberAxis("MaPb!B");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(numberAxis0);
      axisChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, (-1593), (-1676), 15, (-1593), 10, (-1643), true, true, false, true, true, false);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) null, (RenderingSource) chartPanel0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0);
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      combinedDomainXYPlot0.canSelectByRegion();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      Point2D point2D0 = xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2107, (-3064.39), 678.71412, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      point2D0.setLocation((double) 300, 678.71412);
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      xYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.panDomainAxes(43, plotRenderingInfo1, point2D0);
      xYPlot0.zoomDomainAxes((-829.09), plotRenderingInfo1, point2D0, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainTickBandPaint();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ZOOM_IN_DOMAIN");
      combinedDomainXYPlot0.setRangeAxis(1024, (ValueAxis) numberAxis3D0, true);
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, (Rectangle2D) null);
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      // Undeclared exception!
      try { 
        xYPlot0.calculateAxisSpace(graphics2D1, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(4);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1086.6841472), 4, "o5J<>8qZiB qHxhRdN");
      cyclicNumberAxis0.setLeftArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      Stack<AxisState> stack0 = new Stack<AxisState>();
      combinedDomainXYPlot0.getRendererForDataset(jDBCXYDataset0);
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.getQuadrantOrigin();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(logAxis0.DEFAULT_AXIS_LINE_PAINT);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.xy.XYSplineRenderer");
      XYPlot xYPlot0 = new XYPlot();
      combinedRangeXYPlot0.setDomainCrosshairValue(0.4, true);
      combinedRangeXYPlot0.getDomainMarkers((Layer) null);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1730.0);
      candlestickRenderer0.setUpPaint(logAxis0.DEFAULT_TICK_LABEL_PAINT);
      candlestickRenderer0.getVolumePaint();
      combinedRangeXYPlot0.setQuadrantPaint(0, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.getRangeAxis();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.getQuadrantOrigin();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(logAxis0.DEFAULT_AXIS_LABEL_PAINT);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.xy.XYSplineRenderer");
      XYPlot xYPlot0 = new XYPlot();
      combinedRangeXYPlot0.add(xYPlot0, 19);
      combinedRangeXYPlot0.setDomainCrosshairValue((-479.84871), false);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getDomainMarkers((Layer) null);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1.0));
      candlestickRenderer0.getVolumePaint();
      combinedRangeXYPlot0.setQuadrantPaint(0, combinedRangeXYPlot1.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1878.172), 2, 3836.9388, 0.0F);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      valueAxis0.setLeftArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      Stack<AxisState> stack0 = new Stack<AxisState>();
      combinedDomainXYPlot0.getRendererForDataset(jDBCXYDataset0);
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(1506.103402092, 1.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Point point0 = new Point();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(true);
      combinedRangeXYPlot0.getSeriesCount();
      IntervalMarker intervalMarker0 = new IntervalMarker(2323.857095787782, 0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(0, (Marker) intervalMarker0, layer0, true);
      JFreeChart jFreeChart0 = new JFreeChart("J4PZaCF", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point1 = new Point();
      combinedDomainXYPlot0.zoomDomainAxes((-495.92085), 10.0, plotRenderingInfo0, (Point2D) point0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Stroke stroke0 = stackedAreaRenderer0.getBaseStroke();
      combinedDomainXYPlot0.setDomainCrosshairStroke(stroke0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedRangeXYPlot0.configureRangeAxes();
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(false);
      combinedRangeXYPlot0.getSeriesCount();
      IntervalMarker intervalMarker0 = new IntervalMarker(10.0, 500, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(1102, (Marker) intervalMarker0, layer0, false);
      JFreeChart jFreeChart0 = new JFreeChart("J4PZaCF", combinedDomainXYPlot2);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.zoomDomainAxes(0.05, (-915.97964617), plotRenderingInfo0, (Point2D) point0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.052500000000000005) <= upper (-961.7786284785001).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      Point2D point2D0 = xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 420);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      point2D0.setLocation((double) 300, 678.71412);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-651));
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer0.initialise(graphics2D0, (Rectangle2D) null, xYPlot0, defaultWindDataset0, plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      chartRenderingInfo0.setEntityCollection(entityCollection0);
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      xYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.setAxisOffset(xYPlot0.DEFAULT_INSETS);
      combinedRangeXYPlot0.setRangeGridlinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'origin' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      TextTitle textTitle0 = new TextTitle("Null 'origin' argument.");
      textTitle0.visible = false;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(678.71412, 10, textTitle0);
      xYTitleAnnotation0.setMaxWidth(1.0F);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYTitleAnnotation0);
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      // Undeclared exception!
      try { 
        periodAxis0.setRangeWithMargins((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getItemOutlinePaint(10, 10, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      LogAxis logAxis0 = new LogAxis("rx=!gv+c$");
      LogAxis logAxis1 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(1.0F);
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.mapDatasetToRangeAxes(500, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(650.0947848526464);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addRangeMarker((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1024.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.zoomRangeAxes((-682.631489159194), (double) 0.0F, plotRenderingInfo0, (Point2D) null);
      combinedRangeXYPlot0.getDomainAxis();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker(2751, (Marker) null, layer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0);
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) point0, false);
      combinedRangeXYPlot0.setRangeCrosshairPaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedDomainXYPlot0.setRangeCrosshairPaint(cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.setDomainAxis(0, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getItemOutlinePaint(10, 10, true);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      defaultPolarItemRenderer0.setBaseItemLabelsVisible(false, true);
      axisLocation0.getOpposite();
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, true);
      combinedDomainXYPlot0.setDomainTickBandPaint(paint0);
      combinedDomainXYPlot0.getRangeAxis();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("v");
      DateAxis dateAxis0 = new DateAxis("v", timeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot1.setOrientation(plotOrientation0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-2798.51));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.getPlotType();
      Layer layer0 = Layer.BACKGROUND;
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 10, (-692), (-692), (-692), 500, (-692), false, false, false, false, false, false, true);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      combinedDomainXYPlot0.setDomainAxis(1541, valueAxis0, true);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.clearSelection();
      JFreeChart jFreeChart0 = new JFreeChart("3/^-.*Qh@4 ", numberAxis3D0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 4, 2, 10, (-702), (-702), 2598, false, true, false, false, true, false, true);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      combinedDomainXYPlot1.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.setDomainAxis(10, (ValueAxis) numberAxis3D0, false);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
      combinedRangeXYPlot0.clearDomainMarkers();
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(500, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot();
      Point2D point2D0 = xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2107, (-3064.39), (-1086.6841472), chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      point2D0.setLocation((double) 300, (-1086.6841472));
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      xYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.panDomainAxes(43, plotRenderingInfo1, point2D0);
      xYPlot0.zoomDomainAxes((-829.09), plotRenderingInfo1, point2D0, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainTickBandPaint();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ZOOM_IN_DOMAIN");
      combinedDomainXYPlot0.setRangeAxis(1024, (ValueAxis) numberAxis3D0, true);
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, (Rectangle2D) null);
      bufferedImage0.createGraphics();
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      xYPlot0.isDomainZeroBaselineVisible();
      xYPlot0.getRangeGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomRangeAxes(0.0, 812.7836816, plotRenderingInfo0, (Point2D) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Area area0 = new Area();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 812.7836816;
      doubleArray0[1] = 1.0E-8;
      doubleArray0[2] = 812.7836816;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 812.7836816;
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = (double) 10;
      doubleArray0[7] = 0.05;
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      Area area1 = area0.createTransformedArea(affineTransform0);
      Rectangle2D rectangle2D0 = area1.getBounds2D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge();
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = combinedDomainCategoryPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D0, axisSpace0);
      AxisSpace axisSpace2 = categoryAxis3D0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D0, rectangleEdge0, axisSpace1);
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D0, axisSpace2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, ".SQYvM~?8==#p:WK=p");
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[4] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[5] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[7] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[8] = (ValueAxis) cyclicNumberAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisLocation(10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart(".SQYvM~?8==#p:WK=p", xYPlot1);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      combinedDomainXYPlot0.getRangeAxisEdge(3);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.clearSelection();
      combinedDomainXYPlot1.getPlotType();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      BasicStroke basicStroke0 = (BasicStroke)defaultPolarItemRenderer0.getBaseOutlineStroke();
      combinedDomainXYPlot0.setRangeGridlineStroke(basicStroke0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Point point0 = gridBagLayout0.getLayoutOrigin();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes(Double.NaN, (PlotRenderingInfo) null, (Point2D) point0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      TimeZone.getTimeZone("Null 'handler' argument.");
      DateAxis dateAxis0 = new DateAxis("Null 'handler' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PiePlot piePlot0 = new PiePlot();
      piePlot0.getSectionOutlinePaint(true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      combinedRangeXYPlot0.getDomainAxis(124);
      TimeZone timeZone0 = TimeZone.getTimeZone("S<B64eH9|lK=;.");
      Locale locale0 = Locale.US;
      DateAxis dateAxis0 = new DateAxis("S<B64eH9|lK=;.", timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot1.getRangeMinorGridlinePaint();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getDomainAxisEdge();
      ValueMarker valueMarker0 = new ValueMarker((-613.3966));
      Layer layer1 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      combinedRangeXYPlot3.removeRangeMarker(1977, (Marker) valueMarker0, layer1, true);
      combinedRangeXYPlot0.clearDomainMarkers(124);
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
      combinedRangeXYPlot2.addRangeMarker(38, (Marker) valueMarker0, (Layer) null, true);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-2798.51));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.getPlotType();
      Layer layer0 = Layer.FOREGROUND;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(10);
      LinkedList<PeriodAxis> linkedList0 = new LinkedList<PeriodAxis>();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LinkedList<CategoryAxis3D> linkedList1 = new LinkedList<CategoryAxis3D>();
      combinedRangeXYPlot0.getRangeAxisCount();
      combinedRangeXYPlot0.getRangeAxisLocation(0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(10);
      LinkedList<PeriodAxis> linkedList0 = new LinkedList<PeriodAxis>();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, true);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[5];
      xYItemRendererArray0[0] = (XYItemRenderer) xYSplineRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) xYSplineRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) xYSplineRenderer0;
      xYItemRendererArray0[4] = (XYItemRenderer) deviationRenderer0;
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      combinedRangeXYPlot0.getDomainAxisForDataset(0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TimeZone.getTimeZone("Re_5w{tM,D");
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      AffineTransform.getTranslateInstance(1.0E-8, 1.0E-8);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      SystemColor systemColor0 = SystemColor.controlShadow;
      combinedRangeXYPlot0.getLegendItems();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(dateAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      combinedRangeXYPlot2.setRangeAxes(valueAxisArray0);
      combinedRangeXYPlot2.setRangeTickBandPaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedRangeXYPlot0.configureRangeAxes();
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(false);
      combinedRangeXYPlot0.getSeriesCount();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedRangeXYPlot0.addRangeMarker(10, (Marker) intervalMarker0, layer0, false);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.getQuadrantOrigin();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(logAxis0.DEFAULT_TICK_LABEL_PAINT);
      int int0 = 1;
      logAxis0.setTickLabelsVisible(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker(0.0F, 1123.16, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, (-1523.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-2798.51));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.getPlotType();
      Layer layer0 = Layer.FOREGROUND;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(10);
      LinkedList<PeriodAxis> linkedList0 = new LinkedList<PeriodAxis>();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LinkedList<CategoryAxis3D> linkedList1 = new LinkedList<CategoryAxis3D>();
      combinedRangeXYPlot0.setDomainZeroBaselineVisible(true);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedRangeXYPlot0.setDomainAxisLocation(54, axisLocation0, false);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.getRangeAxisLocation(1627);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.getDomainOrder();
      combinedRangeXYPlot0.indexOf(vectorSeriesCollection0);
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      combinedRangeXYPlot0.getOrientation();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point point0 = new Point();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) null);
      combinedRangeXYPlot0.getRangeCrosshairStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis(1313);
      combinedDomainXYPlot0.setDomainCrosshairStroke(valueAxis0.DEFAULT_TICK_MARK_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.getRangeAxisLocation();
      combinedRangeXYPlot0.getDomainMarkers(633, (Layer) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "labelOutlineVisible");
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(0.0F, 1.0F);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, false);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getRendererForDataset(defaultWindDataset0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      combinedDomainXYPlot0.clearSelection();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot1.getRangeMarkers((-4806), layer0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, ".SQYvM~?8==#p:WK=p");
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[4] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[5] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[6] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[7] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[8] = (ValueAxis) cyclicNumberAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisLocation(10);
      xYPlot0.getFixedLegendItems();
      combinedDomainXYPlot0.setDomainGridlineStroke(xYPlot1.DEFAULT_GRIDLINE_STROKE);
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart(".SQYvM~?8==#p:WK=p", font0, xYPlot1, true);
      AffineTransform.getTranslateInstance((-927.19873327818), 0.0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainMarkers(500);
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      ValueMarker valueMarker0 = new ValueMarker(3294.06, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addRangeMarker((-1902), (Marker) valueMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-2798.51));
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      String string0 = combinedDomainXYPlot0.getPlotType();
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", string0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(string0);
      
      int int0 = combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, int0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(50000.0, 50000.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(50000.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(50000.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainXYPlot0.addRangeMarker(500, (Marker) intervalMarker0, layer0);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(50000.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(50000.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYShapeAnnotation0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-3597);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(combinedDomainXYPlot1);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      combinedDomainXYPlot1.setDataset((XYDataset) timeSeriesCollection0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(10, 1.0E-8);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0E-8, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(10.0, affineTransform0.getTranslateX(), 0.01);
      assertNotNull(affineTransform0);
      
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0E-8, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(10.0, affineTransform0.getTranslateX(), 0.01);
      assertTrue(fontRenderContext0.isAntiAliased());
      assertTrue(fontRenderContext0.isTransformed());
      assertNotNull(fontRenderContext0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Stack<AxisState> stack0 = new Stack<AxisState>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, (List) null);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot2);
      
      XYItemRenderer xYItemRenderer0 = combinedDomainXYPlot0.getRendererForDataset(timeSeriesCollection0);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot2));
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot2);
      assertNull(xYItemRenderer0);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot2.getRangeAxisEdge((-1392));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      assertNotNull(rectangleEdge0);
      
      combinedDomainXYPlot0.setRangeGridlineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot1.isRangeCrosshairLockedOnData();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Null 'domainAxis' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      LogAxis logAxis0 = new LogAxis("");
      LogAxis logAxis1 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      combinedRangeXYPlot1.getDomainAxis((int) (byte) (-118));
      combinedRangeXYPlot1.getRangeMinorGridlinePaint();
      combinedRangeXYPlot0.getDomainAxisEdge();
      ValueMarker valueMarker0 = new ValueMarker(2813.27717442);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot1.removeRangeMarker(10, (Marker) valueMarker0, layer0, false);
      combinedRangeXYPlot1.clearDomainMarkers((int) (byte) (-118));
      xYPlot0.isDomainMinorGridlinesVisible();
      combinedRangeXYPlot1.addRangeMarker(500, (Marker) valueMarker0, layer0, false);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ModuloAxis moduloAxis0 = new ModuloAxis("QVIK", valueAxis0.DEFAULT_RANGE);
      moduloAxis0.setLeftArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(Double.POSITIVE_INFINITY, 678.71412);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      Rectangle2D rectangle2D0 = valueAxis0.DEFAULT_TICK_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      Stack<AxisState> stack0 = new Stack<AxisState>();
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D0, stack0);
      combinedDomainXYPlot0.getRendererForDataset(jDBCXYDataset0);
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, rectangle2D0, stack0);
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      combinedDomainXYPlot0.getRangeGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedRangeXYPlot0.configureRangeAxes();
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(false);
      combinedRangeXYPlot0.getSeriesCount();
      ValueAxis[] valueAxisArray0 = null;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(0, axisLocation0, true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.setNoDataMessageFont(valueAxis0.DEFAULT_TICK_LABEL_FONT);
      combinedDomainXYPlot1.setRangeCrosshairPaint(combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.setDomainAxis(511, (ValueAxis) null, true);
      combinedDomainXYPlot1.getRangeAxisLocation();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "labelOutlineVisible");
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      xYPlot0.removeDomainMarker((Marker) null);
      xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2107, (double) 2.0F, 678.71412, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      xYPlot0.drawDomainGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getBaseOutlinePaint();
      combinedDomainXYPlot0.setRangeCrosshairPaint(paint0);
      Color color0 = (Color)MeterPlot.DEFAULT_DIAL_BACKGROUND_PAINT;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(valueAxis0);
      combinedDomainXYPlot0.axisChanged(axisChangeEvent0);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(color0);
      Layer layer0 = Layer.FOREGROUND;
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.equals(paint0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      combinedRangeXYPlot0.getDomainAxis(3);
      combinedRangeXYPlot0.getRangeMinorGridlinePaint();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot1.getDomainAxisEdge();
      ValueMarker valueMarker0 = new ValueMarker(10.0);
      Layer layer1 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.removeRangeMarker(151, (Marker) valueMarker0, layer1, false);
      combinedRangeXYPlot2.clearDomainMarkers((-3727));
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      combinedRangeXYPlot2.select(650.0947848526464, (-2834.28284), (Rectangle2D) null, (RenderingSource) chartPanel0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0);
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2, 10, 1, 2, 0, 234, false, false, false, false, false, true);
      Point point1 = chartPanel0.getLocation();
      point0.setLocation(point1);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) point0, false);
      combinedRangeXYPlot1.setRangeCrosshairPaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedDomainXYPlot0.getRangeAxisEdge((-907));
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.getDataset(10);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.FOREGROUND;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, false);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      XYDifferenceRenderer xYDifferenceRenderer1 = new XYDifferenceRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      jFreeChart0.getXYPlot();
      combinedDomainXYPlot0.removeDomainMarker(1021, (Marker) null, layer0, false);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.configureDomainAxes();
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeGridlinesVisible(false);
      combinedRangeXYPlot0.getRangeMinorGridlineStroke();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addRangeMarker((Marker) null, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-0.3620521176583326), (-1139.781834574782), "The index value }(");
      IntervalMarker intervalMarker0 = new IntervalMarker((-0.3620521176583326), 0.05, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.addDomainMarker(123, (Marker) intervalMarker0, layer0);
      JFreeChart jFreeChart0 = new JFreeChart("The 'data' array must have length == 6.", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, true);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      xYPlot0.getDataRange(cyclicNumberAxis0);
      ValueMarker valueMarker0 = new ValueMarker(1.0E-8);
      Color color0 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      valueMarker0.setOutlinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.addDomainMarker((Marker) valueMarker0);
      Color color1 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.getRangeGridlinePaint();
      ValueMarker valueMarker1 = new ValueMarker((-1139.781834574782), color0, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      valueMarker0.setLabel("Null 'order' argument.");
      valueMarker1.setOutlinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.addDomainMarker((Marker) intervalMarker0);
      combinedRangeXYPlot1.setDomainMinorGridlinesVisible(true);
      combinedRangeXYPlot0.clearDomainAxes();
      combinedRangeXYPlot0.getRangeAxis();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("9");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.zoomRangeAxes(12.0, plotRenderingInfo0, (Point2D) point0, false);
      combinedRangeXYPlot0.setRangeCrosshairPaint(numberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0);
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) point0, false);
      combinedRangeXYPlot0.setRangeCrosshairPaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedDomainXYPlot0.setRangeCrosshairPaint(cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.setDomainAxis(0, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getDatasetCount();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " r");
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      Paint paint0 = combinedRangeXYPlot0.getRangeCrosshairPaint();
      LogAxis logAxis0 = new LogAxis(" r");
      LogAxis logAxis1 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis1);
      combinedRangeXYPlot1.equals(paint0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      combinedRangeXYPlot0.getDomainAxis(10);
      combinedRangeXYPlot1.getRangeMinorGridlinePaint();
      combinedRangeXYPlot1.getDomainAxisEdge();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeRangeMarker(500, (Marker) valueMarker0, layer0, true);
      combinedRangeXYPlot1.clearDomainMarkers(483);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "labelOutlineVisible");
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      Point2D point2D0 = xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2107, (-3064.39), 678.71412, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      point2D0.setLocation((double) 300, 678.71412);
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      xYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
      chartRenderingInfo0.clone();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.panDomainAxes(43, plotRenderingInfo1, point2D0);
      xYPlot0.zoomDomainAxes((double) clusteredXYBarRenderer0.ZERO, plotRenderingInfo0, point2D0, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainTickBandPaint();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("COPY");
      combinedDomainXYPlot0.setRangeAxis(680, (ValueAxis) numberAxis3D0, false);
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 0.5F, true);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0, 0.0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.removeDomainMarker((Marker) intervalMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      Point2D point2D0 = xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2107, (-3064.39), 678.71412, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      point2D0.setLocation((double) 300, 678.71412);
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      xYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.panDomainAxes(43, plotRenderingInfo1, point2D0);
      xYPlot0.zoomDomainAxes((-829.09), plotRenderingInfo1, point2D0, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainTickBandPaint();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ZOOM_IN_DOMAIN");
      combinedDomainXYPlot0.setRangeAxis(1024, (ValueAxis) numberAxis3D0, true);
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, (Rectangle2D) null);
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.drawVerticalLine(graphics2D1, (Rectangle2D) null, 650.0947848526464, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, xYPlot0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(0, axisLocation0, false);
      combinedDomainXYPlot0.setDomainAxisLocation(10, axisLocation0, false);
      combinedDomainXYPlot0.clearDomainMarkers(10);
      combinedDomainXYPlot0.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedRangeXYPlot0.configureRangeAxes();
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(false);
      combinedRangeXYPlot0.getSeriesCount();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setRangeAxisLocation(1, axisLocation0, true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxisLocation((-3302), axisLocation0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-0.3620521176583326), (-1139.781834574782), "The index value }(");
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.zoomRangeAxes((-1139.781834574782), plotRenderingInfo0, (Point2D) point0, true);
      combinedRangeXYPlot0.setRangeCrosshairPaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      BasicStroke basicStroke0 = (BasicStroke)CyclicNumberAxis.DEFAULT_ADVANCE_LINE_STROKE;
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 3555.4042, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT, basicStroke0, 0.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 1685.3991, 3, (-2724.88203896373));
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYPointerAnnotation0);
      combinedRangeXYPlot0.zoomRangeAxes((double) 0, plotRenderingInfo0, (Point2D) point0, true);
      combinedDomainXYPlot1.equals(combinedDomainXYPlot0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dK@r");
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1, 2, 10, 2);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      NumberAxis numberAxis0 = new NumberAxis("dK@r");
      numberAxis0.setLeftArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      Graphics2D graphics2D0 = null;
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance((-1086.6841472), (-1931.656054));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      Rectangle2D rectangle2D0 = numberAxis0.DEFAULT_TICK_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawBackground((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1878.172), 2, 3836.9388, 0.0F);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      valueAxis0.setLeftArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      Graphics2D graphics2D0 = null;
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(3836.9388, 10.0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      Rectangle2D rectangle2D0 = valueAxis0.DEFAULT_AXIS_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawBackground((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " r");
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      JFreeChart jFreeChart0 = new JFreeChart(" r", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.clone();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.handleClick(1480, 974, plotRenderingInfo0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
      IntervalMarker intervalMarker0 = new IntervalMarker((-2869.523596829), 10);
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      intervalMarker0.setGradientPaintTransformer(standardGradientPaintTransformer0);
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
      combinedDomainXYPlot0.getRangeAxisEdge();
      combinedDomainXYPlot0.clearRangeMarkers();
      combinedDomainXYPlot0.isRangeCrosshairVisible();
      combinedDomainXYPlot0.getDomainAxis();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 2.0F, true);
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      combinedDomainXYPlot0.getFixedLegendItems();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(500);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_GRIDLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Layer layer0 = Layer.BACKGROUND;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      cyclicNumberAxis0.setFixedDimension(10.0);
      xYPlot0.setRangeAxis(1788, (ValueAxis) cyclicNumberAxis0, true);
      xYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
      double double0 = 10.0;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<PeriodAxis> linkedList0 = new LinkedList<PeriodAxis>();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isDomainPannable();
      GeneralPath generalPath0 = new GeneralPath();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      xYItemRendererArray0[0] = (XYItemRenderer) xYSplineRenderer0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      xYItemRendererArray0[1] = (XYItemRenderer) xYSplineRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) stackedXYAreaRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) stackedXYAreaRenderer0;
      combinedDomainXYPlot1.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Layer layer0 = Layer.BACKGROUND;
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.axis.AxisLocation");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedRangeXYPlot0.configureRangeAxes();
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(true);
      combinedRangeXYPlot0.getSeriesCount();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1581.5202116973871), 1.0, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker(13, (Marker) intervalMarker0, layer1);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'order' argument.", periodAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, true);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      xYPlot0.getDataRange(periodAxis0);
      ValueMarker valueMarker0 = new ValueMarker((-1483.694128));
      Color color0 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      valueMarker0.setOutlinePaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0);
      Color color1 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Paint paint0 = fastScatterPlot0.getRangeGridlinePaint();
      ValueMarker valueMarker1 = new ValueMarker(13, paint0, fastScatterPlot0.DEFAULT_OUTLINE_STROKE);
      valueMarker1.setLabel("Null 'order' argument.");
      valueMarker1.setOutlinePaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      xYPlot0.addDomainMarker((Marker) valueMarker0);
      xYPlot0.setDomainMinorGridlinesVisible(true);
      combinedRangeXYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setQuadrantOrigin(point0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(250);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      Paint paint0 = combinedRangeXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(paint0);
      xYItemRendererArray0[1] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) xYDifferenceRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedRangeXYPlot0.isDomainPannable();
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      combinedRangeXYPlot0.getRenderer((-1936));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, (-1.0));
      cyclicNumberAxis0.setLabelToolTip("");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[9];
      xYItemRendererArray0[0] = (XYItemRenderer) cyclicXYItemRenderer0;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) candlestickRenderer0;
      CyclicXYItemRenderer cyclicXYItemRenderer1 = new CyclicXYItemRenderer();
      xYItemRendererArray0[2] = (XYItemRenderer) cyclicXYItemRenderer1;
      xYItemRendererArray0[3] = (XYItemRenderer) cyclicXYItemRenderer0;
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      combinedRangeXYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.mapDatasetToDomainAxis(0, 0);
      combinedRangeXYPlot0.getDomainAxisForDataset(3);
      combinedRangeXYPlot1.setRangeCrosshairVisible(true);
      JFreeChart jFreeChart0 = new JFreeChart("", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1454, 8);
      bufferedImage0.createGraphics();
      BasicTextPaneUI basicTextPaneUI0 = new BasicTextPaneUI();
      JPasswordField jPasswordField0 = new JPasswordField("");
      // Undeclared exception!
      try { 
        basicTextPaneUI0.modelToView((JTextComponent) jPasswordField0, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicTextUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, ".SQYvM~?8==#p:WK=p");
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[4] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[5] = (ValueAxis) cyclicNumberAxis0;
      xYPlot0.setRangeAxis(10, valueAxisArray0[1]);
      valueAxisArray0[7] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[8] = (ValueAxis) cyclicNumberAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      xYPlot0.configureRangeAxes();
      combinedDomainXYPlot0.getDomainAxisLocation(10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart(".SQYvM~?8==#p:WK=p", xYPlot1);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      chartPanel0.getChartRenderingInfo();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      xYPlot1.isDomainMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clone();
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      String string0 = "";
      NumberAxis numberAxis0 = new NumberAxis("");
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      String string1 = "B";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("B");
      valueAxisArray0[1] = (ValueAxis) logarithmicAxis0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 5.0E-6);
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis0;
      LogarithmicAxis logarithmicAxis1 = new LogarithmicAxis("");
      valueAxisArray0[3] = (ValueAxis) logarithmicAxis1;
      xYPlot0.setDomainAxes(valueAxisArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, ".SQYvM~?8==#p(:WK=p");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, true);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      XYPlot xYPlot1 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(48.93);
      xYLineAndShapeRenderer0.hasListener(defaultWindDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(".SQYvM~?8==#p(:WK=p", xYPlot1);
      XYPlot xYPlot2 = jFreeChart0.getXYPlot();
      xYPlot2.setRangeMinorGridlineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      chartRenderingInfo0.clone();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.panDomainAxes(10, plotRenderingInfo0, (Point2D) null);
      xYPlot1.zoomDomainAxes(1.0E-8, plotRenderingInfo1, (Point2D) null, false);
      xYPlot0.indexOf(defaultWindDataset0);
      xYPlot1.isDomainMinorGridlinesVisible();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LogAxis logAxis0 = new LogAxis("");
      xYPlot1.setRangeAxis(1, (ValueAxis) logAxis0, true);
      xYPlot0.setDomainZeroBaselineStroke(xYPlot2.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getBaseOutlinePaint();
      combinedDomainXYPlot0.setRangeCrosshairPaint(paint0);
      Color color0 = (Color)MeterPlot.DEFAULT_DIAL_BACKGROUND_PAINT;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(valueAxis0);
      combinedDomainXYPlot0.axisChanged(axisChangeEvent0);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(color0);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getRangeMarkers((-7), layer0);
      combinedDomainXYPlot0.getDataset((-2557));
      JFreeChart jFreeChart0 = new JFreeChart("-hX5ld7n4[cY^", valueAxis0.DEFAULT_TICK_LABEL_FONT, thermometerPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = null;
      try {
        lookupOp0 = new LookupOp((LookupTable) null, renderingHints0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.LookupOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.BACKGROUND;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot2.getRangeAxisEdge(10);
      combinedDomainXYPlot1.indexOf(timeSeriesCollection0);
      combinedDomainXYPlot2.getDataset(10);
      combinedDomainXYPlot2.setDomainMinorGridlinesVisible(false);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.axis.AxisLocation");
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(true);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, int0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      IntervalMarker intervalMarker0 = new IntervalMarker((-1581.5202116973871), 1.0, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals((-1581.5202116973871), intervalMarker0.getStartValue(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer1 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertSame(layer1, layer0);
      assertNotNull(layer1);
      
      combinedRangeXYPlot0.addDomainMarker(13, (Marker) intervalMarker0, layer1);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals((-1581.5202116973871), intervalMarker0.getStartValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(layer1, layer0);
      
      JFreeChart jFreeChart0 = new JFreeChart("Null 'order' argument.", periodAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, true);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)jFreeChart0.getXYPlot();
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      
      Range range0 = combinedRangeXYPlot1.getDataRange(periodAxis0);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNull(range0);
      
      ValueMarker valueMarker0 = new ValueMarker((-1483.694128));
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1483.694128), valueMarker0.getValue(), 0.01);
      assertNotNull(valueMarker0);
      
      Color color0 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      valueMarker0.setOutlinePaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1483.694128), valueMarker0.getValue(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals((-1581.5202116973871), intervalMarker0.getStartValue(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      Color color1 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      assertEquals((-1), color1.getRGB());
      assertEquals(255, color1.getGreen());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getBlue());
      assertSame(color1, color0);
      assertNotNull(color1);
      
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertFalse(fastScatterPlot0.isSubplot());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(fastScatterPlot0);
      
      Color color2 = (Color)fastScatterPlot0.getRangeGridlinePaint();
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertFalse(fastScatterPlot0.isSubplot());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertEquals(192, color2.getGreen());
      assertEquals((-4144960), color2.getRGB());
      assertEquals(192, color2.getBlue());
      assertEquals(192, color2.getRed());
      assertEquals(255, color2.getAlpha());
      assertEquals(1, color2.getTransparency());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      assertNotNull(color2);
      
      ValueMarker valueMarker1 = new ValueMarker(13, color2, fastScatterPlot0.DEFAULT_OUTLINE_STROKE);
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertFalse(fastScatterPlot0.isSubplot());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertEquals(192, color2.getGreen());
      assertEquals((-4144960), color2.getRGB());
      assertEquals(192, color2.getBlue());
      assertEquals(192, color2.getRed());
      assertEquals(255, color2.getAlpha());
      assertEquals(1, color2.getTransparency());
      assertNull(valueMarker1.getLabel());
      assertEquals(13.0, valueMarker1.getValue(), 0.01);
      assertEquals(1.0F, valueMarker1.getAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(valueMarker1);
      
      valueMarker1.setOutlinePaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertFalse(fastScatterPlot0.isSubplot());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertEquals(192, color2.getGreen());
      assertEquals((-4144960), color2.getRGB());
      assertEquals(192, color2.getBlue());
      assertEquals(192, color2.getRed());
      assertEquals(255, color2.getAlpha());
      assertEquals(1, color2.getTransparency());
      assertNull(valueMarker1.getLabel());
      assertEquals(13.0, valueMarker1.getValue(), 0.01);
      assertEquals(1.0F, valueMarker1.getAlpha(), 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      assertNotSame(valueMarker1, valueMarker0);
      
      combinedRangeXYPlot1.addDomainMarker((Marker) valueMarker0);
      assertFalse(valueMarker0.equals((Object)valueMarker1));
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1483.694128), valueMarker0.getValue(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(valueMarker0, valueMarker1);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot1.setDomainMinorGridlinesVisible(true);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, ".SQYvM~?8==#p:WK=p");
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[4] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[5] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[6] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[7] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[8] = (ValueAxis) cyclicNumberAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisLocation(10);
      combinedDomainXYPlot0.getFixedLegendItems();
      combinedDomainXYPlot0.setDomainGridlineStroke(xYPlot1.DEFAULT_GRIDLINE_STROKE);
      combinedRangeXYPlot0.setNoDataMessage(".SQYvM~?8==#p:WK=p");
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart(".SQYvM~?8==#p:WK=p", font0, xYPlot1, true);
      AffineTransform.getTranslateInstance((-927.19873327818), 0.0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setRangeMinorGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      SystemColor systemColor0 = SystemColor.controlShadow;
      combinedRangeXYPlot1.getLegendItems();
      combinedRangeXYPlot1.setRangeAxes(valueAxisArray0);
      combinedRangeXYPlot1.setDomainMinorGridlinesVisible(true);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Re_5w{tM,D");
      DateAxis dateAxis0 = new DateAxis("Re_5w{tM,D", timeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomRangeAxes(0.0, 812.7836816, plotRenderingInfo0, (Point2D) null);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.getRangeAxisEdge();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(678.71412, (-5075.0721));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
      combinedDomainXYPlot0.setRangeAxis(500, (ValueAxis) cyclicNumberAxis0);
      combinedDomainXYPlot0.getPlotType();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.lookupSectionPaint(0.05);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getItemStroke((-3938), (-102), false);
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot1.DEFAULT_GRIDLINE_STROKE, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 0.0F);
      combinedDomainXYPlot1.removeRangeMarker((Marker) categoryMarker0, layer0);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(1);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[23];
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) stackedXYAreaRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) stackedXYAreaRenderer0;
      // Undeclared exception!
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, true);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      XYDifferenceRenderer xYDifferenceRenderer1 = new XYDifferenceRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getRangeAxisLocation((-321));
      axisLocation0.getOpposite();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0);
      Layer layer0 = Layer.BACKGROUND;
      LogAxis logAxis0 = new LogAxis();
      float[][] floatArray0 = new float[0][2];
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, valueAxis0, logAxis0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot1.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot1.setRangeAxis(653, (ValueAxis) cyclicNumberAxis0);
      combinedDomainXYPlot1.getPlotType();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.lookupSectionPaint(1);
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(2.0F, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, stackedXYAreaRenderer0.DEFAULT_OUTLINE_STROKE, ringPlot0.DEFAULT_OUTLINE_PAINT, ringPlot0.DEFAULT_LABEL_OUTLINE_STROKE, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.FOREGROUND;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      ModuloAxis moduloAxis0 = new ModuloAxis("2iC", numberAxis3D0.DEFAULT_RANGE);
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      valueAxisArray0[0] = (ValueAxis) moduloAxis0;
      valueAxisArray0[1] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[2] = (ValueAxis) moduloAxis0;
      valueAxisArray0[3] = (ValueAxis) moduloAxis0;
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getDomainAxisLocation(10);
      combinedDomainXYPlot0.getFixedLegendItems();
      combinedDomainXYPlot1.setDomainGridlineStroke(moduloAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot0.setNoDataMessage("");
      LinkedList<Rectangle2D.Float> linkedList0 = new LinkedList<Rectangle2D.Float>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.mapDatasetToRangeAxes((-1080), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(1.0F, 10);
      cyclicNumberAxis0.setAutoRangeMinimumSize(0.05);
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis1;
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getDomainAxisLocation((-2492));
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Category_Plot", meterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo1 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo1.getPlotInfo();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.zoomRangeAxes(413.68, 1024.0, plotRenderingInfo0, (Point2D) null);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(12.0, 43.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis.DEFAULT_ADVANCE_LINE_STROKE = combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE;
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeAnnotation((XYAnnotation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, (-1.0));
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeAnnotation((XYAnnotation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.FOREGROUND;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      combinedDomainXYPlot0.setDataset((XYDataset) timeSeriesCollection0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance((short) (-3597), (-1676.57762));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, (List) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot2.getRendererForDataset(jDBCXYDataset0);
      combinedDomainXYPlot2.getRangeAxisEdge((-4806));
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot2.drawDomainGridlines((Graphics2D) null, rectangle2D_Float0, (List) null);
      combinedDomainXYPlot0.isDomainCrosshairVisible();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " r");
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      combinedRangeXYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(699, 72, 4.0, (-3064.39), chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      combinedRangeXYPlot0.drawDomainGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AffineTransform.getTranslateInstance(1, 0.0F);
      FontRenderContext fontRenderContext0 = new FontRenderContext((AffineTransform) null, false, false);
      Font font0 = cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT.deriveFont((float) 10);
      Rectangle2D rectangle2D0 = font0.getMaxCharBounds(fontRenderContext0);
      Stack<AxisState> stack0 = new Stack<AxisState>();
      fontRenderContext0.usesFractionalMetrics();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      combinedDomainXYPlot3.drawDomainTickBands((Graphics2D) null, rectangle2D0, stack0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      combinedDomainXYPlot3.getRendererForDataset(defaultTableXYDataset0);
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getRangeAxisLocation();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxisLocation((-1750), axisLocation0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(valueAxis0.DEFAULT_TICK_MARK_STROKE);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(0, axisLocation0, false);
      combinedDomainXYPlot0.setDomainAxisLocation(10, axisLocation0, false);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1878.172), 2, 3836.9388, 0.0F);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(3836.9388, 1.0F);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      Rectangle2D rectangle2D0 = valueAxis0.DEFAULT_AXIS_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      Stack<AxisState> stack0 = new Stack<AxisState>();
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D0, stack0);
      SystemColor systemColor0 = SystemColor.controlShadow;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.getLegendItems();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      combinedRangeXYPlot0.equals(defaultKeyedValues2DDataset0);
      combinedRangeXYPlot0.setDataset(10, (XYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " r");
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      Paint paint0 = combinedRangeXYPlot0.getRangeCrosshairPaint();
      LogAxis logAxis0 = new LogAxis(" r");
      LogAxis logAxis1 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.equals(paint0);
      combinedRangeXYPlot0.getDomainAxis(10);
      combinedRangeXYPlot1.getRangeMinorGridlinePaint();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis1);
      combinedDomainXYPlot0.getRenderer(10);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, ".SQYvM~?8==#p:WK=p");
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[4] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[5] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[6] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[7] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[8] = (ValueAxis) cyclicNumberAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      chartRenderingInfo1.clone();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.panDomainAxes((-1906.05593962325), plotRenderingInfo0, (Point2D) null);
      xYPlot0.configureRangeAxes();
      xYPlot1.zoomDomainAxes((double) 10, plotRenderingInfo0, (Point2D) null, true);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      xYPlot1.indexOf(histogramDataset0);
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
      DatasetGroup datasetGroup0 = new DatasetGroup();
      histogramDataset0.setGroup(datasetGroup0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxis((-1), valueAxisArray0[8], true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setRangeMinorGridlineStroke(combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      SystemColor systemColor0 = SystemColor.controlShadow;
      combinedRangeXYPlot1.getLegendItems();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jfree.chart.event.OverlayChangeEvent");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDomainMinorGridlineStroke();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      xYPlot0.clone();
      xYPlot0.isDomainZoomable();
      int int0 = 100;
      // Undeclared exception!
      try { 
        Quarter.parseQuarter("org.jfree.chart.event.OverlayChangeEvent");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing Q.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1878.172), 2, 3836.9388, 0.0F);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      valueAxis0.setLeftArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      Stack<AxisState> stack0 = new Stack<AxisState>();
      combinedDomainXYPlot0.getRendererForDataset(jDBCXYDataset0);
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(1506.103402092, 1.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(1284, (Marker) intervalMarker0, layer0, true);
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      combinedDomainXYPlot0.setDataset((XYDataset) timeSeriesCollection0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(2.0F, (-908.814025652));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, false);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      combinedDomainXYPlot1.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, (List) null);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.getRendererForDataset(timeSeriesCollection0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      combinedDomainXYPlot1.clearSelection();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo1 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo1.getPlotInfo();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.zoomRangeAxes((-193.7433), plotRenderingInfo0, (Point2D) point0, true);
      combinedRangeXYPlot1.setRangeCrosshairPaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot1.isDomainCrosshairLockedOnData();
      combinedDomainXYPlot1.getRangeCrosshairStroke();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-2798.51));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis((-1790), (ValueAxis) cyclicNumberAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainCrosshairVisible(false);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1742.7317, 0, 1787.942, 1627.8440570903301);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      point0.move(10, (-1805));
      double double0 = 2460.0;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDomainCrosshairVisible(false);
      combinedDomainXYPlot0.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      Stack<AxisState> stack0 = new Stack<AxisState>();
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, (Rectangle2D) null, stack0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      combinedDomainXYPlot0.getRendererForDataset(jDBCXYDataset0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(500, axisLocation0, true);
      combinedDomainXYPlot0.setDomainAxisLocation(0, axisLocation0, false);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      CategoryMarker categoryMarker0 = new CategoryMarker(2.0F);
      Action action0 = TransferHandler.getCopyAction();
      JToggleButton jToggleButton0 = new JToggleButton(action0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jToggleButton0, 10, 10, 500, 10, 10, 10, 10, 1238, true, (-369), 1238, 500, 2.0F);
      Point point0 = mouseWheelEvent0.getLocationOnScreen();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes(0.05, (PlotRenderingInfo) null, (Point2D) point0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainCrosshairVisible(true);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1742.7317, 0, 1787.942, 1627.8440570903301);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(10, (-269.0232825));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      Rectangle2D rectangle2D0 = valueAxis0.DEFAULT_TICK_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      Stack<AxisState> stack0 = new Stack<AxisState>();
      fontRenderContext0.usesFractionalMetrics();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.drawDomainTickBands((Graphics2D) null, rectangle2D0, stack0);
      combinedDomainXYPlot1.getRendererForDataset(jDBCXYDataset0);
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getRangeAxisLocation();
      combinedDomainXYPlot1.setRangeAxisLocation(3, axisLocation0, false);
      combinedDomainXYPlot1.getRenderer((-954));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " r");
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      Paint paint0 = combinedRangeXYPlot0.getRangeCrosshairPaint();
      LogAxis logAxis0 = new LogAxis();
      LogAxis logAxis1 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis1);
      combinedRangeXYPlot1.equals(paint0);
      combinedRangeXYPlot0.getDomainAxis(10);
      combinedRangeXYPlot1.getRangeMinorGridlinePaint();
      combinedRangeXYPlot1.getDomainAxisEdge();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Stack<ExtendedCategoryAxis> stack0 = new Stack<ExtendedCategoryAxis>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      combinedDomainXYPlot0.drawRangeGridlines((Graphics2D) null, (Rectangle2D) null, stack0);
      combinedDomainXYPlot0.getDataset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      combinedDomainXYPlot0.isRangeCrosshairVisible();
      combinedDomainXYPlot0.getRangeMarkers((-662), layer0);
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, (Rectangle2D) null, stack0);
      float[] floatArray0 = new float[0];
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, combinedDomainXYPlot0, false);
      jFreeChart0.removeLegend();
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      Layer layer1 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) null);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&GPZoCC_A)BxvN}");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairValue(Double.NaN, true);
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getRangeCrosshairPaint();
      Point2D.Double point2D_Double0 = new Point2D.Double((-2044.22052), 1.0F);
      LogAxis logAxis0 = new LogAxis();
      LogAxis logAxis1 = new LogAxis();
      logAxis1.setLabelPaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot1.getRangeAxisIndex(logAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot2.equals((Object) null);
      combinedRangeXYPlot2.getDomainAxis(1);
      combinedRangeXYPlot2.getRangeMinorGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-172.67031), ".SQYvM~?8==#p:WK=p");
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      HistogramDataset histogramDataset1 = new HistogramDataset();
      histogramDataset1.clone();
      combinedDomainXYPlot0.setDataset((XYDataset) histogramDataset1);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(0.0, (-580.75));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, (List) null);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      combinedDomainXYPlot3.getRendererForDataset(timeSeriesCollection0);
      combinedDomainXYPlot0.getRangeAxisEdge(94);
      combinedDomainXYPlot1.clearSelection();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      combinedDomainXYPlot2.getDomainMarkers(10, layer0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "labelOutlineVisible");
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(3, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      xYPlot0.removeDomainMarker((Marker) null);
      xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2107, (double) 2.0F, 678.71412, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      xYPlot0.drawDomainGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
      ModuloAxis moduloAxis0 = new ModuloAxis("ZOOM_RESET_RANGE", cyclicNumberAxis0.DEFAULT_RANGE);
      xYPlot0.equals(moduloAxis0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      xYLineAndShapeRenderer0.hasListener(xYPlot0);
      xYPlot0.setRangeMinorGridlineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      chartRenderingInfo1.clone();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo1);
      xYPlot0.panDomainAxes(0.0F, plotRenderingInfo1, (Point2D) null);
      xYPlot0.zoomDomainAxes((-1002.959806567), plotRenderingInfo0, (Point2D) null, false);
      xYPlot0.indexOf(jDBCXYDataset0);
      xYPlot0.isDomainMinorGridlinesVisible();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxis(Integer.MAX_VALUE, (ValueAxis) numberAxis3D0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      histogramDataset0.clone();
      combinedDomainXYPlot0.setDataset((XYDataset) histogramDataset0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(1, 0.05);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, (List) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, (List) null);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(dateAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot3.getRendererForDataset(histogramDataset0);
      combinedDomainXYPlot3.getRangeAxisEdge(10);
      combinedDomainXYPlot3.clearSelection();
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, true);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      Color color0 = Color.CYAN;
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      AxisLocation.getOpposite(axisLocation0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      SystemColor systemColor0 = SystemColor.controlShadow;
      combinedRangeXYPlot0.getLegendItems();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = null;
      valueAxisArray0[1] = null;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      combinedRangeXYPlot0.isRangeZoomable();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainCrosshairVisible(true);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getItemFillPaint(10, 10, false);
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance((-436.0281868137808), 500.0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      int int0 = (-905);
      int int1 = (-2142);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(10, (-905), (-2142));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -2142
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      
      LogAxis logAxis0 = new LogAxis("DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.");
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals("DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.", logAxis0.getLabel());
      assertTrue(logAxis0.isAutoRange());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(logAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals("DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.", logAxis0.getLabel());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeAxis(10, (ValueAxis) logAxis0, true);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals("DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.", logAxis0.getLabel());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(11, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getRangeMinorGridlineStroke();
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.clearRangeMarkers(10);
      xYPlot0.canSelectByPoint();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, (-1.0));
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[9];
      xYItemRendererArray0[0] = (XYItemRenderer) cyclicXYItemRenderer0;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) candlestickRenderer0;
      CyclicXYItemRenderer cyclicXYItemRenderer1 = new CyclicXYItemRenderer();
      xYItemRendererArray0[2] = (XYItemRenderer) cyclicXYItemRenderer1;
      xYItemRendererArray0[3] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[4] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[5] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[6] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[7] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[8] = (XYItemRenderer) cyclicXYItemRenderer0;
      combinedRangeXYPlot1.setRenderers(xYItemRendererArray0);
      combinedRangeXYPlot1.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.mapDatasetToDomainAxis(2, 4);
      combinedRangeXYPlot1.getDomainAxisForDataset(1);
      combinedRangeXYPlot0.setRangeCrosshairVisible(false);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "labelOutlineVisible");
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      xYPlot0.removeDomainMarker((Marker) null);
      xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2107, (-3064.39), 678.71412, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D rectangle2D0 = null;
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      xYPlot0.drawDomainGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
      xYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
      float[][] floatArray0 = new float[2][8];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) 680;
      floatArray1[1] = 0.5F;
      floatArray1[2] = (float) 200;
      floatArray1[3] = (float) 680;
      floatArray1[4] = (float) 2107;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[1] = floatArray2;
      LogAxis logAxis0 = new LogAxis();
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, logAxis0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.isRangeGridlinesVisible();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-283.01899759616), 0.0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      combinedRangeXYPlot1.setRangeGridlinesVisible(true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.mapDatasetToDomainAxis((-1750), 1922);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " r");
      combinedRangeXYPlot0.setRangeCrosshairValue(Double.NaN, true);
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      Paint paint0 = combinedRangeXYPlot0.getRangeCrosshairPaint();
      Point2D.Double point2D_Double0 = new Point2D.Double(0.05, 0.05);
      LogAxis logAxis0 = new LogAxis();
      LogAxis logAxis1 = new LogAxis();
      logAxis0.setLabelPaint(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      combinedRangeXYPlot0.getRangeAxisIndex(logAxis1);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis1);
      combinedRangeXYPlot1.equals(paint0);
      combinedRangeXYPlot0.getDomainAxis(10);
      combinedRangeXYPlot1.getRangeMinorGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.clone();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisLocation(0);
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.setDomainGridlineStroke(combinedRangeXYPlot1.DEFAULT_CROSSHAIR_STROKE);
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot1.DEFAULT_GRIDLINE_STROKE);
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.DATASET_UPDATED;
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot3.setQuadrantPaint(127, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (127) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      histogramDataset0.clone();
      combinedDomainXYPlot0.setDataset((XYDataset) histogramDataset0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(1, 0.05);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, (List) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.getRendererForDataset(timeSeriesCollection0);
      combinedDomainXYPlot0.getRangeAxisEdge(1284);
      combinedDomainXYPlot1.clearSelection();
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      Stack<ExtendedCategoryAxis> stack0 = new Stack<ExtendedCategoryAxis>();
      combinedDomainXYPlot0.drawRangeGridlines((Graphics2D) null, (Rectangle2D) null, stack0);
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("org.jfree.chart.plot.XYPlot");
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("CategoryAnchor.START", choiceFormat0, choiceFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0F, true, standardXYToolTipGenerator0);
      candlestickRenderer0.getSeriesStroke(10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      AxisLocation.getOpposite(axisLocation0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      SystemColor systemColor0 = SystemColor.controlShadow;
      LegendItemCollection legendItemCollection0 = combinedRangeXYPlot0.getLegendItems();
      combinedRangeXYPlot0.setBackgroundPaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedRangeXYPlot0.equals(legendItemCollection0);
      combinedRangeXYPlot0.setRangeCrosshairPaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 2883.1368741874458);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      combinedRangeXYPlot1.setRangeGridlinesVisible(false);
      combinedRangeXYPlot1.mapDatasetToDomainAxis(1, 10);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 2 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("e@_<iUCXB/\"]G", stringArray0);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, symbolAxis0, symbolAxis0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(2.0F);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      chartRenderingInfo1.clone();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo1);
      xYPlot0.panDomainAxes(2295.154083363202, plotRenderingInfo0, (Point2D) null);
      xYPlot0.zoomDomainAxes(1024.0, plotRenderingInfo0, (Point2D) null, false);
      xYPlot0.indexOf(xYIntervalSeriesCollection0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(xYPlot0.DEFAULT_LEGEND_ITEM_BOX, xYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis(Integer.MAX_VALUE, (ValueAxis) symbolAxis0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      xYPlot0.setRangeMinorGridlineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      chartRenderingInfo1.clone();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo1);
      xYPlot0.panDomainAxes(0.0F, plotRenderingInfo1, (Point2D) null);
      xYPlot0.zoomDomainAxes((-1002.959806567), plotRenderingInfo0, (Point2D) null, false);
      xYPlot0.indexOf(jDBCXYDataset0);
      xYPlot0.isDomainMinorGridlinesVisible();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(xYLineAndShapeRenderer0.DEFAULT_SHAPE, numberAxis3D0.DEFAULT_TICK_MARK_STROKE, xYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, true);
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxis(Integer.MAX_VALUE, (ValueAxis) numberAxis3D0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.getBaseStroke();
      combinedDomainXYPlot0.setDomainCrosshairStroke(stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.getQuadrantPaint(2);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      SeriesRenderingOrder seriesRenderingOrder1 = SeriesRenderingOrder.REVERSE;
      combinedDomainXYPlot1.setSeriesRenderingOrder(seriesRenderingOrder0);
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, (-1356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: -1356
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 10
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      combinedDomainXYPlot0.setDomainCrosshairStroke(xYDifferenceRenderer0.DEFAULT_OUTLINE_STROKE);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.getQuadrantPaint(1);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      SeriesRenderingOrder seriesRenderingOrder1 = combinedDomainXYPlot0.getSeriesRenderingOrder();
      combinedDomainXYPlot1.setSeriesRenderingOrder(seriesRenderingOrder1);
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 10
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.setAutoPopulateSeriesStroke(true);
      stackedXYAreaRenderer0.lookupSeriesOutlinePaint(10);
      JFreeChart jFreeChart0 = new JFreeChart("XY_Plot", stackedXYAreaRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(2216);
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.getAxisOffset();
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " r");
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      Paint paint0 = combinedRangeXYPlot0.getRangeCrosshairPaint();
      LogAxis logAxis0 = new LogAxis(" r");
      LogAxis logAxis1 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis1);
      combinedRangeXYPlot1.equals(paint0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      combinedRangeXYPlot0.getDomainAxis(10);
      combinedRangeXYPlot1.getRangeMinorGridlinePaint();
      combinedRangeXYPlot1.getDomainAxisEdge();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeRangeMarker(500, (Marker) valueMarker0, layer0, true);
      combinedRangeXYPlot0.clearRangeMarkers(500);
      combinedRangeXYPlot1.getAxisOffset();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.indexOf(jDBCXYDataset0);
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " r");
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 2.0F, true);
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0F, 500);
      LogAxis logAxis0 = new LogAxis();
      LogAxis logAxis1 = new LogAxis();
      logAxis1.setLabelPaint(logAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.getRangeAxisIndex(numberAxis3D0);
      combinedRangeXYPlot0.getDomainAxisEdge(500);
      combinedRangeXYPlot0.equals(timeSeriesCollection0);
      combinedRangeXYPlot0.getDomainAxis((-2803));
      combinedRangeXYPlot0.getRangeMinorGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomRangeAxes(0.0, 812.7836816, plotRenderingInfo0, (Point2D) null);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.getRangeAxisCount();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, (ValueAxis) null, numberAxis3D0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.removeDomainMarker(500, (Marker) valueMarker0, layer0, true);
      combinedRangeXYPlot0.configureDomainAxes();
      xYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.getRangeMinorGridlineStroke();
      xYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      xYPlot0.setRangeCrosshairValue((double) 1.0F, false);
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      xYPlot0.getRangeZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(10.0);
      Layer layer0 = Layer.FOREGROUND;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      xYPlot1.removeDomainMarker(15, (Marker) valueMarker0, layer0, false);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.configureDomainAxes();
      xYPlot0.setRangeGridlinesVisible(false);
      combinedRangeXYPlot0.getRangeMinorGridlineStroke();
      xYPlot0.addRangeMarker((Marker) valueMarker0, (Layer) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setRangeCrosshairValue(1356.21, false);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, (ValueAxis) null, numberAxis3D0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.removeDomainMarker(500, (Marker) valueMarker0, layer0, true);
      combinedRangeXYPlot0.configureDomainAxes();
      xYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.configureDomainAxes();
      combinedRangeXYPlot0.setRangeGridlinesVisible(true);
      Day day0 = new Day();
      RegularTimePeriod regularTimePeriod0 = day0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.data.general.SeriesChangeType", regularTimePeriod0, regularTimePeriod0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      combinedRangeXYPlot1.getRangeMinorGridlineStroke();
      xYPlot0.addRangeMarker((Marker) valueMarker0, (Layer) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 10, true);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "labelOutlineVisible");
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      xYPlot0.removeDomainMarker((Marker) null);
      xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2107, (-3064.39), 678.71412, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      xYPlot0.drawDomainGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      xYPlot0.setRangeMinorGridlineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      chartRenderingInfo1.clone();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo1);
      xYPlot0.panDomainAxes(0.0F, plotRenderingInfo1, (Point2D) null);
      xYPlot0.zoomDomainAxes((-1002.959806567), plotRenderingInfo0, (Point2D) null, false);
      xYPlot0.indexOf(jDBCXYDataset0);
      xYPlot0.isDomainMinorGridlinesVisible();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(xYLineAndShapeRenderer0.DEFAULT_SHAPE, numberAxis3D0.DEFAULT_TICK_MARK_STROKE, xYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, true);
      xYPlot0.isDomainZoomable();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, (-4144.0662129), "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxis((-1), valueAxis0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-172.67031), ".SQYvM~?8==#p:WK=p");
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisLocation(10);
      xYPlot1.getLegendItems();
      combinedDomainXYPlot0.setDomainGridlineStroke(xYPlot1.DEFAULT_GRIDLINE_STROKE);
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.DATASET_UPDATED;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setQuadrantPaint(2, xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.clearRangeMarkers(8);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-172.67031), ".SQYvM~?8==#p:WK=p");
      Object object0 = xYPlot0.clone();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisLocation(10);
      combinedDomainXYPlot0.getFixedLegendItems();
      combinedDomainXYPlot0.setDomainGridlineStroke(((XYPlot) object0).DEFAULT_GRIDLINE_STROKE);
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.DATASET_UPDATED;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      combinedRangeXYPlot1.setQuadrantPaint(2, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot1.mapDatasetToDomainAxis(2, 10);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 10 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ArrayDeque<AxisState> arrayDeque0 = new ArrayDeque<AxisState>();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setDomainMinorGridlineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      combinedRangeXYPlot1.setDomainCrosshairValue((double) 500, true);
      Layer layer1 = null;
      combinedRangeXYPlot0.getDomainMarkers((Layer) null);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot1.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
      combinedRangeXYPlot0.clearRangeMarkers();
      combinedRangeXYPlot0.setRangeGridlinesVisible(false);
      combinedRangeXYPlot1.setRangeCrosshairStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot1.getRendererCount();
      JFreeChart jFreeChart0 = new JFreeChart("Indices must be Integer instances.", combinedRangeXYPlot1);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp((-1175.32F), 0.0F, renderingHints0);
      ConvolveOp convolveOp0 = new ConvolveOp((Kernel) null);
      BufferedImage bufferedImage0 = null;
      // Undeclared exception!
      try { 
        convolveOp0.filter((BufferedImage) null, (BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // src image is null
         //
         verifyException("java.awt.image.ConvolveOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-172.67031), ".SQYvM~?8==#p:WK=p");
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisLocation(10);
      combinedDomainXYPlot0.getFixedLegendItems();
      combinedDomainXYPlot0.setDomainGridlineStroke(xYPlot1.DEFAULT_GRIDLINE_STROKE);
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      Point2D.Double point2D_Double0 = new Point2D.Double(500, 0.0);
      LogAxis logAxis0 = new LogAxis();
      LogAxis logAxis1 = new LogAxis();
      logAxis1.setLabelPaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      combinedRangeXYPlot0.getRangeAxisIndex(numberAxis0);
      combinedRangeXYPlot0.getDomainAxisEdge(2);
      IntervalMarker intervalMarker0 = new IntervalMarker(3137.9431, (-278.0));
      xYPlot1.removeRangeMarker((Marker) intervalMarker0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IntervalMarker intervalMarker0 = new IntervalMarker(4.0, Double.NaN, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.addDomainMarker(0, (Marker) intervalMarker0, layer0);
      combinedRangeXYPlot0.setDomainAxis((int) (byte)61, (ValueAxis) cyclicNumberAxis0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " r");
      combinedRangeXYPlot0.setRangeCrosshairValue(209.9, true);
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      Point2D.Double point2D_Double0 = new Point2D.Double(0.05, 0.05);
      LogAxis logAxis0 = new LogAxis();
      LogAxis logAxis1 = new LogAxis();
      logAxis0.setLabelPaint(cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.getRangeAxisIndex(cyclicNumberAxis0);
      combinedRangeXYPlot0.getDomainAxisEdge(0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.FOREGROUND;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      XYDifferenceRenderer xYDifferenceRenderer1 = new XYDifferenceRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.setBaseItemLabelsVisible(false, false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(1);
      axisLocation0.getOpposite();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot((ValueAxis) null);
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker(4, 10, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisForDataset(0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(5.0E-4);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeDomainMarker(10, (Marker) valueMarker0, layer0, true);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot1.setAxisOffset(numberAxis3D0.DEFAULT_TICK_LABEL_INSETS);
      combinedRangeXYPlot1.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getDrawingSupplier();
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("aS{F*:A+8\"5<Y2\"y<`'");
      logarithmicAxis0.setLabelURL("[d~ mwa'9XW");
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " r");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setRangeCrosshairValue(0.25, false);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot2.isRangeMinorGridlinesVisible();
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      combinedRangeXYPlot3.getRangeCrosshairPaint();
      combinedRangeXYPlot1.getQuadrantOrigin();
      LogAxis logAxis0 = new LogAxis();
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_PAINT;
      logAxis0.setLabelPaint(color0);
      combinedRangeXYPlot0.getRangeAxisIndex(logarithmicAxis0);
      combinedRangeXYPlot2.getDomainAxisEdge((-1));
      combinedRangeXYPlot0.getRangeCrosshairValue();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      AxisLocation.getOpposite(axisLocation0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      SystemColor systemColor0 = SystemColor.controlShadow;
      LegendItemCollection legendItemCollection0 = combinedRangeXYPlot0.getLegendItems();
      combinedRangeXYPlot0.equals(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1878.172), 2, 3836.9388, 0.0F);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      valueAxis0.setLeftArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      combinedDomainXYPlot1.setDataset((XYDataset) timeSeriesCollection0);
      ValueMarker valueMarker0 = new ValueMarker(10);
      Color color0 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      ValueMarker valueMarker1 = new ValueMarker(10.0, thermometerPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      valueMarker0.setOutlinePaint(combinedDomainXYPlot1.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker1);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset((-904));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -904 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedRangeXYPlot0.configureRangeAxes();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      Layer layer1 = Layer.FOREGROUND;
      combinedRangeXYPlot0.setNoDataMessagePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot1.setAxisOffset(combinedRangeXYPlot0.DEFAULT_INSETS);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset((-1790));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1790 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisForDataset(0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(5.0E-4);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeDomainMarker(10, (Marker) valueMarker0, layer0, true);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot1.configureDomainAxes();
      combinedRangeXYPlot1.isRangeGridlinesVisible();
      combinedRangeXYPlot0.setRangeGridlinesVisible(false);
      short[][] shortArray0 = new short[4][9];
      short[] shortArray1 = new short[0];
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[0];
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[1];
      shortArray3[0] = (short) (-1328);
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[4];
      shortArray4[0] = (short) (-1328);
      shortArray4[1] = (short) (-1328);
      shortArray4[2] = (short) (-1328);
      shortArray4[3] = (short) (-1328);
      shortArray0[3] = shortArray4;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(128, shortArray0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot1);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(500, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.clearDomainMarkers();
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(3488, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(9.0);
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(true, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, xYLineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE);
      xYPlot0.removeDomainMarker(87, (Marker) categoryMarker0, layer0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D1);
      Vector<XYAreaRenderer> vector0 = new Vector<XYAreaRenderer>();
      ArrayList<NumberAxis> arrayList0 = new ArrayList<NumberAxis>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes((byte)120, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1139.781834574782), "The index value (");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomRangeAxes(0.0, (-161.7531195712), plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-169.84077554976).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisForDataset(0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(5.0E-4);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeDomainMarker(10, (Marker) valueMarker0, layer0, true);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot1.configureDomainAxes();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot1.zoomRangeAxes((double) 1.0F, 1359.014837061858, plotRenderingInfo0, (Point2D) null);
      combinedRangeXYPlot1.setRangeMinorGridlinePaint(xYLineAndShapeRenderer0.DEFAULT_VALUE_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, (-1.0));
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      combinedRangeXYPlot1.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.mapDatasetToDomainAxis(2, 4);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.getDomainAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-4026.027), "V}//v\"");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      XYDifferenceRenderer xYDifferenceRenderer1 = new XYDifferenceRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.setBaseItemLabelsVisible(true, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(5);
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(10.0, 0.0, xYDifferenceRenderer1.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot1.removeRangeMarker((-2456), (Marker) intervalMarker0, layer0);
      combinedDomainXYPlot1.setDomainAxisLocation(axisLocation1, false);
      Paint paint0 = combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.setDomainTickBandPaint(paint0);
      combinedDomainXYPlot0.getRangeAxis(2);
      Layer layer1 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getDomainMarkers((-538), layer1);
      combinedRangeXYPlot0.getRangeMinorGridlineStroke();
      combinedDomainXYPlot1.removeDomainMarker((-538), (Marker) intervalMarker0, layer0);
      combinedDomainXYPlot1.setDomainAxisLocation(3, axisLocation1);
      combinedDomainXYPlot0.getDomainAxisEdge(3);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Stack<ExtendedCategoryAxis> stack0 = new Stack<ExtendedCategoryAxis>();
      combinedDomainXYPlot0.drawRangeGridlines((Graphics2D) null, (Rectangle2D) null, stack0);
      combinedDomainXYPlot0.getDataset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      combinedDomainXYPlot0.isRangeCrosshairVisible();
      combinedDomainXYPlot0.getRangeMarkers((-662), layer0);
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, (Rectangle2D) null, stack0);
      float[] floatArray0 = new float[0];
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, combinedDomainXYPlot0, false);
      jFreeChart0.removeLegend();
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      Layer layer1 = Layer.FOREGROUND;
      combinedRangeXYPlot0.setAxisOffset(combinedDomainXYPlot0.DEFAULT_INSETS);
      combinedRangeXYPlot0.setRangeGridlinePaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.setWeight((-662));
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot0.configureRangeAxes();
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(false);
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker(1313, (Marker) intervalMarker0, layer1);
      JFreeChart jFreeChart0 = new JFreeChart("Zx>Cwv6Qi*GjJL}[(&", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.0F, 10, "Zx>Cwv6Qi*GjJL}[(&");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis1);
      combinedDomainXYPlot0.setDomainCrosshairValue((-1652.647884091822));
      combinedDomainXYPlot0.mapDatasetToRangeAxis(274, 10);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+a{");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("+a{");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null, false);
      logarithmicAxis0.setLabelURL("U`Y");
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) logarithmicAxis0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " r");
      combinedRangeXYPlot0.setRangeCrosshairValue(0.05, false);
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      combinedRangeXYPlot0.getQuadrantOrigin();
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setLabelPaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.getRangeAxisIndex(logAxis0);
      combinedRangeXYPlot0.getDomainAxisEdge((-2142));
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1139.781834574782), "The index value (");
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 2, 2, 2, 1006, 2, 182, false, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.indexOf((XYDataset) null);
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, true);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Stack<ExtendedCategoryAxis> stack0 = new Stack<ExtendedCategoryAxis>();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "`YJ,g/");
      Locale locale0 = Locale.KOREA;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      combinedRangeXYPlot0.indexOf(timeTableXYDataset0);
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, xYDifferenceRenderer0.DEFAULT_OUTLINE_STROKE, xYDifferenceRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
      combinedDomainXYPlot0.getRendererForDataset(timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      AxisLocation.getOpposite(axisLocation0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      SystemColor systemColor0 = SystemColor.controlShadow;
      combinedRangeXYPlot0.getLegendItems();
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("J(0l_$n>", 1132.7937688044, 10);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0, true);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(10, 500, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 500
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, (-4144.0662129), "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(0, valueAxis0, false);
      Vector<CyclicXYItemRenderer> vector0 = new Vector<CyclicXYItemRenderer>();
      combinedRangeXYPlot0.setRangeCrosshairValue((-1772.7041432));
      combinedDomainXYPlot0.setRenderer(57, (XYItemRenderer) null, true);
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(true);
      combinedRangeXYPlot0.getDatasetRenderingOrder();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      xYPlot0.setRangeMinorGridlineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      chartRenderingInfo1.clone();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo1);
      xYPlot0.panDomainAxes(0.0F, plotRenderingInfo1, (Point2D) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(358);
      combinedRangeXYPlot0.setRangeAxisLocation(358, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, (ValueAxis) null, numberAxis3D0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.removeDomainMarker(500, (Marker) valueMarker0, layer0, true);
      combinedRangeXYPlot0.configureDomainAxes();
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      xYPlot0.setRangeGridlinesVisible(true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(true);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "", "");
      xYDifferenceRenderer0.setBaseURLGenerator((XYURLGenerator) standardXYURLGenerator0);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(2944);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot();
      thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location((-1), 2932);
      combinedRangeXYPlot1.zoomRangeAxes((double) 0, plotRenderingInfo0, (Point2D) point0, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setRangeAxisLocation((-1643), (AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DateAxis dateAxis0 = new DateAxis("S,Zf4ve?+-b");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeAxis(2932, (ValueAxis) numberAxis3D0, false);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      AxisLocation.getOpposite(axisLocation0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      SystemColor systemColor0 = SystemColor.controlShadow;
      combinedRangeXYPlot0.getLegendItems();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = null;
      valueAxisArray0[1] = null;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(332, 2);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.zoomRangeAxes(0.0, plotRenderingInfo0, (Point2D) point0, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((-1892), (AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getFixedRangeAxisSpace();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.getRangeAxisLocation();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      combinedRangeXYPlot0.getLegendItems();
      xYPlot0.getQuadrantOrigin();
      xYPlot0.getDomainAxisCount();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3406.0), 0.1, "G$UhG");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      xYDifferenceRenderer0.setBaseURLGenerator((XYURLGenerator) customXYURLGenerator0);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(5);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot();
      thermometerPlot1.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location((-3321), 6);
      combinedRangeXYPlot0.zoomRangeAxes((-4166.4322), plotRenderingInfo0, (Point2D) point0, false);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(10, 1335);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.zoomRangeAxes((double) 1, plotRenderingInfo0, (Point2D) point0, false);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((-905), (AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairValue(0.0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(491.9330610327);
      candlestickRenderer0.getVolumePaint();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      JFreeChart jFreeChart1 = new JFreeChart("A@8", candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, false);
      RenderingHints renderingHints0 = jFreeChart1.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-3751));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-3751) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-2798.51));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.getPlotType();
      combinedDomainXYPlot0.getDomainAxisCount();
      IntervalMarker intervalMarker0 = new IntervalMarker(50000.0, 50000.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker(500, (Marker) intervalMarker0, layer0);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Boolean boolean0 = new Boolean(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getPlotInfo();
      JFreeChart jFreeChart0 = new JFreeChart("Combined_Domain_XYPlot", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      jFreeChart0.getRenderingHints();
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1139.781834574782), (-1139.781834574782), "The index value (");
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      LogAxis logAxis0 = new LogAxis("&tC5+t@_C?@YGRj%4j/");
      MeterPlot meterPlot0 = new MeterPlot();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      NumberFormat numberFormat0 = meterPlot0.getTickLabelFormat();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1139.351796, numberFormat0, 66);
      cyclicNumberAxis0.setTickUnit(numberTickUnit0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.setAxisOffset(logAxis0.DEFAULT_AXIS_LABEL_INSETS);
      combinedRangeXYPlot0.setRangeGridlinePaint(logAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.isRangeCrosshairLockedOnData();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1139.781834574782), "V}//v\"");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      xYDifferenceRenderer0.setBaseURLGenerator((XYURLGenerator) customXYURLGenerator0);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(1);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) stackedXYAreaRenderer0;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location((-1157), 2000);
      combinedRangeXYPlot0.zoomRangeAxes(0.0, plotRenderingInfo0, (Point2D) point0, true);
      combinedRangeXYPlot0.setRenderer(xYItemRendererArray0[3]);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeRangeMarker(10, (Marker) categoryMarker0, layer1);
      combinedRangeXYPlot0.getRangeAxisIndex(cyclicNumberAxis0);
      cyclicNumberAxis0.addChangeListener(combinedRangeXYPlot0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      xYItemRendererArray0[0] = (XYItemRenderer) clusteredXYBarRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(755, 10);
      bufferedImage0.createGraphics();
      GeneralPath generalPath0 = null;
      try {
        generalPath0 = new GeneralPath(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // winding rule must be WIND_EVEN_ODD or WIND_NON_ZERO
         //
         verifyException("java.awt.geom.Path2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.xy.XYSplineRenderer");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(true, xYLineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker(500, (Marker) categoryMarker0, layer0, true);
      xYPlot0.getDataRange((ValueAxis) null);
      ValueMarker valueMarker0 = new ValueMarker(438.3579127425713);
      xYPlot0.setRangeMinorGridlineStroke(xYLineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      StandardEntityCollection standardEntityCollection1 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection1);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1.0F;
      doubleArray1[1] = (double) 500;
      doubleArray1[2] = (double) 1.0F;
      doubleArray1[3] = 0.05;
      doubleArray1[4] = 0.05;
      doubleArray1[5] = (double) 1.0F;
      doubleArray1[6] = 0.05;
      doubleArray1[7] = (double) 1.0F;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 10;
      doubleArray2[1] = (double) 1.0F;
      doubleArray2[2] = (double) 2.0F;
      doubleArray2[3] = 0.05;
      doubleArray2[4] = (-1660.9);
      doubleArray2[5] = (double) 500;
      doubleArray2[6] = (double) 10;
      doubleArray2[7] = (double) xYLineAndShapeRenderer0.ZERO;
      doubleArray2[8] = (double) xYLineAndShapeRenderer0.ZERO;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-1660.9);
      doubleArray3[1] = (double) 1.0F;
      doubleArray3[2] = (-1908.5566230676);
      doubleArray3[3] = (double) 10;
      doubleArray3[4] = (double) 0.0F;
      doubleArray3[5] = (-1660.9);
      doubleArray3[6] = 438.3579127425713;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) 1.0F;
      doubleArray5[1] = (double) 0.0F;
      doubleArray5[2] = (double) xYLineAndShapeRenderer0.ZERO;
      doubleArray5[3] = 1.0E-8;
      doubleArray5[4] = (double) 500;
      doubleArray5[5] = 0.05;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 2.0F;
      doubleArray6[1] = (double) 10;
      doubleArray6[2] = (double) 10;
      doubleArray6[3] = (double) 1.0F;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 438.3579127425713;
      doubleArray7[1] = (double) 1.0F;
      doubleArray7[2] = 2091.31;
      doubleArray7[3] = (double) 1.0F;
      doubleArray7[4] = (double) 500;
      doubleArray7[5] = (-1908.5566230676);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 4737, chartRenderingInfo1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      BasicTreeUI.NodeDimensionsHandler basicTreeUI_NodeDimensionsHandler0 = basicTreeUI0.new NodeDimensionsHandler();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      ImageTitle imageTitle0 = new ImageTitle(bufferedImage0, rectangleEdge0, horizontalAlignment0, verticalAlignment0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(0.05, 1.0, imageTitle0, rectangleAnchor0);
      JTree jTree0 = new JTree(doubleArray0);
      TreePath treePath0 = new TreePath((Object[]) doubleArray0);
      jTree0.getPathBounds(treePath0);
      basicTreeUI_NodeDimensionsHandler0.getNodeDimensions(xYTitleAnnotation0, 20, 1, true, (Rectangle) null);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("J|q2J*VnCrT");
      xYPlot0.getFixedDomainAxisSpace();
      // Undeclared exception!
      try { 
        subCategoryAxis0.reserveSpace(graphics2D0, multiplePiePlot0, (Rectangle2D) null, rectangleEdge0, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) stackedXYAreaRenderer0;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(1);
      xYItemRendererArray0[2] = (XYItemRenderer) xYSplineRenderer0;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.clearRangeMarkers(5);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.getRangeMarkers((Layer) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 1.0F, true);
      combinedRangeXYPlot1.getDomainMarkers(layer0);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot1.DEFAULT_LEGEND_ITEM_CIRCLE, combinedRangeXYPlot1.DEFAULT_CROSSHAIR_STROKE, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT, combinedRangeXYPlot1.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot1.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      int int0 = 1;
      int int1 = (-593);
      // Undeclared exception!
      try { 
        candlestickRenderer0.setLegendTextFont((-593), cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-4026.027), "V}//v\"");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      XYDifferenceRenderer xYDifferenceRenderer1 = new XYDifferenceRenderer();
      xYDifferenceRenderer1.setBaseURLGenerator((XYURLGenerator) customXYURLGenerator0);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(1600);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot1.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location((-1892), 0);
      combinedRangeXYPlot0.zoomRangeAxes((double) 0.0F, plotRenderingInfo0, (Point2D) point0, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation(0, (AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot2.setRangeAxisLocation(axisLocation0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      combinedDomainXYPlot0.setDomainAxis(332, (ValueAxis) null);
      Stack<ExtendedCategoryAxis> stack0 = new Stack<ExtendedCategoryAxis>();
      combinedDomainXYPlot0.drawRangeGridlines((Graphics2D) null, (Rectangle2D) null, stack0);
      combinedDomainXYPlot0.getDataset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      combinedDomainXYPlot0.isRangeCrosshairVisible();
      combinedDomainXYPlot0.getRangeMarkers((-662), layer0);
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, (Rectangle2D) null, stack0);
      float[] floatArray0 = new float[0];
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, combinedDomainXYPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      combinedDomainXYPlot0.clearAnnotations();
      AffineTransform affineTransform0 = new AffineTransform((-2.0F), 1.0F, 0.0F, 3244.3F, (-1060.86F), 8.0F);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 10
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1139.781834574782), "The index value (");
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      LogAxis logAxis0 = new LogAxis("5Bo*yR6:&=I~S");
      cyclicNumberAxis0.setTickUnit(cyclicNumberAxis0.DEFAULT_TICK_UNIT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1);
      combinedRangeXYPlot0.setAxisOffset(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS);
      combinedRangeXYPlot0.setRangeGridlinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedRangeXYPlot0.getRangeAxis(76);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      TimeZone timeZone0 = TimeZone.getTimeZone("Indices must be Integer instances.");
      DateAxis dateAxis0 = new DateAxis("D ,3<=J(:", timeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomRangeAxes(0.05, (PlotRenderingInfo) null, (Point2D) point0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-172.67031), ".SQYvM~?8==#p:WK=p");
      Object object0 = xYPlot0.clone();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LogAxis logAxis0 = new LogAxis(".SQYvM~?8==#p:WK=p");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      logAxis0.resizeRange2(0.0, 0.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisLocation(10);
      combinedDomainXYPlot0.getFixedLegendItems();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.setDomainGridlineStroke(((XYPlot) object0).DEFAULT_GRIDLINE_STROKE);
      combinedDomainXYPlot1.setDomainZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(xYErrorRenderer0, true);
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.DATASET_UPDATED;
      combinedDomainXYPlot1.setRenderer(8, (XYItemRenderer) xYErrorRenderer0);
      RendererChangeEvent rendererChangeEvent1 = new RendererChangeEvent(chartChangeEventType0, false);
      rendererChangeEvent1.setType(chartChangeEventType0);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent1);
      combinedDomainXYPlot1.setRenderer(910, (XYItemRenderer) xYErrorRenderer0, false);
      combinedDomainXYPlot1.setRangeMinorGridlinesVisible(false);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-2798.51));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.getPlotType();
      combinedDomainXYPlot0.getDomainAxisCount();
      IntervalMarker intervalMarker0 = new IntervalMarker(50000.0, 50000.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker(500, (Marker) intervalMarker0, layer0);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Boolean boolean0 = new Boolean(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getPlotInfo();
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-3597);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      combinedDomainXYPlot1.setDataset((XYDataset) timeSeriesCollection0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(10, 1.0E-8);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Stack<AxisState> stack0 = new Stack<AxisState>();
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, (List) null);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getRendererForDataset(timeSeriesCollection0);
      combinedDomainXYPlot2.getRangeAxisEdge((-1392));
      combinedDomainXYPlot1.clearSelection();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1139.781834574782), "The index value (");
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      LogAxis logAxis0 = new LogAxis("5Bo*yR6:&=I~S");
      cyclicNumberAxis0.setTickUnit(cyclicNumberAxis0.DEFAULT_TICK_UNIT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      cyclicNumberAxis0.resizeRange2(1.0F, 715.1718830578972);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.setAxisOffset(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS);
      combinedRangeXYPlot0.setRangeGridlinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(2);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[8];
      xYItemRendererArray0[0] = (XYItemRenderer) xYSplineRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) xYSplineRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) stackedXYAreaRenderer0;
      xYItemRendererArray0[4] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[5] = (XYItemRenderer) xYSplineRenderer0;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("H3lS|LwA*Vv!");
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("H3lS|LwA*Vv!", choiceFormat0, choiceFormat0, choiceFormat0);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(standardXYZToolTipGenerator0, timeSeriesURLGenerator0);
      xYItemRendererArray0[6] = (XYItemRenderer) xYAreaRenderer2_0;
      xYItemRendererArray0[7] = (XYItemRenderer) xYDifferenceRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYItemRendererArray0[7], jDBCXYDataset0);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1139.781834574782), "V}//v\"");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
      combinedRangeXYPlot0.clearRangeMarkers();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.removeDomainMarker(500, (Marker) valueMarker0, layer0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-32);
      byte byte0 = (byte)48;
      byteArray0[2] = (byte)48;
      byte byte1 = (byte) (-12);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      Vector<XYAreaRenderer> vector0 = new Vector<XYAreaRenderer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes((byte) (-12), vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1139.781834574782), "V}//v\"");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      xYDifferenceRenderer0.setBaseURLGenerator((XYURLGenerator) customXYURLGenerator0);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(1);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location((-1157), 2000);
      combinedRangeXYPlot0.zoomRangeAxes(0.0, plotRenderingInfo0, (Point2D) point0, true);
      ArrayList<DefaultPieDataset> arrayList0 = new ArrayList<DefaultPieDataset>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes((-2803), arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertNotNull(defaultPolarItemRenderer0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(xYLineAndShapeRenderer0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, (ValueAxis) null, numberAxis3D0, xYLineAndShapeRenderer0);
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = xYPlot0.removeDomainMarker(500, (Marker) valueMarker0, layer0, true);
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(boolean0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedRangeXYPlot0.configureDomainAxes();
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      boolean boolean1 = combinedRangeXYPlot0.isRangeGridlinesVisible();
      assertFalse(boolean1 == boolean0);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(boolean1);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      xYPlot0.setRangeGridlinesVisible(true);
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      xYPlot0.setRangeCrosshairStroke(combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1139.781834574782), "V}//v\"");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.clearRangeMarkers();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairValue(0.0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(491.9330610327);
      candlestickRenderer0.getVolumePaint();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (6) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) stackedXYAreaRenderer0;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(1);
      xYItemRendererArray0[2] = (XYItemRenderer) xYSplineRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setDomainMinorGridlineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      combinedRangeXYPlot1.setDomainCrosshairValue((double) 500, true);
      combinedRangeXYPlot0.getDomainMarkers((Layer) null);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot1.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setLegendTextPaint(10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      Paint paint0 = candlestickRenderer0.getVolumePaint();
      combinedRangeXYPlot0.setQuadrantPaint(2, paint0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      combinedRangeXYPlot0.getDomainMarkers((-418), layer0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      xYItemRendererArray0[0] = (XYItemRenderer) candlestickRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) candlestickRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) candlestickRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) candlestickRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "labelOutlineVisible");
      defaultWindDataset0.validateObject();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      FileSystemHandling.shouldAllThrowIOExceptions();
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      xYPlot0.removeDomainMarker((Marker) null);
      Point2D point2D0 = xYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2107, (-3064.39), 678.71412, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      xYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
      chartRenderingInfo0.clone();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.panDomainAxes(43, plotRenderingInfo1, point2D0);
      xYPlot0.zoomDomainAxes((-829.09), plotRenderingInfo1, point2D0, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainTickBandPaint();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ZOOM_IN_DOMAIN");
      combinedDomainXYPlot0.setRangeAxis(1024, (ValueAxis) numberAxis3D0, true);
      xYPlot0.setRangeCrosshairValue((double) 768, false);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      String string0 = combinedDomainXYPlot0.getPlotType();
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", string0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(string0);
      
      int int0 = combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, int0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(75.0, 1.0F, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(75.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainXYPlot0.addRangeMarker(3, (Marker) intervalMarker0, layer0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(75.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYShapeAnnotation0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      StandardEntityCollection standardEntityCollection1 = new StandardEntityCollection();
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertNotNull(standardEntityCollection1);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection1);
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotSame(standardEntityCollection1, standardEntityCollection0);
      assertNotNull(plotRenderingInfo0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot1);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      combinedDomainXYPlot0.setDataset((XYDataset) timeSeriesCollection0);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(0.0, 0.05);
      assertEquals(0.05, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertNotNull(affineTransform0);
      
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      assertEquals(0.05, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertTrue(fontRenderContext0.isTransformed());
      assertTrue(fontRenderContext0.isAntiAliased());
      assertNotNull(fontRenderContext0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Stack<AxisState> stack0 = new Stack<AxisState>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ArrayList<XYPlot> arrayList0 = new ArrayList<XYPlot>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      combinedDomainXYPlot1.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, arrayList0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot2);
      
      XYItemRenderer xYItemRenderer0 = combinedDomainXYPlot1.getRendererForDataset(timeSeriesCollection0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot2));
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot2);
      assertNull(xYItemRenderer0);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot1.getRangeAxisEdge(10);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot2));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot2);
      assertNotNull(rectangleEdge0);
      
      combinedDomainXYPlot2.clearSelection();
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      
      int int1 = combinedDomainXYPlot2.getRangeAxisIndex(cyclicNumberAxis0);
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(int1 == int0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertEquals((-1), int1);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot2));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot2);
      assertNotNull(axisLocation0);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      LegendTitle legendTitle0 = new LegendTitle(minMaxCategoryRenderer0, borderArrangement0, borderArrangement0);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertTrue(legendTitle0.getNotify());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(legendTitle0.visible);
      assertNotNull(legendTitle0);
      
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicAnchor();
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertTrue(legendTitle0.getNotify());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(legendTitle0.visible);
      assertNotNull(rectangleAnchor0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)RectangleAnchor.coordinates(rectangle2D_Float0, rectangleAnchor0);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertTrue(legendTitle0.getNotify());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(legendTitle0.visible);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(point2D_Double0);
      
      combinedDomainXYPlot1.zoomDomainAxes((-534.28728363), plotRenderingInfo0, (Point2D) point2D_Double0, false);
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot2));
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertTrue(legendTitle0.getNotify());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertTrue(legendTitle0.isVisible());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(legendTitle0.visible);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(standardEntityCollection1, standardEntityCollection0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot2);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertNotNull(xYLineAndShapeRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      xYPlot0.setRangeMinorGridlineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertNotNull(chartRenderingInfo1);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Object object0 = chartRenderingInfo1.clone();
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertTrue(object0.equals((Object)chartRenderingInfo0));
      assertTrue(object0.equals((Object)chartRenderingInfo1));
      assertNotSame(chartRenderingInfo1, object0);
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotSame(object0, chartRenderingInfo1);
      assertNotSame(object0, chartRenderingInfo0);
      assertNotNull(object0);
      
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo1);
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertTrue(chartRenderingInfo1.equals((Object)object0));
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertNotNull(plotRenderingInfo1);
      
      xYPlot0.panDomainAxes(0.0F, plotRenderingInfo1, (Point2D) null);
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertTrue(chartRenderingInfo1.equals((Object)object0));
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(chartRenderingInfo1, object0);
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      
      xYPlot0.zoomDomainAxes((-1002.959806567), plotRenderingInfo0, (Point2D) null, false);
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertTrue(chartRenderingInfo1.equals((Object)object0));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(chartRenderingInfo1, object0);
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, ".SQYvM~?8==#p:WK=p");
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.equals((Object)xYPlot0));
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainZoomable());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(xYPlot1, xYPlot0);
      assertNotNull(xYPlot1);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[4] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[5] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[6] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[7] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[8] = (ValueAxis) cyclicNumberAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(9, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(9, valueAxisArray0.length);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(xYPlot0, xYPlot1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(10);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getFixedLegendItems();
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(legendItemCollection0);
      
      combinedDomainXYPlot0.setDomainGridlineStroke(xYPlot1.DEFAULT_GRIDLINE_STROKE);
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(9, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainZoomable());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(xYPlot1, xYPlot0);
      
      combinedRangeXYPlot0.setNoDataMessage(".SQYvM~?8==#p:WK=p");
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(".SQYvM~?8==#p:WK=p", combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(".SQYvM~?8==#p:WK=p", combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isBold());
      assertNotNull(font0);
      
      JFreeChart jFreeChart0 = new JFreeChart(".SQYvM~?8==#p:WK=p", font0, xYPlot1, true);
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(9, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainZoomable());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isBold());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      jFreeChart0.removeLegend();
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(9, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainZoomable());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isBold());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(xYPlot1, xYPlot0);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(9, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainZoomable());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isBold());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(xYPlot1, xYPlot0);
      assertNotNull(renderingHints0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      RenderingHints renderingHints1 = jFreeChart0.getRenderingHints();
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(9, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainZoomable());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isBold());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, renderingHints1.size());
      assertFalse(renderingHints1.isEmpty());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(xYPlot1, xYPlot0);
      assertSame(renderingHints1, renderingHints0);
      assertNotNull(renderingHints1);
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints1);
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(9, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainZoomable());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isBold());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, renderingHints1.size());
      assertFalse(renderingHints1.isEmpty());
      assertEquals(1, rescaleOp0.getNumFactors());
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(rescaleOp0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      assertEquals("DatasetRenderingOrder.FORWARD", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedRangeXYPlot1.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals("DatasetRenderingOrder.FORWARD", datasetRenderingOrder0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.xy.XYSplineRenderer");
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(numberAxis3D0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, true);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(xYLineAndShapeRenderer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true, xYLineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      xYPlot0.addDomainMarker(500, (Marker) categoryMarker0, layer0, true);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Range range0 = xYPlot0.getDataRange((ValueAxis) null);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(range0);
      
      ValueMarker valueMarker0 = new ValueMarker(438.3579127425713);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(438.3579127425713, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      
      xYPlot0.setRangeMinorGridlineStroke(xYLineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      StandardEntityCollection standardEntityCollection1 = new StandardEntityCollection();
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertNotNull(standardEntityCollection1);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection1);
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertNotNull(chartRenderingInfo1);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      xYPlot0.panDomainAxes(10, plotRenderingInfo0, (Point2D) null);
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(cyclicNumberAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.setDomainMinorGridlineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot1.setDomainCrosshairValue((double) 500, true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(500.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      Collection collection1 = combinedRangeXYPlot0.getDomainMarkers((Layer) null);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNull(collection1);
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot1.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(500.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYShapeAnnotation0);
      
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(500.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNotNull(candlestickRenderer0);
      
      candlestickRenderer0.setLegendTextPaint(10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      Color color0 = (Color)candlestickRenderer0.getVolumePaint();
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setQuadrantPaint(2, color0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      int int0 = combinedRangeXYPlot1.getWeight();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(500.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1, int0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      Collection collection2 = combinedRangeXYPlot0.getDomainMarkers((-418), layer0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNull(collection2);
      
      combinedRangeXYPlot0.clearRangeMarkers(1);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      XYPlot xYPlot0 = new XYPlot();
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(xYPlot0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals("", numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(numberAxis3D0);
      
      Range range0 = xYPlot0.getDataRange(numberAxis3D0);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals("", numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNull(range0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("ShHjQ+0}^Lk", (Range) null);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals("ShHjQ+0}^Lk", moduloAxis0.getLabel());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(moduloAxis0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertNotNull(candlestickRenderer0);
      
      XYPlot xYPlot1 = null;
      try {
        xYPlot1 = new XYPlot(defaultTableXYDataset0, moduloAxis0, numberAxis3D0, candlestickRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(basicStroke0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, (-4144.0662129), "");
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-4144.0662129), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainAxis(0, (ValueAxis) numberAxis0, false);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Vector<CyclicXYItemRenderer> vector0 = new Vector<CyclicXYItemRenderer>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Stack<CyclicXYItemRenderer> stack0 = new Stack<CyclicXYItemRenderer>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        vector0.addAll(814, (Collection<? extends CyclicXYItemRenderer>) stack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 814
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(cyclicNumberAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(collection0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.setDomainMinorGridlineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot1.setDomainCrosshairValue((double) 500, true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(500.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      Collection collection1 = combinedRangeXYPlot0.getDomainMarkers((Layer) null);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNull(collection1);
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(xYShapeAnnotation0);
      
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1234.261760867));
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals((-1234.261760867), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertNotNull(candlestickRenderer0);
      
      Color color0 = (Color)candlestickRenderer0.getVolumePaint();
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals((-1234.261760867), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setQuadrantPaint(2, color0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals((-1234.261760867), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      int int0 = combinedRangeXYPlot1.getWeight();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(500.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, int0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "%'?@,VnLEn8e8$B@+h";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("%'?@,VnLEn8e8$B@+h");
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("%'?@,VnLEn8e8$B@+h", numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(numberAxis3D0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("%'?@,VnLEn8e8$B@+h", numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainGridlinesVisible(true);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("%'?@,VnLEn8e8$B@+h", numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1878.172), 2, 3836.9388, 0.0F);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotNull(xYBoxAnnotation0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, true);
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertFalse(boolean0);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      numberAxis0.setLeftArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(3836.9388, 10.0);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(10.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(3836.9388, affineTransform0.getTranslateX(), 0.01);
      assertNotNull(affineTransform0);
      
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(10.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(3836.9388, affineTransform0.getTranslateX(), 0.01);
      assertFalse(fontRenderContext0.isAntiAliased());
      assertTrue(fontRenderContext0.isTransformed());
      assertNotNull(fontRenderContext0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)numberAxis0.DEFAULT_AXIS_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(10.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(3836.9388, affineTransform0.getTranslateX(), 0.01);
      assertFalse(fontRenderContext0.isAntiAliased());
      assertTrue(fontRenderContext0.isTransformed());
      assertEquals((-4.1806640625), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(32.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-11.21484375), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(16.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2.853515625, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(32.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.214844F), rectangle2D_Float0.y, 0.01F);
      assertEquals(14.068359F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Stack<AxisState> stack0 = new Stack<AxisState>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, stack0);
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(10.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(3836.9388, affineTransform0.getTranslateX(), 0.01);
      assertFalse(fontRenderContext0.isAntiAliased());
      assertTrue(fontRenderContext0.isTransformed());
      assertEquals((-4.1806640625), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(32.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-11.21484375), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(16.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2.853515625, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(32.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.214844F), rectangle2D_Float0.y, 0.01F);
      assertEquals(14.068359F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      
      XYItemRenderer xYItemRenderer0 = combinedDomainXYPlot0.getRendererForDataset(jDBCXYDataset0);
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(xYItemRenderer0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(1, axisLocation0, true);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.setDomainAxisLocation(1, axisLocation0, false);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, rectangle2D_Float0, stack0);
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(10.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(3836.9388, affineTransform0.getTranslateX(), 0.01);
      assertFalse(fontRenderContext0.isAntiAliased());
      assertTrue(fontRenderContext0.isTransformed());
      assertEquals((-4.1806640625), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(32.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-11.21484375), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(16.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2.853515625, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(32.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.214844F), rectangle2D_Float0.y, 0.01F);
      assertEquals(14.068359F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      
      BasicStroke basicStroke1 = (BasicStroke)combinedDomainXYPlot0.getRangeCrosshairStroke();
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke1.getEndCap());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "labelOutlineVisible");
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      defaultWindDataset0.validateObject();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.05, false);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertNotNull(clusteredXYBarRenderer0);
      
      cyclicNumberAxis0.setUpperBound((double) clusteredXYBarRenderer0.ZERO);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(43, (XYToolTipGenerator) null, true);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(xYPlot0);
      
      boolean boolean2 = xYPlot0.removeDomainMarker((Marker) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(boolean2);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)xYPlot0.getQuadrantOrigin();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      defaultWindDataset0.removeChangeListener(xYPlot0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(chartPanel0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1024, 43, 10, chartRenderingInfo0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1024, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1024, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(43, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(43, bufferedImage0.getTileHeight());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1024, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1024, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(43, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(43, bufferedImage0.getTileHeight());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(graphics2D0);
      
      String string0 = chartPanel0.getUIClassID();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals("PanelUI", string0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(string0);
      
      LinkedList<SystemColor> linkedList0 = new LinkedList<SystemColor>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      xYPlot0.drawDomainGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("labelOutlineVisible", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, linkedList0.size());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.05, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1024, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1024, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(43, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(43, bufferedImage0.getTileHeight());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertNotNull(xYLineAndShapeRenderer0);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainCrosshairValue(0.0, false);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers((Layer) null);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(491.9330610327);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(491.9330610327, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertNotNull(candlestickRenderer0);
      
      Color color0 = (Color)candlestickRenderer0.getVolumePaint();
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(491.9330610327, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setDomainCrosshairPaint(logAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(renderingHints0);
      
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(colorConvertOp0);
      
      BufferedImage bufferedImage0 = null;
      ComponentColorModel componentColorModel0 = null;
      try {
        componentColorModel0 = new ComponentColorModel((ColorSpace) null, true, true, 500, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown data type 10
         //
         verifyException("java.awt.image.DataBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-2798.51));
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      String string0 = combinedDomainXYPlot0.getPlotType();
      assertEquals((-2798.51), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", string0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(string0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, false);
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertNotNull(xYLineAndShapeRenderer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainCrosshairValue((-0.37760305376160946), true);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals((-0.37760305376160946), combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1751.8749938852);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(1751.8749938852, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNotNull(candlestickRenderer0);
      
      Color color0 = (Color)candlestickRenderer0.getVolumePaint();
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(1751.8749938852, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals((-0.37760305376160946), combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot1);
      
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals((-0.37760305376160946), combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals((-0.37760305376160946), combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(renderingHints0);
      
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals((-0.37760305376160946), combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(colorConvertOp0);
      
      XYPlot xYPlot0 = new XYPlot();
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      
      AxisSpace axisSpace0 = xYPlot0.getFixedRangeAxisSpace();
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(axisSpace0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertNotNull(defaultPolarItemRenderer0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(xYLineAndShapeRenderer0);
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(500, (Marker) valueMarker0, layer0, true);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(boolean0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.configureDomainAxes();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean1 = combinedRangeXYPlot0.isRangeGridlinesVisible();
      assertFalse(boolean1 == boolean0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(boolean1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, numberAxis3D0, (ValueAxis) null, xYLineAndShapeRenderer0);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(3, axisLocation0, true);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(numberAxis3D0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertNotNull(xYLineAndShapeRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(xYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = xYPlot0.removeDomainMarker(500, (Marker) valueMarker0, layer0, false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(boolean0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      xYPlot0.setRangeCrosshairValue((-2742.366888389532));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals((-2742.366888389532), xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearDomainMarkers();
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
      
      Graphics2D graphics2D0 = null;
      Stack<ExtendedCategoryAxis> stack0 = new Stack<ExtendedCategoryAxis>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      combinedDomainXYPlot0.drawRangeGridlines((Graphics2D) null, (Rectangle2D) null, stack0);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      XYDataset xYDataset0 = combinedDomainXYPlot0.getDataset();
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(xYDataset0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = combinedDomainXYPlot0.isRangeCrosshairVisible();
      assertTrue(boolean1 == boolean0);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(boolean1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Collection collection1 = combinedDomainXYPlot0.getRangeMarkers((-662), layer0);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection1);
      
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, (Rectangle2D) null, stack0);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      float[] floatArray0 = new float[0];
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isBold());
      assertNotNull(font0);
      
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, combinedDomainXYPlot0, false);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isBold());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isBold());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(renderingHints0);
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      assertEquals(0, rescaleOp0.getNumFactors());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isPlain());
      assertEquals(1, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isBold());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(rescaleOp0);
      
      AffineTransform affineTransform0 = new AffineTransform((-2.0F), 1.0F, 0.0F, 3244.3F, (-1060.86F), 8.0F);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals((-2.0), affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getShearY(), 0.01);
      assertEquals(8.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(3244.300048828125, affineTransform0.getScaleY(), 0.01);
      assertEquals((-6488.60009765625), affineTransform0.getDeterminant(), 0.01);
      assertEquals((-1060.8599853515625), affineTransform0.getTranslateX(), 0.01);
      assertNotNull(affineTransform0);
      
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 10
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertNotNull(defaultPolarItemRenderer0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(numberAxis3D0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYLineAndShapeRenderer0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker((-1.0));
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1.0), valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = xYPlot0.removeDomainMarker((-459), (Marker) valueMarker0, layer0, true);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1.0), valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(boolean0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      xYPlot0.setRangeCrosshairValue(0.0);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedRangeXYPlot0.setRangeCrosshairStroke(xYLineAndShapeRenderer0.DEFAULT_STROKE);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis3D0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainGridlinesVisible(false);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      double double0 = 0.0;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(500);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      String string0 = combinedDomainXYPlot0.getPlotType();
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", string0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(string0);
      
      combinedDomainXYPlot0.setRangePannable(false);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      double double0 = 2744.10037;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      int int0 = (-1361);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo((-1361));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      
      int int0 = 801;
      AxisLocation axisLocation0 = null;
      // Undeclared exception!
      try { 
        xYPlot0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      boolean boolean1 = false;
      LogAxis logAxis0 = new LogAxis();
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(logAxis0);
      
      logAxis0.resizeRange2(1.0, 1.0F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isAutoRange());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation((-1197));
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getFixedLegendItems();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(legendItemCollection0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot1);
      
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot2);
      
      combinedDomainXYPlot2.setRangeGridlinePaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot2));
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot2);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0, tableOrder0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(spiderWebPlot0);
      
      Stroke stroke0 = spiderWebPlot0.getSeriesOutlineStroke();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(stroke0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1139.781834574782), "The index value (");
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals("The index value (", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(cyclicNumberAxis0);
      
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals("The index value (", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      
      LogAxis logAxis0 = new LogAxis("5Bo*yR6:&=I~S");
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("5Bo*yR6:&=I~S", logAxis0.getLabel());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(logAxis0);
      
      NumberTickUnit numberTickUnit0 = logAxis0.getTickUnit();
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("5Bo*yR6:&=I~S", logAxis0.getLabel());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(9, numberTickUnit0.getMinorTickCount());
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(numberTickUnit0);
      
      cyclicNumberAxis0.setTickUnit(numberTickUnit0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals("The index value (", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("5Bo*yR6:&=I~S", logAxis0.getLabel());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(9, numberTickUnit0.getMinorTickCount());
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals("The index value (", cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals("The index value (", cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeXYPlot0.setAxisOffset(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals("The index value (", cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedRangeXYPlot0.setRangeGridlinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals("The index value (", cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      combinedRangeXYPlot0.setRenderer(500, (XYItemRenderer) stackedXYAreaRenderer2_0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals("The index value (", cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(501, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertTrue(fastScatterPlot0.isNotify());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertFalse(fastScatterPlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(fastScatterPlot0);
      
      LegendItemCollection legendItemCollection0 = fastScatterPlot0.getLegendItems();
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertTrue(fastScatterPlot0.isNotify());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertFalse(fastScatterPlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(legendItemCollection0);
      
      combinedDomainXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-778.668076514));
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals((-778.668076514), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-778.668076514), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isRangeGridlinesVisible();
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      ArrayList<YIntervalRenderer> arrayList0 = new ArrayList<YIntervalRenderer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Vector<YIntervalRenderer> vector0 = new Vector<YIntervalRenderer>(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(10, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.xy.XYSplineRenderer");
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(numberAxis3D0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(xYLineAndShapeRenderer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      xYPlot0.addDomainMarker(500, (Marker) categoryMarker0, layer0, true);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Range range0 = xYPlot0.getDataRange(numberAxis3D0);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(range0);
      
      ValueMarker valueMarker0 = new ValueMarker(10);
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      
      Color color0 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      ValueMarker valueMarker1 = new ValueMarker(0.05, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, valueMarker1.getAlpha(), 0.01F);
      assertEquals(0.05, valueMarker1.getValue(), 0.01);
      assertNull(valueMarker1.getLabel());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(valueMarker1);
      
      valueMarker1.setOutlinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, valueMarker1.getAlpha(), 0.01F);
      assertEquals(0.05, valueMarker1.getValue(), 0.01);
      assertNull(valueMarker1.getLabel());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(valueMarker1, valueMarker0);
      
      xYPlot0.addDomainMarker((Marker) valueMarker0);
      assertFalse(valueMarker0.equals((Object)valueMarker1));
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(valueMarker0, valueMarker1);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertNull(piePlot3D0.getNoDataMessage());
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(piePlot3D0);
      
      LegendItemCollection legendItemCollection0 = piePlot3D0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertNull(piePlot3D0.getNoDataMessage());
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(legendItemCollection0);
      
      xYPlot0.setFixedLegendItems(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertNull(piePlot3D0.getNoDataMessage());
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(cyclicNumberAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(collection0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(false);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(intervalMarker0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertFalse(layer1.equals((Object)layer0));
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.setAxisOffset(combinedRangeXYPlot0.DEFAULT_INSETS);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      Collection collection1 = combinedRangeXYPlot0.getDomainMarkers((-1790), layer0);
      assertFalse(layer0.equals((Object)layer1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(layer0, layer1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNull(collection1);
      
      combinedRangeXYPlot0.clearRangeAxes();
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeMinorGridlineStroke();
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotNull(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertNotNull(grayPaintScale0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(numberAxis3D0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYLineAndShapeRenderer0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 2.0F, true);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot1);
      
      Collection collection0 = combinedRangeXYPlot1.getDomainMarkers((Layer) null);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNull(collection0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertNotNull(candlestickRenderer0);
      
      Color color0 = (Color)candlestickRenderer0.getVolumePaint();
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(10.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertNotNull(color0);
      
      Color color1 = (Color)combinedRangeXYPlot0.getDomainGridlinePaint();
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(color1.equals((Object)color0));
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(255, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals((-1), color1.getRGB());
      assertEquals(255, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getBlue());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      combinedRangeXYPlot0.setDomainCrosshairPaint(color1);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(color1.equals((Object)color0));
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(255, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals((-1), color1.getRGB());
      assertEquals(255, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getBlue());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(color1, color0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("A``eg.}T>8>x=F");
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals("A``eg.}T>8>x=F", numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertNotNull(numberAxis3D0);
      
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertFalse(defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultXYItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultXYItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getBaseShapesFilled());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertNotNull(defaultXYItemRenderer0);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(logAxis0);
      
      logAxis0.resizeRange2(0.0, 437.538357459225);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(500);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getFixedLegendItems();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(legendItemCollection0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot1);
      
      combinedDomainXYPlot1.setDomainGridlineStroke(defaultXYItemRenderer0.DEFAULT_STROKE);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertFalse(defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultXYItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultXYItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getBaseShapesFilled());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertNotNull(xYErrorRenderer0);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(combinedDomainXYPlot1, false);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(rendererChangeEvent0);
      
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.DATASET_UPDATED;
      assertEquals("ChartChangeEventType.DATASET_UPDATED", chartChangeEventType0.toString());
      assertNotNull(chartChangeEventType0);
      
      JFreeChart jFreeChart0 = new JFreeChart("tLjS\"h\"@o'A~=:[", combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      rendererChangeEvent0.setChart(jFreeChart0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      rendererChangeEvent0.setType(chartChangeEventType0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals("ChartChangeEventType.DATASET_UPDATED", chartChangeEventType0.toString());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      combinedDomainXYPlot1.rendererChanged(rendererChangeEvent0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setRenderer(2172, (XYItemRenderer) defaultXYItemRenderer0, true);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertFalse(defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultXYItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultXYItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getBaseShapesFilled());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(2173, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      
      Paint paint0 = combinedDomainXYPlot1.getRangeTickBandPaint();
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(false);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(intervalMarker0.getLabel());
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(intervalMarker0);
      
      Layer layer1 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertSame(layer1, layer0);
      assertNotNull(layer1);
      
      combinedRangeXYPlot0.addDomainMarker(1313, (Marker) intervalMarker0, layer1);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(intervalMarker0.getLabel());
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(layer1, layer0);
      
      JFreeChart jFreeChart0 = new JFreeChart("Zx>Cwv6Qi*GjJL}[(&", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)jFreeChart0.getXYPlot();
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertNotNull(ellipse2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)ellipse2D_Float0.getBounds2D();
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.0F, 10, "Zx>Cwv6Qi*GjJL}[(&");
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("Zx>Cwv6Qi*GjJL}[(&", cyclicNumberAxis1.getLabel());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(10.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis1.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(cyclicNumberAxis1);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis1);
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("Zx>Cwv6Qi*GjJL}[(&", cyclicNumberAxis1.getLabel());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(10.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis1.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainCrosshairValue((-1652.647884091822));
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("Zx>Cwv6Qi*GjJL}[(&", cyclicNumberAxis1.getLabel());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(10.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis1.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals((-1652.647884091822), combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(cyclicNumberAxis1, cyclicNumberAxis0);
      
      combinedDomainXYPlot0.drawZeroRangeBaseline((Graphics2D) null, rectangle2D_Float0);
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("Zx>Cwv6Qi*GjJL}[(&", cyclicNumberAxis1.getLabel());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(10.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis1.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals((-1652.647884091822), combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(cyclicNumberAxis1, cyclicNumberAxis0);
      
      combinedRangeXYPlot0.drawRangeMarkers((Graphics2D) null, rectangle2D_Float0, 10, layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertSame(layer0, layer1);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 500 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(collection0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-106);
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)45;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(45, byteArray0);
      assertEquals(45, byteLookupTable0.getOffset());
      assertEquals(1, byteLookupTable0.getNumComponents());
      assertArrayEquals(new byte[] {(byte) (-106), (byte)45}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteLookupTable0);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(renderingHints0);
      
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(45, byteLookupTable0.getOffset());
      assertEquals(1, byteLookupTable0.getNumComponents());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertArrayEquals(new byte[] {(byte) (-106), (byte)45}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(lookupOp0);
      
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(1.0, (double) (byte)45, (double) 45, (double) 1.0F);
      assertEquals(0.022216737285146886, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.022216737285146886, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.9999999999999998, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.9997531778316099, affineTransform0.getShearY(), 0.01);
      assertEquals(45.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals((-0.9997531778316099), affineTransform0.getShearX(), 0.01);
      assertEquals((-44.01110973970759), affineTransform0.getTranslateY(), 0.01);
      assertNotNull(affineTransform0);
      
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: -1
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(false);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, int0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(intervalMarker0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Layer layer1 = Layer.FOREGROUND;
      assertFalse(layer1.equals((Object)layer0));
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.setAxisOffset(combinedRangeXYPlot0.DEFAULT_INSETS);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      Collection collection1 = combinedRangeXYPlot0.getDomainMarkers((-1790), layer0);
      assertFalse(layer0.equals((Object)layer1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(layer0, layer1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNull(collection1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      
      List list0 = combinedRangeXYPlot0.getAnnotations();
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(list0);
      
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) null);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(basicStroke0);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(basicStroke0);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      DateAxis dateAxis0 = new DateAxis("@2}8K0tS");
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals("@2}8K0tS", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals("@2}8K0tS", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultPolarItemRenderer0.getBaseOutlineStroke();
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertNotSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      combinedDomainXYPlot0.setDomainCrosshairStroke(basicStroke1);
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals("@2}8K0tS", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(basicStroke1, basicStroke0);
      
      DateAxis dateAxis1 = new DateAxis("@2}8K0tS");
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis1.isInverted());
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertTrue(dateAxis1.isAutoRange());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertNull(dateAxis1.getLabelURL());
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis1.getLabelToolTip());
      assertTrue(dateAxis1.isVisible());
      assertEquals("@2}8K0tS", dateAxis1.getLabel());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(dateAxis1);
      
      Date date0 = dateAxis1.calculateLowestVisibleTickValue(dateAxis0.DEFAULT_DATE_TICK_UNIT);
      assertTrue(dateAxis0.equals((Object)dateAxis1));
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals("@2}8K0tS", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis1.isInverted());
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertTrue(dateAxis1.isAutoRange());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertNull(dateAxis1.getLabelURL());
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis1.getLabelToolTip());
      assertTrue(dateAxis1.isVisible());
      assertEquals("@2}8K0tS", dateAxis1.getLabel());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertEquals("Fri Jan 02 00:00:00 GMT 1970", date0.toString());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotSame(dateAxis0, dateAxis1);
      assertNotSame(dateAxis1, dateAxis0);
      assertNotNull(date0);
      
      dateAxis0.setRange(date0, dateAxis1.DEFAULT_ANCHOR_DATE);
      assertFalse(dateAxis0.equals((Object)dateAxis1));
      assertFalse(dateAxis1.equals((Object)dateAxis0));
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals("@2}8K0tS", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.39240928132E12, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(8.64E7, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis1.isInverted());
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis1.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertFalse(dateAxis1.isVerticalTickLabels());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertTrue(dateAxis1.isAutoRange());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertNull(dateAxis1.getLabelURL());
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01);
      assertEquals(0, dateAxis1.getMinorTickCount());
      assertTrue(dateAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01);
      assertFalse(dateAxis1.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis1.getLabelToolTip());
      assertTrue(dateAxis1.isVisible());
      assertEquals("@2}8K0tS", dateAxis1.getLabel());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01);
      assertEquals("Fri Jan 02 00:00:00 GMT 1970", date0.toString());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotSame(dateAxis0, dateAxis1);
      assertNotSame(dateAxis1, dateAxis0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertFalse(dateAxis0.equals((Object)dateAxis1));
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals("@2}8K0tS", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.39240928132E12, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(8.64E7, dateAxis0.getLowerBound(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(dateAxis0, dateAxis1);
      assertNotNull(axisLocation0);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertNotNull(ellipse2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)ellipse2D_Float0.getBounds2D();
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      combinedDomainXYPlot0.drawZeroRangeBaseline((Graphics2D) null, rectangle2D_Float0);
      assertFalse(dateAxis0.equals((Object)dateAxis1));
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals("@2}8K0tS", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.39240928132E12, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(8.64E7, dateAxis0.getLowerBound(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotSame(dateAxis0, dateAxis1);
      
      BasicStroke basicStroke2 = (BasicStroke)combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      assertFalse(basicStroke2.equals((Object)basicStroke1));
      assertFalse(basicStroke2.equals((Object)basicStroke0));
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, basicStroke2.getLineJoin());
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke2.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke2.getEndCap());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(basicStroke2, basicStroke1);
      assertNotSame(basicStroke2, basicStroke0);
      assertNotNull(basicStroke2);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(cyclicNumberAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(collection0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(false);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0, int0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(intervalMarker0);
      
      Layer layer1 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertSame(layer1, layer0);
      assertNotNull(layer1);
      
      combinedRangeXYPlot0.addDomainMarker(1313, (Marker) intervalMarker0, layer1);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertSame(layer1, layer0);
      
      JFreeChart jFreeChart0 = new JFreeChart("Zx>Cwv6Qi*Gj#}4(&", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)jFreeChart0.getXYPlot();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      
      Range range0 = combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNull(range0);
      
      ValueMarker valueMarker0 = new ValueMarker(1313);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1313.0, valueMarker0.getValue(), 0.01);
      assertNotNull(valueMarker0);
      
      Color color0 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      valueMarker0.setOutlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1313.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1313.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      boolean boolean0 = combinedRangeXYPlot1.removeRangeMarker(10, (Marker) intervalMarker0, layer0, false);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(boolean0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(layer0, layer1);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-172.67031), ".SQYvM~?8==#p:WK=p");
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(cyclicNumberAxis0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, true);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYDifferenceRenderer0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      JFreeChart jFreeChart0 = new JFreeChart(".SQYvM~?8==#p:WK=p", xYDifferenceRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, true);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertNotNull(chartPanel0);
      
      ChartRenderingInfo chartRenderingInfo1 = chartPanel0.getChartRenderingInfo();
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotNull(chartRenderingInfo1);
      
      Object object0 = chartRenderingInfo1.clone();
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertTrue(object0.equals((Object)chartRenderingInfo1));
      assertTrue(object0.equals((Object)chartRenderingInfo0));
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotSame(chartRenderingInfo1, object0);
      assertNotSame(object0, chartRenderingInfo1);
      assertNotSame(object0, chartRenderingInfo0);
      assertNotNull(object0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      assertTrue(chartRenderingInfo0.equals((Object)chartRenderingInfo1));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      combinedDomainXYPlot0.panDomainAxes(10, plotRenderingInfo0, (Point2D) null);
      assertTrue(chartRenderingInfo0.equals((Object)object0));
      assertTrue(chartRenderingInfo0.equals((Object)chartRenderingInfo1));
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(chartRenderingInfo0, object0);
      assertNotSame(chartRenderingInfo0, chartRenderingInfo1);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes(2.5E-6, plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.axis.AxisLocation");
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(collection0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(true);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, int0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      IntervalMarker intervalMarker0 = new IntervalMarker((-1582.5467155), 1.0, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-1582.5467155), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(intervalMarker0);
      
      Layer layer1 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertSame(layer1, layer0);
      assertNotNull(layer1);
      
      combinedRangeXYPlot0.addDomainMarker(13, (Marker) intervalMarker0, layer1);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-1582.5467155), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertSame(layer1, layer0);
      
      JFreeChart jFreeChart0 = new JFreeChart("Null 'order' argument.", periodAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, true);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)jFreeChart0.getXYPlot();
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      
      Range range0 = combinedRangeXYPlot1.getDataRange(periodAxis0);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNull(range0);
      
      ValueMarker valueMarker0 = new ValueMarker((-1483.694128));
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1483.694128), valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      
      Color color0 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      valueMarker0.setOutlinePaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1483.694128), valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-1582.5467155), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.setRangeMinorGridlineStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      combinedRangeXYPlot1.panDomainAxes((-1587.906158139474), plotRenderingInfo0, (Point2D) null);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("org.jfree.chart.axis.AxisLocation", periodAxis0.getLabel());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-172.67031), ".SQYvM~?8==#p:WK=p");
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(cyclicNumberAxis0);
      
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.equals((Object)xYPlot0));
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getWeight());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot1.getNoDataMessage());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot1.canSelectByPoint());
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainPannable());
      assertFalse(xYPlot1.isRangePannable());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot1.canSelectByRegion());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertFalse(xYPlot1.isSubplot());
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isOutlineVisible());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRendererCount());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(xYPlot1, xYPlot0);
      assertNotNull(xYPlot1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 1.0F, true);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers((Layer) null);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(collection0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2.0F);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertNotNull(candlestickRenderer0);
      
      Color color0 = (Color)candlestickRenderer0.getVolumePaint();
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertNotNull(color0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint((-593), xYPlot1.DEFAULT_GRIDLINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-593) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(basicStroke0);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      DateAxis dateAxis0 = new DateAxis("@2}8K0tS");
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("@2}8K0tS", dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("@2}8K0tS", dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(defaultPolarItemRenderer0);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultPolarItemRenderer0.getBaseOutlineStroke();
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertNotSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("@2}8K0tS", dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot1);
      
      combinedDomainXYPlot1.setDomainAxisLocation(axisLocation1, false);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("@2}8K0tS", dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainTickBandPaint(defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("@2}8K0tS", dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot2);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot2.getRangeAxis(910);
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertNull(valueAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot3.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot3.equals((Object)combinedDomainXYPlot2));
      assertFalse(combinedDomainXYPlot3.equals((Object)combinedDomainXYPlot1));
      assertEquals(1, combinedDomainXYPlot3.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot3.isRangeZoomable());
      assertTrue(combinedDomainXYPlot3.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot3.getRendererCount());
      assertTrue(combinedDomainXYPlot3.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot3.getWeight());
      assertEquals(0.0, combinedDomainXYPlot3.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot3.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot3.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot3.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot3.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot3.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot3.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot3.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot3.isOutlineVisible());
      assertFalse(combinedDomainXYPlot3.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot3.isSubplot());
      assertTrue(combinedDomainXYPlot3.isNotify());
      assertTrue(combinedDomainXYPlot3.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot3.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot3.getNoDataMessage());
      assertFalse(combinedDomainXYPlot3.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot3.canSelectByPoint());
      assertTrue(combinedDomainXYPlot3.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot3.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot3.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot3.isRangePannable());
      assertFalse(combinedDomainXYPlot3.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot3.getDatasetCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot3);
      
      BasicStroke basicStroke2 = (BasicStroke)combinedDomainXYPlot2.getDomainCrosshairStroke();
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot3));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertFalse(basicStroke2.equals((Object)basicStroke1));
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertEquals(2, basicStroke2.getLineJoin());
      assertEquals(0, basicStroke2.getEndCap());
      assertEquals(0.0F, basicStroke2.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke2.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke2.getMiterLimit(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot3);
      assertNotSame(basicStroke2, basicStroke1);
      assertSame(basicStroke2, basicStroke0);
      assertNotNull(basicStroke2);
      
      Stroke stroke0 = defaultPolarItemRenderer0.getSeriesOutlineStroke(500);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertNull(stroke0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot3.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(cyclicNumberAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(false);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0, int0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(intervalMarker0);
      
      Layer layer1 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertSame(layer1, layer0);
      assertNotNull(layer1);
      
      combinedRangeXYPlot0.addDomainMarker(1313, (Marker) intervalMarker0, layer1);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(layer1, layer0);
      
      JFreeChart jFreeChart0 = new JFreeChart("Zx>Cwv6Qi*Gj#}4(&", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)jFreeChart0.getXYPlot();
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertNotNull(ellipse2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)ellipse2D_Float0.getBounds2D();
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.0F, 10, "Zx>Cwv6Qi*Gj#}4(&");
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertEquals("Zx>Cwv6Qi*Gj#}4(&", cyclicNumberAxis1.getLabel());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(cyclicNumberAxis1);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis1);
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(1.05, cyclicNumberAxis1.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertEquals("Zx>Cwv6Qi*Gj#}4(&", cyclicNumberAxis1.getLabel());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainCrosshairValue((-1652.647884091822));
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(1.05, cyclicNumberAxis1.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertEquals("Zx>Cwv6Qi*Gj#}4(&", cyclicNumberAxis1.getLabel());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals((-1652.647884091822), combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(cyclicNumberAxis1, cyclicNumberAxis0);
      
      combinedDomainXYPlot0.drawZeroRangeBaseline((Graphics2D) null, rectangle2D_Float0);
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(1.05, cyclicNumberAxis1.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertEquals("Zx>Cwv6Qi*Gj#}4(&", cyclicNumberAxis1.getLabel());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals((-1652.647884091822), combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotSame(cyclicNumberAxis1, cyclicNumberAxis0);
      
      combinedRangeXYPlot0.drawRangeMarkers((Graphics2D) null, rectangle2D_Float0, 0, layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertSame(layer0, layer1);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setForegroundAlpha((-395.8F));
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedDomainXYPlot0.setBackgroundAlpha(1451.9F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(datasetRenderingOrder0);
      
      ValueMarker valueMarker0 = new ValueMarker(0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(valueMarker0);
      
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(xYShapeRenderer0);
      
      PaintScale paintScale0 = xYShapeRenderer0.getPaintScale();
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertNotNull(paintScale0);
      
      valueMarker0.setStroke(xYShapeRenderer0.DEFAULT_STROKE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("I4a>L", fixedMillisecond0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(periodAxis0);
      
      Date date0 = fixedMillisecond0.getTime();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, periodAxis0);
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(paintScaleLegend0.visible);
      assertNotNull(paintScaleLegend0);
      
      paintScaleLegend0.setMargin(periodAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(5.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(paintScaleLegend0.visible);
      
      RectangleInsets rectangleInsets0 = paintScaleLegend0.getPadding();
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(5.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(paintScaleLegend0.visible);
      assertNotNull(rectangleInsets0);
      
      valueMarker0.setLabelOffset(rectangleInsets0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(5.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(paintScaleLegend0.visible);
      
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      LogAxis logAxis0 = new LogAxis("");
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(logAxis0);
      
      combinedDomainXYPlot0.setDomainPannable(true);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Range range0 = combinedDomainXYPlot0.getDataRange(logAxis0);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(range0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(timePeriodValuesCollection0, periodAxis0, logAxis0, xYShapeRenderer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(dateAxis0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.05);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeXYPlot0.addDomainMarker(500, (Marker) intervalMarker0, layer0, true);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(collection0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(500, (Marker) intervalMarker0, layer0, false);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedRangeXYPlot0.addDomainMarker(500, (Marker) intervalMarker0, layer0, true);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setForegroundAlpha((-395.8F));
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.setBackgroundAlpha(1451.9F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(datasetRenderingOrder0);
      
      ValueMarker valueMarker0 = new ValueMarker(0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(valueMarker0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("I4a>L", fixedMillisecond0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(periodAxis0);
      
      Date date0 = fixedMillisecond0.getTime();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      LogAxis logAxis0 = new LogAxis("");
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      
      combinedDomainXYPlot0.setDomainPannable(true);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Range range0 = combinedDomainXYPlot0.getDataRange(logAxis0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNull(range0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainXYPlot0.addRangeMarker(220, (Marker) valueMarker0, layer0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      logAxis0.resizeRange2(10, 500);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals((-4500.0), logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals((-4490.0), logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(1022);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getFixedLegendItems();
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(legendItemCollection0);
      
      combinedDomainXYPlot0.setDomainGridlineStroke(logAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals((-4500.0), logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals((-4490.0), logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals((-4500.0), logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals((-4490.0), logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(xYErrorRenderer0);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(xYErrorRenderer0, false);
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertNotNull(rendererChangeEvent0);
      
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.DATASET_UPDATED;
      assertEquals("ChartChangeEventType.DATASET_UPDATED", chartChangeEventType0.toString());
      assertNotNull(chartChangeEventType0);
      
      rendererChangeEvent0.setType(chartChangeEventType0);
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals("ChartChangeEventType.DATASET_UPDATED", chartChangeEventType0.toString());
      
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      int int0 = combinedDomainXYPlot0.getDomainAxisIndex(logAxis0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals((-4500.0), logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals((-4490.0), logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1), int0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.xy.XYSplineRenderer");
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(numberAxis3D0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(xYLineAndShapeRenderer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Layer layer1 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertSame(layer1, layer0);
      assertNotNull(layer1);
      
      combinedDomainXYPlot0.addDomainMarker(500, (Marker) categoryMarker0, layer1, false);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(layer1, layer0);
      
      LogAxis logAxis0 = new LogAxis("org.jfree.chart.renderer.xy.XYSplineRenderer");
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", logAxis0.getLabel());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      
      Range range0 = combinedDomainXYPlot0.getDataRange(logAxis0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", logAxis0.getLabel());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNull(range0);
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      xYPlot0.setRangeMinorGridlineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      StandardEntityCollection standardEntityCollection1 = new StandardEntityCollection();
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertNotNull(standardEntityCollection1);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getRangeCrosshairStroke();
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      
      BasicStroke basicStroke1 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertNotSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      Path2D.Float path2D_Float0 = (Path2D.Float)basicStroke1.createStrokedShape(xYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(1, path2D_Float0.getWindingRule());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(basicStroke1, basicStroke0);
      assertNotNull(path2D_Float0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.setDomainCrosshairValue(0.0, true);
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot2);
      
      Collection collection0 = combinedRangeXYPlot2.getDomainMarkers((Layer) null);
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      assertNull(collection0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertNotNull(candlestickRenderer0);
      
      Color color0 = (Color)candlestickRenderer0.getVolumePaint();
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertNotNull(color0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setQuadrantPaint(10, combinedRangeXYPlot2.DEFAULT_GRIDLINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1139.781834574782), "V}//v\"");
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("V}//v\"", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("V}//v\"", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("V}//v\"", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("V}//v\"", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeXYPlot0.setAxisOffset(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("V}//v\"", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers((-44), layer0);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("V}//v\"", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      LegendItemCollection legendItemCollection0 = combinedRangeXYPlot0.getLegendItems();
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(legendItemCollection0);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer();
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(xYItemRenderer0);
      
      ColorModel colorModel0 = null;
      int[] intArray0 = new int[4];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"<c*FO91RtKvd^`");
      assertFalse(boolean0);
      
      intArray0[0] = 10;
      intArray0[1] = 1878;
      intArray0[2] = 10;
      intArray0[3] = 10;
      int int0 = 848;
      Point point0 = new Point(1878, 848);
      assertEquals(1878.0, point0.getX(), 0.01);
      assertEquals(848.0, point0.getY(), 0.01);
      assertEquals(1878, point0.x);
      assertEquals(848, point0.y);
      assertNotNull(point0);
      
      // Undeclared exception!
      try { 
        Raster.createBandedRaster((-393), 10, (-393), 10, intArray0, intArray0, point0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported data type -393
         //
         verifyException("java.awt.image.Raster", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.xy.XYSplineRenderer");
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertNotNull(xYLineAndShapeRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertNotNull(valueMarker0);
      
      xYLineAndShapeRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = xYPlot0.removeDomainMarker(500, (Marker) valueMarker0, layer0, false);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(5.0E-9, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals((-5.0E-9), numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(boolean0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)xYPlot0.getDomainCrosshairPaint();
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(5.0E-9, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals((-5.0E-9), numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(false);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0, int0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer1 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertSame(layer1, layer0);
      assertNotNull(layer1);
      
      combinedRangeXYPlot0.addDomainMarker(1313, (Marker) intervalMarker0, layer1);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertSame(layer1, layer0);
      
      JFreeChart jFreeChart0 = new JFreeChart("Zx>Cwv6Qi*Gj#}4(&", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)jFreeChart0.getXYPlot();
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(samplingXYLineRenderer0);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(samplingXYLineRenderer0, true);
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertNotNull(rendererChangeEvent0);
      
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.DATASET_UPDATED;
      assertEquals("ChartChangeEventType.DATASET_UPDATED", chartChangeEventType0.toString());
      assertNotNull(chartChangeEventType0);
      
      rendererChangeEvent0.setType(chartChangeEventType0);
      assertEquals("ChartChangeEventType.DATASET_UPDATED", chartChangeEventType0.toString());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(rendererChangeEvent0.getSeriesVisibilityChanged());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) samplingXYLineRenderer0, false);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      
      Path2D.Float path2D_Float0 = (Path2D.Float)basicStroke0.createStrokedShape(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1, path2D_Float0.getWindingRule());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(path2D_Float0);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(basicStroke0);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setDomainCrosshairValue(0.0, false);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers((Layer) null);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2698.723);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2698.723, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertNotNull(candlestickRenderer0);
      
      Color color0 = (Color)candlestickRenderer0.getVolumePaint();
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2698.723, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setQuadrantPaint(0, color0);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2698.723, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      BasicStroke basicStroke1 = (BasicStroke)combinedRangeXYPlot0.getDomainGridlineStroke();
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0, basicStroke1.getEndCap());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertSame(basicStroke1, basicStroke0);
      assertNotNull(basicStroke1);
      
      Color color1 = (Color)combinedRangeXYPlot0.getDomainMinorGridlinePaint();
      assertFalse(color1.equals((Object)color0));
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals((-1), color1.getRGB());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getGreen());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(color1, color0);
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 1313;
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertTrue(categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      assertTrue(categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainCategoryPlot0);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation(0);
      assertTrue(categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, true);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-68.44734813707), 0.0, "");
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-68.44734813707), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-68.44734813707), cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(cyclicNumberAxis0);
      
      combinedRangeXYPlot0.setDomainAxis(1313, (ValueAxis) cyclicNumberAxis0, true);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1314, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-68.44734813707), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      Vector<CyclicXYItemRenderer> vector0 = new Vector<CyclicXYItemRenderer>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Stack<CyclicXYItemRenderer> stack0 = new Stack<CyclicXYItemRenderer>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        vector0.addAll(552, (Collection<? extends CyclicXYItemRenderer>) stack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 552
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(valueAxis0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(1);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedRangeAxisSpace();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(axisSpace0);
      
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(datasetRenderingOrder0);
      
      combinedDomainXYPlot0.clearSelection();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      AxisLocation axisLocation1 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeZeroBaselineVisible();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      StandardEntityCollection standardEntityCollection1 = new StandardEntityCollection();
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertNotNull(standardEntityCollection1);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection1);
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      AxisLocation axisLocation2 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertFalse(axisLocation2.equals((Object)axisLocation0));
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation2, axisLocation0);
      assertSame(axisLocation2, axisLocation1);
      assertNotNull(axisLocation2);
      
      combinedDomainXYPlot0.setRangeAxisLocation(7904, axisLocation1, false);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(500, axisLocation0, false);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation0.equals((Object)axisLocation2));
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation0, axisLocation2);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1878.172), 2, 3836.9388, 0.0F);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertNotNull(xYBoxAnnotation0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, true);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertFalse(boolean0);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(3836.9388, 10.0);
      assertEquals(10.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(3836.9388, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertNotNull(affineTransform0);
      
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      assertEquals(10.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(3836.9388, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertFalse(fontRenderContext0.isAntiAliased());
      assertTrue(fontRenderContext0.isTransformed());
      assertNotNull(fontRenderContext0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)numberAxis0.DEFAULT_AXIS_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(10.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(3836.9388, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertFalse(fontRenderContext0.isAntiAliased());
      assertTrue(fontRenderContext0.isTransformed());
      assertEquals(2.853515625, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(16.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(32.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-11.21484375), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-4.1806640625), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals((-11.214844F), rectangle2D_Float0.y, 0.01F);
      assertEquals(32.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(14.068359F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Stack<AxisState> stack0 = new Stack<AxisState>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, stack0);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(10.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(3836.9388, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertFalse(fontRenderContext0.isAntiAliased());
      assertTrue(fontRenderContext0.isTransformed());
      assertEquals(2.853515625, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(16.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(32.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-11.21484375), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-4.1806640625), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals((-11.214844F), rectangle2D_Float0.y, 0.01F);
      assertEquals(32.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(14.068359F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      
      XYItemRenderer xYItemRenderer0 = combinedDomainXYPlot0.getRendererForDataset(jDBCXYDataset0);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(xYItemRenderer0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(1, axisLocation0, true);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.setDomainAxisLocation(1, axisLocation0, false);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(thermometerPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNotNull(categoryMarker0);
      
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo1 = (PlotRenderingInfo)plotRenderingInfo0.clone();
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertNotNull(plotRenderingInfo1);
      
      combinedDomainXYPlot0.handleClick((-1092), 3, plotRenderingInfo0);
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean1 = combinedDomainXYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(boolean1);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 6 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(basicStroke0);
      
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1878.172), 2, 3836.9388, 0.0F);
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNotNull(xYBoxAnnotation0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, true);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertNull(xYBoxAnnotation0.getURL());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertFalse(boolean0);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(Double.NaN, (-708.5501641511418));
      assertEquals((-708.5501641511418), affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform0.getTranslateX(), 0.01);
      assertNotNull(affineTransform0);
      
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      assertEquals((-708.5501641511418), affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform0.getTranslateX(), 0.01);
      assertTrue(fontRenderContext0.isTransformed());
      assertTrue(fontRenderContext0.isAntiAliased());
      assertNotNull(fontRenderContext0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)numberAxis0.DEFAULT_TICK_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals((-708.5501641511418), affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform0.getTranslateX(), 0.01);
      assertTrue(fontRenderContext0.isTransformed());
      assertTrue(fontRenderContext0.isAntiAliased());
      assertEquals(16.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-4.1806640625), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(32.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-11.21484375), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(2.853515625, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(14.068359F, rectangle2D_Float0.height, 0.01F);
      assertEquals(32.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.214844F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Stack<AxisState> stack0 = new Stack<AxisState>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, stack0);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals((-708.5501641511418), affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(Double.NaN, affineTransform0.getTranslateX(), 0.01);
      assertTrue(fontRenderContext0.isTransformed());
      assertTrue(fontRenderContext0.isAntiAliased());
      assertEquals(16.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-4.1806640625), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(32.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-11.21484375), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(2.853515625, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(14.068359F, rectangle2D_Float0.height, 0.01F);
      assertEquals(32.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.214844F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot1);
      
      XYItemRenderer xYItemRenderer0 = combinedDomainXYPlot1.getRendererForDataset(jDBCXYDataset0);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNull(xYItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      
      boolean boolean0 = combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(basicStroke0);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      SystemColor systemColor0 = SystemColor.controlShadow;
      assertEquals(128, systemColor0.getGreen());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(128, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertNotNull(systemColor0);
      
      combinedRangeXYPlot0.setDomainCrosshairValue(0.0, true);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)combinedRangeXYPlot0.getDomainCrosshairPaint();
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(255, color0.getAlpha());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) null);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = new BasicStroke();
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(basicStroke0);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      defaultPolarItemRenderer0.setBaseItemLabelsVisible(false, false);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(6);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, false);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      
      combinedDomainXYPlot0.setDomainTickBandPaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis(10);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(valueAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot1);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot1.getDomainCrosshairStroke();
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setDomainCrosshairStroke(combinedDomainXYPlot1.DEFAULT_CROSSHAIR_STROKE);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      AxisLocation axisLocation2 = combinedDomainXYPlot1.getRangeAxisLocation();
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(axisLocation2.equals((Object)axisLocation0));
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertSame(axisLocation2, axisLocation1);
      assertNotSame(axisLocation2, axisLocation0);
      assertNotNull(axisLocation2);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(defaultPolarItemRenderer0);
      
      Color color0 = (Color)defaultPolarItemRenderer0.getItemOutlinePaint(10, 10, true);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertNotNull(color0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0E8, 10);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals((-1.99999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      cyclicNumberAxis0.setAutoRangeStickyZero(false);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals((-1.99999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals((-1.99999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeCrosshairStroke();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(basicStroke0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedRangeXYPlot0.setDomainCrosshairValue(103.18303677804, false);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(103.18303677804, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      boolean boolean0 = combinedRangeXYPlot0.equals((Object) null);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(103.18303677804, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(boolean0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      
      List list0 = combinedRangeXYPlot0.getAnnotations();
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(list0);
      
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) null);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(basicStroke0);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.setDomainCrosshairValue(0.0, false);
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot1.setRangeZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-172.67031), ".SQYvM~?8==#p:WK=p");
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertNotNull(defaultPolarItemRenderer0);
      
      defaultPolarItemRenderer0.setBaseItemLabelsVisible(false, true);
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, false);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation1);
      
      combinedDomainXYPlot0.setDomainTickBandPaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis(358);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(valueAxis0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setDomainCrosshairStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot1);
      
      AxisLocation axisLocation2 = combinedDomainXYPlot1.getRangeAxisLocation();
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(axisLocation2, axisLocation1);
      assertSame(axisLocation2, axisLocation0);
      assertNotNull(axisLocation2);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertNotNull(defaultPolarItemRenderer0);
      
      Color color0 = (Color)defaultPolarItemRenderer0.getItemOutlinePaint(10, 10, true);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertNotNull(color0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotNull(combinedDomainXYPlot1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = combinedDomainXYPlot0.isRangePannable();
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(boolean1 == boolean0);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(boolean1);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.63762172525, 10.0);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.63762172525, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(10.63762172525, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.63762172525, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(10.63762172525, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.63762172525, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals((-9.63762172525), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(10.63762172525, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.63762172525, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals((-9.63762172525), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(10.63762172525, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      combinedDomainXYPlot0.handleClick((-1092), 31, plotRenderingInfo0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean1 = combinedDomainXYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(boolean1);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 500 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(defaultPolarItemRenderer0);
      
      Color color0 = (Color)defaultPolarItemRenderer0.getItemOutlinePaint(10, 10, true);
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      
      defaultPolarItemRenderer0.setBaseItemLabelsVisible(false, true);
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      
      ICC_ColorSpace iCC_ColorSpace0 = (ICC_ColorSpace)color0.getColorSpace();
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(3, iCC_ColorSpace0.getNumComponents());
      assertEquals(5, iCC_ColorSpace0.getType());
      assertTrue(iCC_ColorSpace0.isCS_sRGB());
      assertNotNull(iCC_ColorSpace0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, true);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation1);
      
      combinedDomainXYPlot0.setDomainTickBandPaint(color0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis(0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(valueAxis0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setDomainCrosshairStroke(valueAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisLocation axisLocation2 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation2, axisLocation1);
      assertSame(axisLocation2, axisLocation0);
      assertNotNull(axisLocation2);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertNotNull(ellipse2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)ellipse2D_Float0.getBounds2D();
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      combinedDomainXYPlot0.drawZeroRangeBaseline((Graphics2D) null, rectangle2D_Float0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset((-593));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -593 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(dateAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      dateAxis0.setAxisLineStroke(combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertNull(symbolAxis0.getLabelToolTip());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertNull(symbolAxis0.getLabelURL());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertTrue(symbolAxis0.isVisible());
      assertEquals("", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isInverted());
      assertEquals(6, stringArray0.length);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(symbolAxis0);
      
      dateAxis0.setAutoTickUnitSelection(true, true);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      symbolAxis0.resizeRange2(500, (-724.174840768642));
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertNull(symbolAxis0.getLabelToolTip());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertNull(symbolAxis0.getLabelURL());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(361863.24554355233, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(361363.24554355233, symbolAxis0.getLowerBound(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.isAutoRange());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertTrue(symbolAxis0.isVisible());
      assertEquals("", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isInverted());
      assertEquals(6, stringArray0.length);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      
      symbolAxis0.setLabelPaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertNull(symbolAxis0.getLabelToolTip());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertNull(symbolAxis0.getLabelURL());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(361863.24554355233, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(361363.24554355233, symbolAxis0.getLowerBound(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.isAutoRange());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertTrue(symbolAxis0.isVisible());
      assertEquals("", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isInverted());
      assertEquals(6, stringArray0.length);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      
      int int0 = combinedRangeXYPlot0.getRangeAxisIndex(dateAxis0);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0, int0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo((-404));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertNotNull(xYShapeRenderer0);
      
      LookupPaintScale lookupPaintScale0 = (LookupPaintScale)xYShapeRenderer0.getPaintScale();
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      ValueMarker valueMarker0 = new ValueMarker(10, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, basicStroke0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(valueMarker0);
      
      valueMarker0.setStroke(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("I4a>L", fixedMillisecond0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(periodAxis0);
      
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getTime();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, periodAxis0);
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(paintScaleLegend0.visible);
      assertNotNull(paintScaleLegend0);
      
      paintScaleLegend0.setMargin(periodAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(4.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(4.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(paintScaleLegend0.visible);
      
      RectangleInsets rectangleInsets0 = paintScaleLegend0.getPadding();
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(4.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(4.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(paintScaleLegend0.visible);
      assertNotNull(rectangleInsets0);
      
      valueMarker0.setLabelOffset(periodAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(boolean0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      LogAxis logAxis0 = new LogAxis("I4a>L");
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals("I4a>L", logAxis0.getLabel());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(logAxis0);
      
      combinedDomainXYPlot0.setDomainPannable(false);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Range range0 = combinedDomainXYPlot0.getDataRange(logAxis0);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals("I4a>L", logAxis0.getLabel());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNull(range0);
      
      logAxis0.resizeRange2((-1684.3333), 0.0F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals("I4a>L", logAxis0.getLabel());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(1022);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getFixedLegendItems();
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(legendItemCollection0);
      
      combinedDomainXYPlot0.setDomainGridlineStroke(combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertNotNull(xYErrorRenderer0);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(axisLocation0, false);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(rendererChangeEvent0);
      
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.GENERAL;
      assertEquals("ChartChangeEventType.GENERAL", chartChangeEventType0.toString());
      assertNotNull(chartChangeEventType0);
      
      rendererChangeEvent0.setType(chartChangeEventType0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals("ChartChangeEventType.GENERAL", chartChangeEventType0.toString());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals("I4a>L", logAxis0.getLabel());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(combinedDomainXYPlot1);
      
      combinedDomainXYPlot1.rendererChanged(rendererChangeEvent0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals("I4a>L", logAxis0.getLabel());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setRenderer((-1184), (XYItemRenderer) xYErrorRenderer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-172.67031), ".SQYvM~?8==#p:WK=p");
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(cyclicNumberAxis0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.equals((Object)xYPlot0));
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.canSelectByPoint());
      assertNull(xYPlot1.getNoDataMessage());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isDomainPannable());
      assertFalse(xYPlot1.isRangePannable());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertEquals(1, xYPlot1.getRendererCount());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot1.canSelectByRegion());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainZoomable());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot1.isSubplot());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot1.isOutlineVisible());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(xYPlot1, xYPlot0);
      assertNotNull(xYPlot1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = xYPlot1.isRangePannable();
      assertTrue(xYPlot0.equals((Object)xYPlot1));
      assertTrue(xYPlot1.equals((Object)xYPlot0));
      assertFalse(boolean1 == boolean0);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.canSelectByPoint());
      assertNull(xYPlot1.getNoDataMessage());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isDomainPannable());
      assertFalse(xYPlot1.isRangePannable());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertEquals(1, xYPlot1.getRendererCount());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot1.canSelectByRegion());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainZoomable());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot1.isSubplot());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot1.isOutlineVisible());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(boolean1);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(xYPlot1, xYPlot0);
      
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertNotNull(defaultPolarItemRenderer0);
      
      Color color0 = (Color)defaultPolarItemRenderer0.getItemOutlinePaint(10, 10, true);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      
      defaultPolarItemRenderer0.setBaseItemLabelsVisible(false, true);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      
      ICC_ColorSpace iCC_ColorSpace0 = (ICC_ColorSpace)color0.getColorSpace();
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(3, iCC_ColorSpace0.getNumComponents());
      assertEquals(5, iCC_ColorSpace0.getType());
      assertTrue(iCC_ColorSpace0.isCS_sRGB());
      assertNotNull(iCC_ColorSpace0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, true);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation1);
      
      combinedDomainXYPlot0.setDomainTickBandPaint(color0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis(0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(valueAxis0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setDomainCrosshairStroke(valueAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisLocation axisLocation2 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertSame(axisLocation2, axisLocation0);
      assertNotSame(axisLocation2, axisLocation1);
      assertNotNull(axisLocation2);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertNotNull(ellipse2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)ellipse2D_Float0.getBounds2D();
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      combinedDomainXYPlot0.drawZeroRangeBaseline((Graphics2D) null, rectangle2D_Float0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      
      boolean boolean0 = combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(basicStroke0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      SystemColor systemColor0 = SystemColor.controlShadow;
      assertEquals(128, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(128, systemColor0.getRed());
      assertEquals(128, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      combinedRangeXYPlot0.setDomainGridlinePaint(systemColor0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(128, systemColor0.getRed());
      assertEquals(128, systemColor0.getGreen());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(valueAxis0);
      
      int int0 = 1;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(1);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedRangeAxisSpace();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(axisSpace0);
      
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(datasetRenderingOrder0);
      
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedDomainXYPlot0.clearSelection();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(255, color0.getBlue());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisLocation axisLocation1 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeZeroBaselineVisible();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      StandardEntityCollection standardEntityCollection1 = new StandardEntityCollection();
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertNotNull(standardEntityCollection1);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection1);
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertTrue(standardEntityCollection1.equals((Object)standardEntityCollection0));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, standardEntityCollection1.getEntityCount());
      assertNotSame(standardEntityCollection1, standardEntityCollection0);
      assertNotNull(plotRenderingInfo0);
      
      Button button0 = null;
      try {
        button0 = new Button("Null 'marker' not permitted.");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertNotNull(defaultPolarItemRenderer0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.SeriesChangeType");
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(numberAxis3D0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertNotNull(xYLineAndShapeRenderer0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, (ValueAxis) null, numberAxis3D0, xYLineAndShapeRenderer0);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(0.05);
      assertEquals(0.05, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = xYPlot0.removeDomainMarker(500, (Marker) valueMarker0, (Layer) null, true);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.05, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertFalse(boolean0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.configureDomainAxes();
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean1 = combinedRangeXYPlot0.isRangeGridlinesVisible();
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(boolean1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      xYPlot0.setRangeGridlinesVisible(false);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals("org.jfree.data.general.SeriesChangeType", numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.xy.XYSplineRenderer");
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis3D0);
      
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(xYLineAndShapeRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, numberAxis3D0, numberAxis3D0, xYLineAndShapeRenderer0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = xYPlot0.removeDomainMarker(500, (Marker) valueMarker0, layer0, false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("org.jfree.chart.renderer.xy.XYSplineRenderer", numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(boolean0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(basicStroke0);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setDomainCrosshairValue(0.0, false);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(basicStroke0);
      
      LogAxis logAxis0 = new LogAxis("Darshan Shah");
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals("Darshan Shah", logAxis0.getLabel());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxis((-1898), (ValueAxis) logAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      
      String string0 = ".SQYvM~?8==#p:WK=p";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-172.67031), ".SQYvM~?8==#p:WK=p");
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-172.67031), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(".SQYvM~?8==#p:WK=p", cyclicNumberAxis0.getLabel());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(cyclicNumberAxis0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.equals((Object)xYPlot0));
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertNull(xYPlot1.getNoDataMessage());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRendererCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot1.isDomainPannable());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertTrue(xYPlot1.isDomainZoomable());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.isOutlineVisible());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.canSelectByRegion());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot1.getDatasetCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(xYPlot1, xYPlot0);
      assertNotNull(xYPlot1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset((Object[][][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1771.93209220265, 665.8994938661893);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1771.93209220265, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(665.8994938661893, intervalMarker0.getEndValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      combinedRangeXYPlot1.addDomainMarker((Marker) intervalMarker0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1771.93209220265, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(665.8994938661893, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      double double0 = 0.0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      assertTrue(deviationRenderer0.getBaseShapesVisible());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getBaseSeriesVisible());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertTrue(deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getBaseCreateEntities());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesShape());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(deviationRenderer0.getBaseLinesVisible());
      assertFalse(deviationRenderer0.getBaseItemLabelsVisible());
      assertNotNull(deviationRenderer0);
      
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(defaultXYZDataset0, cyclicNumberAxis0, (ValueAxis) null, (XYItemRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxis((-9), (ValueAxis) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, timeZone0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(numberAxis0);
      
      Locale locale0 = new Locale("");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
      assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertNotNull(decimalFormat0);
      
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", decimalFormat0, decimalFormat0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
      assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", standardXYToolTipGenerator0.getFormatString());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertNotNull(standardXYToolTipGenerator0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertNotNull(candlestickRenderer0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) treeSet0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(treeSet0.contains(""));
      assertFalse(list0.contains(""));
      assertNotNull(list0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = Locale.CANADA_FRENCH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("fr", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("CA", locale2.getCountry());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(locale2);
      
      String string0 = locale0.getDisplayVariant(locale2);
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("CA", locale2.getCountry());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(string0);
      
      XYURLGenerator xYURLGenerator0 = candlestickRenderer0.getSeriesURLGenerator(1);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertNull(xYURLGenerator0);
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(500, standardXYToolTipGenerator0, (XYURLGenerator) null);
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(locale0.equals((Object)locale1));
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
      assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", standardXYToolTipGenerator0.getFormatString());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertNotNull(stackedXYAreaRenderer0);
      
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(timeSeriesCollection0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setForegroundAlpha((-395.8F));
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedDomainXYPlot0.setBackgroundAlpha(1451.9F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(datasetRenderingOrder0);
      
      ValueMarker valueMarker0 = new ValueMarker(0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(valueMarker0);
      
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertNotNull(xYShapeRenderer0);
      
      PaintScale paintScale0 = xYShapeRenderer0.getPaintScale();
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertNotNull(paintScale0);
      
      valueMarker0.setStroke(xYShapeRenderer0.DEFAULT_STROKE);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("I4a>L", fixedMillisecond0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      
      Date date0 = fixedMillisecond0.getTime();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, periodAxis0);
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(periodAxis0.isAutoRange());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(paintScaleLegend0.visible);
      assertNotNull(paintScaleLegend0);
      
      paintScaleLegend0.setMargin(periodAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(periodAxis0.isAutoRange());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(5.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(paintScaleLegend0.visible);
      
      RectangleInsets rectangleInsets0 = paintScaleLegend0.getPadding();
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(periodAxis0.isAutoRange());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(5.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(paintScaleLegend0.visible);
      assertNotNull(rectangleInsets0);
      
      valueMarker0.setLabelOffset(rectangleInsets0);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(periodAxis0.isAutoRange());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals("I4a>L", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(5.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(3.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(paintScaleLegend0.visible);
      
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertFalse(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      LogAxis logAxis0 = new LogAxis("");
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      
      combinedDomainXYPlot0.setDomainPannable(true);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Range range0 = combinedDomainXYPlot0.getDataRange(logAxis0);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(range0);
      
      logAxis0.resizeRange2(10, 500);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals((-4490.0), logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals((-4500.0), logAxis0.getLowerBound(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertFalse(logAxis0.isAutoRange());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(1022);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(axisLocation0);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getFixedLegendItems();
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(legendItemCollection0);
      
      combinedDomainXYPlot0.setDomainGridlineStroke(logAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals((-4490.0), logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals((-4500.0), logAxis0.getLowerBound(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertFalse(logAxis0.isAutoRange());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals((-4490.0), logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals((-4500.0), logAxis0.getLowerBound(), 0.01);
      assertEquals("", logAxis0.getLabel());
      assertFalse(logAxis0.isAutoRange());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(xYErrorRenderer0);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(xYErrorRenderer0, false);
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertNotNull(rendererChangeEvent0);
      
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.GENERAL;
      assertEquals("ChartChangeEventType.GENERAL", chartChangeEventType0.toString());
      assertNotNull(chartChangeEventType0);
      
      rendererChangeEvent0.setType(chartChangeEventType0);
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals("ChartChangeEventType.GENERAL", chartChangeEventType0.toString());
      
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedDomainXYPlot0.setRenderer(2944, (XYItemRenderer) xYErrorRenderer0, false);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals((-395.8F), combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1451.9F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2945, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      double double0 = 0.0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      assertTrue(deviationRenderer0.getBaseCreateEntities());
      assertTrue(deviationRenderer0.getBaseLinesVisible());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(deviationRenderer0.getBaseSeriesVisible());
      assertTrue(deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertTrue(deviationRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesShape());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertFalse(deviationRenderer0.getBaseItemLabelsVisible());
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getBaseShapesVisible());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertNotNull(deviationRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, cyclicNumberAxis0, cyclicNumberAxis0, deviationRenderer0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(deviationRenderer0.getBaseCreateEntities());
      assertTrue(deviationRenderer0.getBaseLinesVisible());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(deviationRenderer0.getBaseSeriesVisible());
      assertTrue(deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertTrue(deviationRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesShape());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertFalse(deviationRenderer0.getBaseItemLabelsVisible());
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getBaseShapesVisible());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getZ(10, 500);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = "V}//v\"\\";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1139.781834574782), "V}//v\"");
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals("V}//v\"", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals("V}//v\"", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals("V}//v\"", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals("V}//v\"", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1139.781834574782), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      int int0 = (-69);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(1);
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertNotNull(standardXYItemRenderer0);
      
      int int0 = combinedDomainXYPlot0.getIndexOf(standardXYItemRenderer0);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1), int0);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertEquals("", categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertEquals("", categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertNotNull(combinedDomainCategoryPlot0);
      
      combinedRangeXYPlot0.addChangeListener(combinedDomainCategoryPlot0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertEquals("", categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(basicStroke0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Paint paint0 = combinedRangeXYPlot0.getDomainTickBandPaint();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-2798.51));
      cyclicNumberAxis0.setMinorTickMarkInsideLength(0.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.getPlotType();
      combinedDomainXYPlot0.getDomainAxisCount();
      IntervalMarker intervalMarker0 = new IntervalMarker(50000.0, 50000.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker(500, (Marker) intervalMarker0, layer0);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      double double0 = 1688.9692479603068;
      double double1 = (-1463.829);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-3597);
      shortArray0[1] = (short) (-1261);
      shortArray0[2] = (short)1416;
      shortArray0[3] = (short)2124;
      shortArray0[4] = (short) (-2595);
      shortArray0[5] = (short) (-199);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2658);
      shortArray0[8] = (short)2192;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(1, shortArray0);
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, meterPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(333, 1, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 1 and should be 333
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-2798.51));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-2117.395), 0.0, 1067.39248, 0.05);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, false);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(500, (-2117.395));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, false);
      cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      Stack<AxisState> stack0 = new Stack<AxisState>();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      combinedDomainXYPlot0.getRendererForDataset(jDBCXYDataset0);
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getRangeAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(10, axisLocation0, true);
      combinedDomainXYPlot1.setDomainAxisLocation(22, axisLocation0, false);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point point0 = new Point();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) null);
      combinedRangeXYPlot0.getRangeCrosshairStroke();
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(1.0F, 1.0F);
      boolean boolean0 = false;
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      Font font0 = SpiderWebPlot.DEFAULT_LABEL_FONT;
      Rectangle2D rectangle2D0 = font0.getMaxCharBounds(fontRenderContext0);
      Stack<AxisState> stack0 = new Stack<AxisState>();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D0, stack0);
      // Undeclared exception!
      try { 
        MockClock.system((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1878.172), 2, 3836.9388, 0.0F);
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, true);
      assertFalse(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      combinedDomainXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(3836.9388, 10.0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)valueAxis0.DEFAULT_AXIS_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      Stack<AxisState> stack0 = new Stack<AxisState>();
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, stack0);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stroke stroke0 = combinedDomainXYPlot0.getDomainGridlineStroke();
      combinedDomainXYPlot0.setOutlineStroke(stroke0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot0.getDomainAxisLocation(120);
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(stroke0);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      Paint paint0 = combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(paint0);
      combinedDomainXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.isRangeZeroBaselineVisible();
      double double0 = (-2147.046);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getPlotInfo();
      Button button0 = null;
      try {
        button0 = new Button((String) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDataset();
      double double0 = 0.0;
      double double1 = (-2423.782);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      defaultStyledDocument0.getStyle("");
      jTextPane0.modelToView((-3400));
      RenderingSource renderingSource0 = null;
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-2423.782), false, standardXYToolTipGenerator0);
      candlestickRenderer0.getPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.add((XYPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setOutlineVisible(true);
      TimeZone timeZone0 = TimeZone.getTimeZone("Cannot accept XYSeries that allow duplicate values. Use XYSeries(seriesName, <sort>, false) constructor.");
      dateAxis0.setTimeZone(timeZone0);
      combinedDomainXYPlot0.getDomainCrosshairValue();
      combinedDomainXYPlot0.getDomainAxisIndex(dateAxis0);
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable(10, (byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ByteLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point point0 = new Point();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) null);
      DatasetGroup datasetGroup0 = new DatasetGroup("WmA\"am");
      combinedRangeXYPlot0.setDatasetGroup(datasetGroup0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.findSubplot((PlotRenderingInfo) null, point0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setRangeAxis(0, (ValueAxis) null, true);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      dateAxis0.setAxisLineStroke(combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      dateAxis0.setAutoTickUnitSelection(true, true);
      symbolAxis0.resizeRange2((-387.323981387725), 4.0);
      symbolAxis0.setLabelPaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.getRangeAxisIndex(symbolAxis0);
      int int0 = 356;
      int int1 = 2518;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(500);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-172.67031), ".SQYvM~?8==#p:WK=p");
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        xYPlot0.addDomainMarker(1146, (Marker) null, layer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Stroke stroke0 = combinedRangeXYPlot0.getRangeCrosshairStroke();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(stroke0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getItemOutlinePaint(10, 10, true);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      defaultPolarItemRenderer0.setBaseItemLabelsVisible(false, true);
      axisLocation0.getOpposite();
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, true);
      combinedDomainXYPlot0.setDomainTickBandPaint(paint0);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis(0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      combinedDomainXYPlot0.setDomainCrosshairStroke(valueAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.getRangeAxisLocation();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Object[][][] objectArray0 = new Object[5][3][7];
      Object[][] objectArray1 = new Object[5][3];
      Object[] objectArray2 = new Object[1];
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Object object0 = combinedRangeXYPlot0.clone();
      objectArray2[0] = object0;
      objectArray1[0] = objectArray2;
      Object[] objectArray3 = new Object[5];
      Object object1 = new Object();
      objectArray3[0] = object1;
      objectArray3[1] = object0;
      objectArray3[2] = object0;
      objectArray3[3] = object0;
      objectArray3[4] = object0;
      objectArray1[1] = objectArray3;
      Object[] objectArray4 = new Object[2];
      objectArray4[0] = (Object) combinedRangeXYPlot0;
      objectArray4[1] = object1;
      objectArray1[2] = objectArray4;
      Object[] objectArray5 = new Object[8];
      objectArray5[0] = (Object) combinedRangeXYPlot0;
      objectArray5[1] = object0;
      Object object2 = new Object();
      objectArray5[2] = object2;
      objectArray5[3] = object1;
      objectArray5[4] = (Object) combinedRangeXYPlot0;
      objectArray5[5] = (Object) combinedRangeXYPlot0;
      objectArray5[6] = object0;
      Object object3 = combinedRangeXYPlot0.clone();
      objectArray5[7] = object3;
      objectArray1[3] = objectArray5;
      Object[] objectArray6 = new Object[2];
      objectArray6[0] = object2;
      objectArray6[1] = (Object) combinedRangeXYPlot0;
      objectArray1[4] = objectArray6;
      objectArray0[0] = objectArray1;
      Object[][] objectArray7 = new Object[7][8];
      objectArray7[0] = objectArray5;
      objectArray7[1] = objectArray6;
      objectArray7[2] = objectArray4;
      objectArray7[3] = objectArray6;
      objectArray7[4] = objectArray2;
      objectArray7[5] = objectArray5;
      objectArray7[6] = objectArray3;
      objectArray0[1] = objectArray7;
      Object[][] objectArray8 = new Object[9][5];
      objectArray8[0] = objectArray6;
      objectArray8[1] = objectArray2;
      objectArray8[2] = objectArray6;
      objectArray8[3] = objectArray6;
      objectArray8[4] = objectArray2;
      objectArray8[5] = objectArray4;
      objectArray8[6] = objectArray2;
      objectArray8[7] = objectArray5;
      objectArray8[8] = objectArray2;
      objectArray0[2] = objectArray8;
      Object[][] objectArray9 = new Object[5][8];
      objectArray9[0] = objectArray6;
      objectArray9[1] = objectArray2;
      objectArray9[2] = objectArray6;
      objectArray9[3] = objectArray2;
      objectArray9[4] = objectArray5;
      objectArray0[3] = objectArray9;
      Object[][] objectArray10 = new Object[2][5];
      objectArray10[0] = objectArray4;
      objectArray10[1] = objectArray5;
      objectArray0[4] = objectArray10;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeMinorGridlineStroke();
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries(1.0F);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.setSelected(10, 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (10).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisForDataset(0);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker(2, (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Paint paint0 = combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedRangeXYPlot0.configureRangeAxes();
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(true);
      combinedRangeXYPlot0.getSeriesCount();
      IntervalMarker intervalMarker0 = new IntervalMarker((-805.94102), 0.0, paint0);
      combinedRangeXYPlot0.addDomainMarker(0, (Marker) intervalMarker0, layer0);
      JFreeChart jFreeChart0 = new JFreeChart("Indices must be unique.", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
