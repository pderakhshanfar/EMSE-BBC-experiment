/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:56:27 GMT 2021
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.ScrollPane;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.datatransfer.StringSelection;
import java.awt.event.MouseEvent;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandedSampleModel;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentSampleModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.SampleModel;
import java.awt.image.ShortLookupTable;
import java.awt.image.TileObserver;
import java.awt.image.WritableRaster;
import java.math.BigInteger;
import java.sql.Connection;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.EventListener;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JApplet;
import javax.swing.JDesktopPane;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.TransferHandler;
import javax.swing.border.AbstractBorder;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.plaf.basic.BasicToolBarSeparatorUI;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalInternalFrameUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.plaf.synth.SynthListUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.JTextComponent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.RenderingSource;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYDataImageAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.annotations.XYImageAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.annotations.XYTitleAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTick;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.MultipleXYSeriesLabelGenerator;
import org.jfree.chart.labels.StandardXYSeriesLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
import org.jfree.chart.labels.XYSeriesLabelGenerator;
import org.jfree.chart.needle.ArrowNeedle;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.ObjectList;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.UnitType;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.DateRange;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYPlot_ESTest extends XYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 270.0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxis((-1), (ValueAxis) cyclicNumberAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      combinedDomainXYPlot0.zoomDomainAxes((double) 0.0F, plotRenderingInfo0, (Point2D) point2D_Float0);
      AffineTransform affineTransform0 = new AffineTransform();
      Point2D point2D0 = affineTransform0.transform((Point2D) point2D_Float0, (Point2D) point2D_Float0);
      point2D_Float0.setLocation(point2D0);
      ValueMarker valueMarker0 = new ValueMarker(0.0F, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 0.0F, (double) 0.0F, plotRenderingInfo0, (Point2D) point2D_Float0);
      combinedDomainXYPlot0.getDataset();
      combinedDomainXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      xYPlot0.addRangeMarker((Marker) valueMarker0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      xYPlot0.zoomDomainAxes((double) 1024, 0.28, plotRenderingInfo0, (Point2D) point0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDataset();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawAxes((Graphics2D) null, (Rectangle2D) null, (Rectangle2D) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxisLocation((AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(3);
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainAxisLocation(3, axisLocation0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer(2);
      combinedDomainXYPlot0.setRenderer(2, (XYItemRenderer) xYBubbleRenderer0);
      combinedDomainXYPlot0.setDomainGridlineStroke(highLowRenderer0.DEFAULT_STROKE);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(xYBubbleRenderer0.DEFAULT_OUTLINE_PAINT);
      ValueMarker valueMarker0 = new ValueMarker(10.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      LinkedList<DefaultWindDataset> linkedList0 = new LinkedList<DefaultWindDataset>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CrosshairState crosshairState0 = new CrosshairState(false);
      Point2D.Float point2D_Float0 = new Point2D.Float(10, 1);
      combinedDomainXYPlot0.zoomRangeAxes((double) 3, (double) 2, plotRenderingInfo0, (Point2D) point2D_Float0);
      BufferedImage bufferedImage0 = new BufferedImage(259, 4, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawBackground(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      Rectangle rectangle0 = new Rectangle();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(multiplePiePlot0.DEFAULT_LEGEND_ITEM_CIRCLE, xYPlot0.DEFAULT_CROSSHAIR_STROKE, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_OUTLINE_PAINT);
      Point point0 = new Point();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.panDomainAxes(0, plotRenderingInfo0, point0);
      xYPlot0.getRangeAxisLocation();
      xYPlot0.zoomRangeAxes((double) 0, (double) 1.0F, plotRenderingInfo0, (Point2D) point0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      Layer layer1 = Layer.BACKGROUND;
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getLegendItems();
      // Undeclared exception!
      try { 
        xYPlot0.removeRangeMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("PjtDXdug/%");
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, logAxis0, periodAxis0, vectorRenderer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("PjtDXdug/%");
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("Requires 'w' > 0.0.", xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.handleClick((-471), (-2755), chartRenderingInfo0);
      xYPlot0.getSeriesCount();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      combinedDomainXYPlot0.plotChanged((PlotChangeEvent) null);
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      combinedDomainXYPlot0.getPlotType();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.getPadding();
      combinedDomainXYPlot0.getDataRange((ValueAxis) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      moduloAxis0.setTickLabelInsets(combinedDomainXYPlot0.DEFAULT_INSETS);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DateTickUnitType.MILLISECOND");
      combinedDomainXYPlot0.isRangeGridlinesVisible();
      ModuloAxis moduloAxis1 = new ModuloAxis("", moduloAxis0.DEFAULT_RANGE);
      moduloAxis1.setAxisLineStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Vector<XYDrawableAnnotation> vector0 = new Vector<XYDrawableAnnotation>();
      GeneralPath generalPath0 = new GeneralPath();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 712.53514213, 1.0E-8, (-1.7976931348623157E308));
      Paint paint0 = xYPointerAnnotation0.getPaint();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1337.7475247950943), 0.0091, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, dateAxis0.DEFAULT_AXIS_LINE_STROKE, paint0, dateAxis0.DEFAULT_AXIS_LINE_STROKE, 0.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      combinedRangeXYPlot0.isOutlineVisible();
      combinedRangeXYPlot0.getDomainAxis();
      JFreeChart jFreeChart0 = new JFreeChart("", dateAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 87, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(87, 500);
      combinedRangeXYPlot0.drawRangeGridlines(graphics2D0, rectangle0, vector0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0F);
      LogAxis logAxis0 = new LogAxis("_pgQ_d%KExAb!8W");
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, logAxis0, logAxis0, highLowRenderer0);
      short[][] shortArray0 = new short[9][4];
      short[] shortArray1 = new short[5];
      shortArray1[0] = (short)2383;
      shortArray1[1] = (short)8;
      shortArray1[2] = (short)2039;
      shortArray1[3] = (short)4;
      shortArray1[4] = (short)1015;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[7];
      shortArray2[0] = (short)8;
      shortArray2[1] = (short)61;
      shortArray2[2] = (short)3413;
      shortArray2[3] = (short)1015;
      shortArray2[4] = (short)8;
      shortArray2[5] = (short)8;
      shortArray2[6] = (short)4;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[6];
      shortArray3[0] = (short)2383;
      shortArray3[1] = (short)2383;
      shortArray3[2] = (short)1015;
      shortArray3[3] = (short)1015;
      shortArray3[4] = (short)1015;
      shortArray3[5] = (short)3413;
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[6];
      shortArray4[0] = (short)61;
      shortArray4[1] = (short)2039;
      shortArray4[2] = (short)8;
      shortArray4[3] = (short)3413;
      shortArray4[4] = (short)2039;
      shortArray4[5] = (short)8;
      shortArray0[3] = shortArray4;
      short[] shortArray5 = new short[2];
      shortArray5[0] = (short)4;
      shortArray5[1] = (short)3413;
      shortArray0[4] = shortArray5;
      short[] shortArray6 = new short[9];
      shortArray6[0] = (short)1015;
      shortArray6[1] = (short)1;
      shortArray6[2] = (short)4;
      shortArray6[3] = (short)8;
      shortArray6[4] = (short)3413;
      shortArray6[5] = (short)1015;
      shortArray6[6] = (short)2383;
      shortArray6[7] = (short)1015;
      shortArray6[8] = (short)61;
      shortArray0[5] = shortArray6;
      short[] shortArray7 = new short[7];
      shortArray7[0] = (short)8;
      shortArray7[1] = (short)2383;
      shortArray7[2] = (short)2039;
      shortArray7[3] = (short)8;
      shortArray7[4] = (short)1015;
      shortArray7[5] = (short)3413;
      shortArray7[6] = (short)2383;
      shortArray0[6] = shortArray7;
      short[] shortArray8 = new short[1];
      shortArray8[0] = (short)61;
      shortArray0[7] = shortArray8;
      short[] shortArray9 = new short[3];
      shortArray9[0] = (short)4;
      shortArray9[1] = (short)61;
      shortArray9[2] = (short)1015;
      shortArray0[8] = shortArray9;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(500, shortArray0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      JFreeChart jFreeChart1 = new JFreeChart("_pgQ_d%KExAb!8W", xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage((int) (short)1015, (int) (short)61, chartRenderingInfo0);
      // Undeclared exception!
      try { 
        lookupOp0.filter(bufferedImage0, bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of arrays in the  lookup table (9 is not compatible with the  src image: BufferedImage@36cebd40: type = 2 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=ff000000 IntegerInterleavedRaster: width = 1015 height = 61 #Bands = 4 xOff = 0 yOff = 0 dataOffset[0] 0
         //
         verifyException("java.awt.image.LookupOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.zoomDomainAxes(2.0, plotRenderingInfo0, (Point2D) point2D_Float0);
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      Paint paint0 = xYShapeRenderer0.getGuideLinePaint();
      ValueMarker valueMarker0 = new ValueMarker((-1412.0), paint0, xYShapeRenderer0.DEFAULT_OUTLINE_STROKE);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      xYPlot0.addRangeMarker((Marker) valueMarker0);
      xYPlot0.zoomDomainAxes(1.0E-8, (-2257.88075145), plotRenderingInfo0, (Point2D) point2D_Float0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.getDataset();
      combinedDomainXYPlot0.getRangeAxisCount();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0, 2049.1, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, 1.0F);
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      axisLocation0.getOpposite();
      axisLocation0.getOpposite();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.setDomainAxisLocation(0, axisLocation0, false);
      combinedDomainXYPlot1.clearDomainMarkers();
      combinedDomainXYPlot1.getRenderer();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point point0 = new Point();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jfree.chart.plot.XYPlot");
      combinedRangeXYPlot0.zoomRangeAxes(4.0, plotRenderingInfo0, (Point2D) point0, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot1.getSeriesRenderingOrder();
      combinedDomainXYPlot1.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedDomainXYPlot1.clearDomainAxes();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-2822.421734100891), 0.05, 0.05, (-2822.421734100891));
      Layer layer0 = Layer.FOREGROUND;
      vectorRenderer0.addAnnotation((XYAnnotation) xYBoxAnnotation0, layer0);
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, logAxis0, periodAxis0, vectorRenderer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      xYPlot0.setDomainPannable(true);
      ModuloAxis moduloAxis0 = new ModuloAxis("", logAxis0.DEFAULT_RANGE);
      xYPlot0.getDataRange(periodAxis0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.getSeriesRenderingOrder();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      JTree jTree0 = new JTree(vector0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) periodAxis0;
      objectArray0[1] = (Object) taskSeriesCollection0;
      Object object0 = xYPlot0.clone();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) taskSeriesCollection0;
      objectArray0[4] = (Object) vector0;
      objectArray0[5] = (Object) seriesRenderingOrder0;
      objectArray0[6] = (Object) moduloAxis0;
      objectArray0[7] = (Object) jTree0;
      TreePath treePath0 = new TreePath(objectArray0);
      metalTreeUI0.getPathBounds(jTree0, treePath0);
      xYPlot0.drawZeroRangeBaseline(graphics2D0, (Rectangle2D) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 476);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("%dNkTdg2tg[");
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D0, (AxisSpace) null);
      AxisSpace axisSpace1 = subCategoryAxis0.reserveSpace(graphics2D0, combinedRangeCategoryPlot0, rectangle2D0, (RectangleEdge) null, axisSpace0);
      combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D0, axisSpace1);
      Stack<XYDrawableAnnotation> stack0 = new Stack<XYDrawableAnnotation>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(500, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxis((-2439), 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      combinedDomainXYPlot0.getDataset();
      combinedDomainXYPlot0.setDataset(200, (XYDataset) null);
      RescaleOp rescaleOp0 = new RescaleOp(200, 794.2F, (RenderingHints) null);
      // Undeclared exception!
      try { 
        rescaleOp0.filter((BufferedImage) null, (BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.RescaleOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 4.0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis((-182), (ValueAxis) cyclicNumberAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      combinedDomainXYPlot0.zoomDomainAxes((-2457.453675969884), plotRenderingInfo0, (Point2D) point2D_Float0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      ValueMarker valueMarker0 = new ValueMarker((-1.0), combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0);
      combinedDomainXYPlot0.zoomDomainAxes((-2457.453675969884), (double) 0.0F, plotRenderingInfo0, (Point2D) point2D_Float0);
      combinedDomainXYPlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2114.4498449145);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.add((XYPlot) combinedRangeXYPlot0, 500);
      cyclicNumberAxis0.setAutoRangeMinimumSize(2463.3235740653954);
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      combinedDomainXYPlot0.setDomainGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Indices must be Integer instances.");
      Point point0 = new Point();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot1.zoomRangeAxes((double) 1.0F, plotRenderingInfo0, (Point2D) point0, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.calculateAxisSpace((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'category2' argument.", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      FontRenderContext fontRenderContext0 = new FontRenderContext((AffineTransform) null, false, true);
      Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getMaxCharBounds(fontRenderContext0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      DateAxis dateAxis0 = new DateAxis();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
      AxisSpace axisSpace1 = dateAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D0, rectangleEdge0, axisSpace0);
      combinedRangeXYPlot1.setFixedRangeAxisSpace(axisSpace1, true);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1468.5833);
      CategoryAxis categoryAxis0 = new CategoryAxis("v)[6F~6Ca=E8Yn*>%o");
      Stroke stroke0 = categoryAxis0.getTickMarkStroke();
      combinedDomainXYPlot0.drawRangeCrosshair(graphics2D0, rectangle2D0, plotOrientation0, 10, cyclicNumberAxis0, stroke0, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.9600000000000001, 0.8350000000000001, 0.05, 1.0F);
      combinedDomainXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D0, plotOrientation0, 0.925, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      Point point0 = new Point();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot1.zoomRangeAxes((double) 1.0F, plotRenderingInfo0, (Point2D) point0, true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(1.0F);
      combinedDomainXYPlot0.getRendererForDataset(defaultBoxAndWhiskerXYDataset0);
      combinedRangeXYPlot0.getLegendItems();
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      vector0.add(defaultIntervalXYDataset0);
      combinedRangeXYPlot0.drawDomainGridlines((Graphics2D) null, (Rectangle2D) null, vector0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.clearDomainMarkers();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-4344), 95, 10, (-4344), 15, (-4344), false, false, false, false, false, false, false);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      Point point0 = chartPanel0.getLocation((Point) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((-496.50974247778), (PlotRenderingInfo) null, (Point2D) point0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", combinedRangeXYPlot0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'stroke' argument.");
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      NumberAxis numberAxis0 = new NumberAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, numberAxis0, categoryStepRenderer0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Rectangle rectangle0 = new Rectangle();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0F, 1.0F);
      combinedRangeXYPlot0.zoomRangeAxes(Double.NaN, Double.NaN, (PlotRenderingInfo) null, (Point2D) point2D_Double0);
      combinedRangeXYPlot0.getRangeAxisForDataset(0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDataset(0);
      combinedRangeXYPlot0.getDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.zoomDomainAxes((double) 0, plotRenderingInfo0, (Point2D) point0, true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      StandardXYToolTipGenerator.getTimeSeriesInstance();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.getRangeAxisEdge();
      // Undeclared exception!
      combinedDomainXYPlot0.setRenderer(1789569706, (XYItemRenderer) xYBoxAndWhiskerRenderer0, false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getSeriesPaint(10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("PjtDXdug/%");
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, logAxis0, periodAxis0, vectorRenderer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Null 'stroke' argument.");
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'stroke' argument.");
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, logAxis0, categoryStepRenderer0);
      xYPlot0.setRangeMinorGridlineStroke(periodAxis0.DEFAULT_AXIS_LINE_STROKE);
      BufferedImage bufferedImage0 = new BufferedImage(10, 500, 6);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_AXIS_LABEL_INSETS;
      JToggleButton jToggleButton0 = new JToggleButton();
      BevelBorder bevelBorder0 = new BevelBorder(10, (Color) null, (Color) null, (Color) null, (Color) null);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jToggleButton0, (Border) bevelBorder0, (-540), (-943), 500, (-2498));
      Rectangle2D rectangle2D0 = rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle0);
      Rectangle2D rectangle2D1 = categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS.createInsetRectangle(rectangle2D0, true, false);
      xYPlot0.drawBackground(graphics2D0, rectangle2D1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes((-436), stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argumen&.", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Point point0 = new Point(10, 420);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(594, 200, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainGridlineStroke(xYPlot0.DEFAULT_OUTLINE_STROKE);
      Rectangle rectangle0 = new Rectangle(1083, (-3526), 42, 10);
      combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle0, rectangle0, (PlotRenderingInfo) null);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argumen&.", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Point point0 = new Point(10, 420);
      point0.clone();
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("/l: hPtuWq0D-85&", 10, 300, 197.4427272969691);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYPointerAnnotation0);
      xYPlot0.setRangeCrosshairValue(1.01, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1024, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      PlotState plotState0 = new PlotState();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.draw(graphics2D0, rectangle2D0, point0, plotState0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1.0F);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = valueAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      combinedDomainXYPlot0.getRangeAxis(0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 6, 15, 0, (-3100), 1323, 138, false, false, false, true, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = chartPanel0.getLocation();
      combinedDomainXYPlot0.zoomDomainAxes(0.8, plotRenderingInfo0, (Point2D) point0, true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      ValueMarker valueMarker0 = new ValueMarker(0.9750000000000001, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(3, (Marker) valueMarker0, layer0, true);
      combinedDomainXYPlot0.addDomainMarker(3, (Marker) valueMarker0, layer0, true);
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Point point0 = new Point(10, 420);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(594, 200, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      xYPlot0.setRangePannable(true);
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable(4, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ByteLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setRenderer(165, (XYItemRenderer) null, true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2114.4498449145);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      JTextField jTextField0 = new JTextField(10);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextField0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getTextBounds(679, (-1623));
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      defaultCaret1.getMagicCaretPosition();
      combinedDomainXYPlot0.zoomDomainAxes(1.0350000000000001, (PlotRenderingInfo) null, (Point2D) null, false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, logAxis0, logAxis0, xYBoxAndWhiskerRenderer0);
      combinedDomainXYPlot0.setRangeGridlineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      valueAxisArray0[2] = (ValueAxis) logAxis0;
      valueAxisArray0[3] = (ValueAxis) logAxis0;
      valueAxisArray0[4] = (ValueAxis) logAxis0;
      valueAxisArray0[5] = (ValueAxis) logAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      JTextField jTextField0 = new JTextField(3844);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextField0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getTextBounds(1185, 10);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes(1.0, (PlotRenderingInfo) null, (Point2D) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(10, (Marker) categoryMarker0, layer1);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(4478, 4478);
      combinedRangeXYPlot0.zoomDomainAxes(10.0, plotRenderingInfo0, (Point2D) point0, true);
      combinedRangeXYPlot0.getDomainMarkers(layer0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2446.661), (-2446.661), "OwwCT0E+");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      JFreeChart jFreeChart0 = new JFreeChart("OwwCT0E+", combinedRangeXYPlot0);
      combinedRangeXYPlot0.zoom(10.0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JTextField jTextField0 = new JTextField(10);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextField0.new AccessibleJTextComponent();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.getGraphicsConfiguration();
      bufferedImage0.getCapabilities((GraphicsConfiguration) null);
      Rectangle rectangle0 = new Rectangle(10, (-2411));
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 0.0F, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      int int0 = (-914);
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, cyclicNumberAxis0);
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxisLocation((-914), axisLocation0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("Not yet implemented.", "Mt", "Null 'annotation' argument.");
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(1316, boxAndWhiskerXYToolTipGenerator0, standardXYURLGenerator0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(958.7, 1.0F);
      Range range0 = cyclicNumberAxis0.getDefaultAutoRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("series", range0);
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, moduloAxis0, cyclicNumberAxis0, xYStepAreaRenderer0);
      xYPlot0.getNoDataMessage();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(500);
      xYPlot0.setDomainZeroBaselineVisible(true);
      xYPlot0.isDomainCrosshairLockedOnData();
      xYPlot0.clearSelection();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      Point point0 = new Point();
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.panDomainAxes(4.0, plotRenderingInfo0, point0);
      combinedRangeXYPlot0.setRangeAxis(0, (ValueAxis) logAxis0, false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      PlotRenderingInfo plotRenderingInfo0 = null;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes((-2370.0), (PlotRenderingInfo) null, (Point2D) point2D_Float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("Wk(rR~tS#Wq|z", "XY_Plot", "Null 'offset' argument.");
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(1, customXYToolTipGenerator0, standardXYURLGenerator0);
      XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, periodAxis0, periodAxis0, xYStepAreaRenderer0);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(2);
      standardXYURLGenerator0.equals(stackedXYBarRenderer0);
      xYPlot0.setDomainZeroBaselineVisible(false);
      xYPlot0.isDomainCrosshairLockedOnData();
      xYPlot0.clearSelection();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(2.0F);
      Layer layer1 = Layer.BACKGROUND;
      NumberAxis numberAxis0 = new NumberAxis("i^bi7VMN/");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.addRangeMarker(3, (Marker) categoryMarker0, layer1);
      LogAxis logAxis1 = new LogAxis();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxis((-764), (ValueAxis) numberAxis0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2114.4498449145);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setAxisOffset(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
      combinedDomainXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlineStroke(xYBoxAndWhiskerRenderer0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) xYBoxAndWhiskerRenderer0);
      combinedDomainXYPlot0.setDomainPannable(true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[0];
      combinedDomainXYPlot1.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot1.getFixedRangeAxisSpace();
      combinedDomainXYPlot1.setQuadrantPaint(0, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 2.0F);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
      Ellipse2D.Double ellipse2D_Double1 = (Ellipse2D.Double)Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
      logAxis0.setLabelInsets(combinedRangeXYPlot0.DEFAULT_INSETS);
      Rectangle2D rectangle2D0 = ellipse2D_Double1.getBounds2D();
      combinedRangeXYPlot0.select(generalPath0, rectangle2D0, (RenderingSource) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot1.getRendererCount();
      combinedDomainXYPlot0.clearRangeAxes();
      JFreeChart jFreeChart0 = new JFreeChart("nGN'J3\"y!z~9%", logAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot1, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(58, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot1.drawQuadrants(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainAxes();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      ItemLabelPosition itemLabelPosition0 = defaultPolarItemRenderer0.getBasePositiveItemLabelPosition();
      defaultPolarItemRenderer0.setBaseNegativeItemLabelPosition(itemLabelPosition0);
      Color color0 = Color.CYAN;
      Layer layer0 = Layer.BACKGROUND;
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(59, 2389, 0.9650000000000001, Double.POSITIVE_INFINITY, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode(layer0, true);
      DefaultMutableTreeNode defaultMutableTreeNode1 = defaultMutableTreeNode0.getLastLeaf();
      JTree jTree0 = new JTree(defaultMutableTreeNode1);
      jTree0.getRowBounds(59);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, (Rectangle2D) null, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      combinedDomainXYPlot0.zoomDomainAxes(1770.952, plotRenderingInfo0, (Point2D) point2D_Float0);
      JFreeChart jFreeChart0 = new JFreeChart("Not yet implemented.", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 244, 3);
      ValueMarker valueMarker0 = new ValueMarker(2729, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      combinedRangeXYPlot0.addRangeMarker((Marker) valueMarker0);
      combinedRangeXYPlot0.zoomDomainAxes(195.129, 0.7853981633974483, plotRenderingInfo0, (Point2D) point2D_Float0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      combinedDomainXYPlot0.zoomDomainAxes(250000.0, plotRenderingInfo0, (Point2D) point2D_Float0);
      JFreeChart jFreeChart0 = new JFreeChart("Not yet implemented.", combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = new BufferedImage(2729, 3, 3);
      ValueMarker valueMarker0 = new ValueMarker(0.93, jFreeChart0.DEFAULT_BACKGROUND_PAINT, highLowRenderer0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes(1.0E-8, (double) 0.0F, plotRenderingInfo0, (Point2D) point2D_Float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-131249.472375) <= upper (-131249.475).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      scatterRenderer0.findRangeBounds(defaultMultiValueCategoryDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Pv#7@<$Q/ov", (Range) null);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer((-2194));
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot((XYDataset) null, moduloAxis0, moduloAxis0, cyclicXYItemRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(xYBoxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      combinedDomainXYPlot0.clearDomainMarkers(2);
      combinedDomainXYPlot0.getAnnotations();
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_BACKGROUND_PAINT;
      PeriodAxis periodAxis0 = new PeriodAxis("OwwCTyE+");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot1.setRangeGridlinePaint(combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot2.setDomainMinorGridlinesVisible(true);
      combinedDomainXYPlot2.getRangeAxisLocation();
      AxisLocation axisLocation0 = combinedDomainXYPlot2.getRangeAxisLocation(0);
      combinedDomainXYPlot2.setDomainAxisLocation(200, axisLocation0, true);
      combinedDomainXYPlot0.getRangeAxis(1172);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(2.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[9];
      xYItemRendererArray0[2] = (XYItemRenderer) xYBoxAndWhiskerRenderer0;
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      xYItemRendererArray0[3] = (XYItemRenderer) defaultXYItemRenderer0;
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer1 = new XYBoxAndWhiskerRenderer(1.0E-8);
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge((-4532));
      xYPlot0.getDomainAxisCount();
      xYPlot0.getDomainMarkers(260, (Layer) null);
      double double0 = 1442.0;
      double double1 = (-180.675067);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      chartRenderingInfo1.getPlotInfo();
      SynthListUI synthListUI0 = new SynthListUI();
      DefaultComboBoxModel<XYTitleAnnotation> defaultComboBoxModel0 = new DefaultComboBoxModel<XYTitleAnnotation>();
      JList<XYTitleAnnotation> jList0 = new JList<XYTitleAnnotation>(defaultComboBoxModel0);
      // Undeclared exception!
      try { 
        synthListUI0.indexToLocation(jList0, 365);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicListUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setRangeWithMargins((double) 2.0F, (double) 2.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      valueAxisArray0[1] = (ValueAxis) numberAxis0;
      valueAxisArray0[2] = (ValueAxis) logAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(1.0F, false);
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 500, true);
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, logAxis0, logAxis0, xYBoxAndWhiskerRenderer0);
      xYPlot0.setRangeGridlineStroke(xYBoxAndWhiskerRenderer0.DEFAULT_OUTLINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      valueAxisArray0[2] = (ValueAxis) logAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2685);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JTextField jTextField0 = new JTextField(1009);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextField0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getTextBounds((-1463), 10);
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, (Rectangle2D) null, 688.3830998440873, logAxis0.DEFAULT_AXIS_LINE_STROKE, xYPlot0.DEFAULT_GRIDLINE_PAINT);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      // Undeclared exception!
      try { 
        xYPlot0.zoomDomainAxes(2728.954, (PlotRenderingInfo) null, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.canSelectByRegion();
      combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      combinedRangeXYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_PAINT;
      combinedDomainXYPlot1.setDomainMinorGridlinePaint(color0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      Integer integer0 = new Integer(15);
      GeneralPath generalPath0 = new GeneralPath();
      defaultStatisticalCategoryDataset0.clear();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1024, 10, 1024, 10, 10, (-1577), false, true, true, true, true, false, false);
      Rectangle rectangle0 = new Rectangle(53, 1024);
      combinedRangeXYPlot0.getRendererCount();
      combinedDomainXYPlot1.clearRangeAxes();
      combinedRangeXYPlot0.clearRangeMarkers(5);
      JFreeChart jFreeChart1 = new JFreeChart("Null 'annotation' argument.", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot1, false);
      PriorityQueue<LegendItemCollection> priorityQueue0 = new PriorityQueue<LegendItemCollection>();
      LogAxis logAxis0 = new LogAxis();
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(500, 200, (ChartRenderingInfo) null);
      BufferedImage bufferedImage1 = colorConvertOp0.filter(bufferedImage0, bufferedImage0);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.getFixedRangeAxisSpace();
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, (AxisSpace) null);
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2114.4498449145);
      DateTitle dateTitle0 = new DateTitle();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.setAxisOffset(numberAxis3D0.DEFAULT_TICK_LABEL_INSETS);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainAxes();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      ItemLabelPosition itemLabelPosition0 = defaultPolarItemRenderer0.getBasePositiveItemLabelPosition();
      defaultPolarItemRenderer0.setBaseNegativeItemLabelPosition(itemLabelPosition0);
      Color color0 = Color.CYAN;
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainAxisCount();
      BufferedImage bufferedImage0 = new BufferedImage(2, 300, 10);
      bufferedImage0.createGraphics();
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 10;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel((-405), (-1424), floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 3 and should be 576720
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeAxes();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("OwwCTyE+");
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDataset((-3760), (XYDataset) timePeriodValuesCollection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-1099.699), cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertNotNull(moduloAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      moduloAxis0.centerRange(2.0F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNotNull(thermometerPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      boolean boolean0 = combinedDomainXYPlot0.equals((Object) null);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(boolean0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertNotNull(graphics2D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-4.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-4.0), rectangle2D_Double0.y, 0.01);
      assertEquals(8.0, rectangle2D_Double0.height, 0.01);
      assertEquals(8.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      assertEquals((-4.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-4.0), rectangle2D_Double0.y, 0.01);
      assertEquals(8.0, rectangle2D_Double0.height, 0.01);
      assertEquals(8.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-4), rectangle0.x);
      assertEquals((-4), rectangle0.y);
      assertEquals(8, rectangle0.width);
      assertEquals(8, rectangle0.height);
      
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals((-4.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-4.0), rectangle2D_Double0.y, 0.01);
      assertEquals(8.0, rectangle2D_Double0.height, 0.01);
      assertEquals(8.0, rectangle2D_Double0.width, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-4), rectangle0.x);
      assertEquals((-4), rectangle0.y);
      assertEquals(8, rectangle0.width);
      assertEquals(8, rectangle0.height);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.getRangeAxisCount();
      combinedDomainXYPlot0.getRangeAxisEdge();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      int int0 = 2846;
      int int1 = 4268;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 207, 500, 4268, 474, 2846, 15, false, false, false, true, false, true);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      chartPanel0.getInheritsPopupMenu();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis("ZOOM_IN_RANGE");
      Graphics2D graphics2D0 = null;
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Paint paint0 = minMaxCategoryRenderer0.getGroupPaint();
      Rectangle rectangle0 = chartPanel0.getBounds();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 0.925, logAxis0, logAxis0.DEFAULT_TICK_MARK_STROKE, paint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(457.2483096, 0.05, 1.0F, (-77.6819645733693), combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.getRangeAxis(42);
      combinedRangeXYPlot0.setDataset((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      MultipleXYSeriesLabelGenerator multipleXYSeriesLabelGenerator0 = new MultipleXYSeriesLabelGenerator();
      highLowRenderer0.setLegendItemToolTipGenerator(multipleXYSeriesLabelGenerator0);
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, logAxis0, logAxis0, highLowRenderer0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      combinedRangeXYPlot0.equals(xYStepRenderer0);
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      highLowRenderer1.clearSeriesStrokes(false);
      combinedRangeXYPlot0.setRenderer(10, (XYItemRenderer) highLowRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.findRangeBounds(categoryTableXYDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'origin' argument.", xYStepRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, true);
      jFreeChart0.createBufferedImage(1, 10);
      DateTitle dateTitle0 = new DateTitle();
      TextTitle textTitle0 = new TextTitle("TfacU4>^(C8J~31A= ");
      jFreeChart0.addSubtitle((Title) dateTitle0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      ArrayList<DateAxis> arrayList0 = new ArrayList<DateAxis>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.mapDatasetToDomainAxes(10, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(2.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[9];
      xYItemRendererArray0[0] = (XYItemRenderer) xYBoxAndWhiskerRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) highLowRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) xYBoxAndWhiskerRenderer0;
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      xYItemRendererArray0[3] = (XYItemRenderer) defaultXYItemRenderer0;
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      xYItemRendererArray0[4] = (XYItemRenderer) xYBarRenderer0;
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer1 = new XYBoxAndWhiskerRenderer((double) highLowRenderer0.ZERO);
      xYItemRendererArray0[5] = (XYItemRenderer) xYBoxAndWhiskerRenderer1;
      xYItemRendererArray0[6] = (XYItemRenderer) highLowRenderer0;
      xYItemRendererArray0[7] = (XYItemRenderer) xYBoxAndWhiskerRenderer0;
      xYItemRendererArray0[8] = (XYItemRenderer) highLowRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.setDomainCrosshairStroke(xYBoxAndWhiskerRenderer0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setRangeWithMargins(3.141592653589793, 3.141592653589793);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      valueAxisArray0[7] = (ValueAxis) logAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(590.0474042, true);
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 2.0F, true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.handleClick(500, 698, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2433.9743372872717), (-2433.9743372872717), "OwwCTyE+");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      JInternalFrame jInternalFrame0 = new JInternalFrame("'(w]th*[", false, false, true);
      MetalInternalFrameUI metalInternalFrameUI0 = new MetalInternalFrameUI(jInternalFrame0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      Dimension dimension0 = metalInternalFrameUI0.getMaximumSize(jToolBar_Separator0);
      Rectangle rectangle0 = new Rectangle(dimension0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Point2D point2D0 = spiderWebPlot0.calculateLabelLocation(rectangle0, 1.02, rectangle0, 683.0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.zoomRangeAxes(1.0, (PlotRenderingInfo) null, point2D0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("OwwCTyE+");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addChangeListener(combinedRangeXYPlot0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 15, 10, 2846, 10, true, true, true, true, true, true);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      chartPanel0.getInheritsPopupMenu();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis("ZOOM_RESET_BOTH");
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.getGroupPaint();
      Rectangle rectangle0 = chartPanel0.getBounds();
      combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 2683.0, logAxis0, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, subCategoryAxis0.DEFAULT_TICK_MARK_PAINT);
      chartPanel0.getScreenDataArea(10, 10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 0.93, logAxis0, logAxis0.DEFAULT_AXIS_LINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      Layer layer0 = Layer.BACKGROUND;
      PiePlot piePlot0 = new PiePlot();
      piePlot0.getLabelLinkStroke();
      Layer layer1 = Layer.BACKGROUND;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      StandardEntityCollection standardEntityCollection1 = new StandardEntityCollection();
      standardEntityCollection1.getEntities();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection1);
      GeneralPath generalPath0 = new GeneralPath(piePlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      logAxis0.setTickMarkOutsideLength(0.0F);
      Point2D point2D0 = generalPath0.getCurrentPoint();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomRangeAxes((-4.0), 90.0, plotRenderingInfo0, point2D0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      combinedRangeXYPlot0.indexOf(jDBCXYDataset0);
      combinedRangeXYPlot0.setDataset(50, (XYDataset) jDBCXYDataset0);
      combinedRangeXYPlot0.canSelectByPoint();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker((double) xYBoxAndWhiskerRenderer0.ZERO);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(297, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D1, rectangle2D_Double0);
      combinedDomainXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D_Double0, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("OwwCTyE+");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addChangeListener(combinedRangeXYPlot0);
      MeterPlot meterPlot0 = new MeterPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      axisSpace0.setBottom(0.8350000000000001);
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace0);
      combinedDomainXYPlot0.clearRangeMarkers();
      combinedDomainXYPlot0.clearRangeMarkers(2690);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.handleClick(2690, 7, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      ValueMarker valueMarker0 = new ValueMarker(10);
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(10, layer0);
      combinedDomainXYPlot0.getRangeTickBandPaint();
      DateAxis dateAxis1 = new DateAxis();
      combinedDomainXYPlot0.setDomainAxis(500, (ValueAxis) dateAxis1, true);
      combinedDomainXYPlot0.setDomainAxis(500, (ValueAxis) dateAxis1, true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, logAxis0, logAxis0, xYBoxAndWhiskerRenderer0);
      xYPlot0.setRangeGridlineStroke(xYBoxAndWhiskerRenderer0.DEFAULT_OUTLINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      standardEntityCollection0.iterator();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      valueAxisArray0[2] = (ValueAxis) logAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      double double0 = (-1944.3);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(2.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((-2150.512), 829.1867, 10, 0.05);
      Ellipse2D.Double ellipse2D_Double1 = new Ellipse2D.Double();
      Ellipse2D.Double ellipse2D_Double2 = new Ellipse2D.Double(0.9450000000000001, 0.0F, 10.0, 10.0);
      ellipse2D_Double2.getBounds2D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, true, false);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      LogAxis logAxis1 = new LogAxis("&ZNfMx[=:d:FtC0v'(x");
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.drawRangeCrosshair(graphics2D0, (Rectangle2D) null, plotOrientation0, 1.0E-6, dateAxis0, logAxis1.DEFAULT_AXIS_LINE_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_PAINT;
      combinedDomainXYPlot1.setDomainMinorGridlinePaint(color0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      Integer integer0 = new Integer(15);
      GeneralPath generalPath0 = new GeneralPath();
      defaultStatisticalCategoryDataset0.clear();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1024, 10, 1024, 10, 10, (-1577), false, true, true, true, true, false, false);
      Rectangle rectangle0 = new Rectangle(53, 1024);
      combinedRangeXYPlot0.getRendererCount();
      combinedDomainXYPlot1.clearRangeAxes();
      combinedRangeXYPlot0.clearRangeMarkers(5);
      ValueMarker valueMarker0 = new ValueMarker((-1.0));
      combinedRangeXYPlot0.addRangeMarker((Marker) valueMarker0);
      combinedRangeXYPlot0.getDomainAxis();
      combinedDomainXYPlot1.getSeriesCount();
      ValueMarker valueMarker1 = new ValueMarker(3340.6737420268, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(10, (Marker) valueMarker1, layer0, false);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Locale locale0 = Locale.JAPANESE;
      NumberAxis.createStandardTickUnits(locale0);
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      ValueMarker valueMarker0 = new ValueMarker(Double.NaN);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeDomainMarker(999, (Marker) valueMarker0, layer0);
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_PAINT;
      combinedDomainXYPlot1.setDomainMinorGridlinePaint(color0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot((ValueAxis) null);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(200.0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5(4=L\"l=VzD");
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) highLowRenderer0, false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      DateTitle dateTitle0 = new DateTitle();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, multiplePiePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.getOrientation();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis("ZOOM_RANGE_BOTH");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point2D.Float point2D_Float0 = new Point2D.Float(0.5F, 0.0F);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      combinedRangeXYPlot0.panRangeAxes((-2391.87), plotRenderingInfo0, point2D_Float0);
      ValueMarker valueMarker0 = new ValueMarker(10);
      combinedDomainXYPlot0.indexOf((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(yIntervalSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, stackedXYAreaRenderer2_0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_LEFT;
      xYPlot0.getRangeAxisEdge();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addRangeMarker(3, (Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      Point point0 = new Point();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "in=(W:=JWC>&@`;}A");
      combinedRangeXYPlot1.setDomainZeroBaselineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot1.panDomainAxes(Double.POSITIVE_INFINITY, plotRenderingInfo0, point0);
      combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      combinedRangeXYPlot0.getDomainGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      moduloAxis0.centerRange(2.0F);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      combinedDomainXYPlot0.clearRangeAxes();
      JFreeChart jFreeChart0 = new JFreeChart("Value:", moduloAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, true);
      jFreeChart0.getLegend(634);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JTextField jTextField0 = new JTextField(10);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextField0.new AccessibleJTextComponent();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(moduloAxis0);
      combinedDomainXYPlot1.setDomainMinorGridlinesVisible(true);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      combinedDomainXYPlot1.render(graphics2D0, rectangle2D_Float0, (-1393), plotRenderingInfo1, categoryCrosshairState0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainAxes();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      ItemLabelPosition itemLabelPosition0 = defaultPolarItemRenderer0.getSeriesNegativeItemLabelPosition(10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultPolarItemRenderer0.setBaseNegativeItemLabelPosition(itemLabelPosition0);
      Color color0 = Color.green;
      JFreeChart jFreeChart0 = new JFreeChart("'F2#O2JpXa(", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      bufferedImage0.createGraphics();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(Double.POSITIVE_INFINITY, 15, 10, (-1552.7429945));
      Ellipse2D.Double ellipse2D_Double1 = new Ellipse2D.Double();
      ellipse2D_Double1.getBounds2D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, true, false);
      chartPanel0.getOrientation();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis("COPY");
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      DateTitle dateTitle0 = new DateTitle();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(100.0, 10, 1.5, 1163.37997042);
      Ellipse2D.Double ellipse2D_Double1 = new Ellipse2D.Double();
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot1.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, false, true);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      chartPanel0.getInheritsPopupMenu();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LogAxis logAxis1 = new LogAxis("ZOOM_RESET_DOMAIN");
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Paint paint0 = minMaxCategoryRenderer0.getGroupPaint();
      combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, 1397.01765, logAxis1, logAxis1.DEFAULT_TICK_MARK_STROKE, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      Rectangle2D rectangle2D1 = chartPanel0.getScreenDataArea(3, 6);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D1, plotOrientation0, 0.0, logAxis0, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, paint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(525.092788430976);
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, logAxis0, logAxis0, xYBoxAndWhiskerRenderer0);
      xYPlot0.setRangeGridlineStroke(xYBoxAndWhiskerRenderer0.DEFAULT_OUTLINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      moduloAxis0.centerRange(2.0F);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      combinedDomainXYPlot0.equals((Object) null);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      DateTitle dateTitle0 = new DateTitle();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setRangeAxis(1, (ValueAxis) cyclicNumberAxis0, true);
      combinedDomainXYPlot0.clearRangeMarkers();
      JFreeChart jFreeChart0 = new JFreeChart("ilWFuyU=Goc", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      combinedDomainXYPlot0.drawQuadrants(graphics2D0, rectangle2D0);
      combinedDomainXYPlot0.getDataset(1);
      combinedDomainXYPlot0.mapDatasetToDomainAxis(3, 5051);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      DateTitle dateTitle0 = new DateTitle();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((-2950.75414633), 1.0F, (-2950.75414633), 1.0);
      Ellipse2D.Double ellipse2D_Double1 = new Ellipse2D.Double();
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, false, false);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis("FHwa#Kkgt&2Ome");
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Paint paint0 = minMaxCategoryRenderer0.getGroupPaint();
      combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, 200, logAxis0, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, paint0);
      combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, 2.0F, logAxis0, combinedDomainXYPlot1.DEFAULT_CROSSHAIR_STROKE, multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("OwwCTyE+");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      Vector<XYDrawableAnnotation> vector0 = new Vector<XYDrawableAnnotation>(10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation((-1081.05466234553), 0.87, 10.0, (-858.8733), (-1081.05466234553), jFreeChart0);
      vector0.add(xYDrawableAnnotation0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(1, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be Integer instances.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2446.661), (-2446.661), "OwwCTyE+");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      JFreeChart jFreeChart0 = new JFreeChart("OwwCTyE+", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      bufferedImage0.createGraphics();
      ValueMarker valueMarker0 = new ValueMarker(10);
      combinedRangeXYPlot0.addRangeMarker((Marker) valueMarker0);
      combinedRangeXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("jXhSF");
      JFreeChart jFreeChart0 = new JFreeChart("Null 'order' argument.", combinedRangeXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(95, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("p");
      JScrollPane jScrollPane0 = new JScrollPane(mockJFileChooser0);
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      RectangleEdge.opposite(rectangleEdge0);
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0, false);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(combinedRangeXYPlot1.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("{0GEjY", cyclicNumberAxis0.DEFAULT_RANGE);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(moduloAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.setAxisOffset(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      Double double0 = AbstractRenderer.ZERO;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultIntervalCategoryDataset0);
      Area area0 = new Area();
      Rectangle rectangle0 = area0.getBounds();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Point2D point2D0 = spiderWebPlot0.calculateLabelLocation(defaultCaret0, 1304.693975, rectangle0, 2154.8014315008913);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot1.zoomRangeAxes(1722.67872, plotRenderingInfo1, point2D0, false);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      ValueMarker valueMarker1 = new ValueMarker(3311.650850688788);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeRangeMarker(2446, (Marker) valueMarker1, layer0, false);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      Color color0 = (Color)CyclicNumberAxis.DEFAULT_ADVANCE_LINE_PAINT;
      DateAxis dateAxis0 = new DateAxis();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(highLowRenderer0.DEFAULT_OUTLINE_STROKE);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Sylvain Vieujot");
      JFreeChart jFreeChart0 = new JFreeChart((String) null, thermometerPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(95, 95, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("");
      JScrollPane jScrollPane0 = new JScrollPane(mockJFileChooser0);
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      AxisSpace axisSpace1 = subCategoryAxis0.reserveSpace(graphics2D0, combinedDomainXYPlot0, rectangle0, rectangleEdge1, axisSpace0);
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace1, true);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      int int0 = 5;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      deviationRenderer0.lookupSeriesPaint(5);
      int int1 = 3;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "]");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(deviationRenderer0, timeSeriesCollection0);
      xYPlot0.datasetChanged(datasetChangeEvent0);
      // Undeclared exception!
      try { 
        xYPlot0.setDomainMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      xYPlot0.setDomainPannable(true);
      // Undeclared exception!
      try { 
        xYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot1.setDomainZeroBaselineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
      logAxis0.removeChangeListener(combinedRangeXYPlot0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~&^fvmQ");
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.getRangeZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(3);
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainAxisLocation(3, axisLocation0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer(2);
      combinedDomainXYPlot0.setRenderer(2, (XYItemRenderer) xYBubbleRenderer0);
      combinedDomainXYPlot0.setDomainGridlineStroke(highLowRenderer0.DEFAULT_STROKE);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(xYBubbleRenderer0.DEFAULT_OUTLINE_PAINT);
      ValueMarker valueMarker0 = new ValueMarker(10.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      LinkedList<DefaultWindDataset> linkedList0 = new LinkedList<DefaultWindDataset>();
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeDomainMarker(3, (Marker) valueMarker0, layer1, true);
      combinedDomainXYPlot0.getDomainAxisLocation(2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("{0GEjY", cyclicNumberAxis0.DEFAULT_RANGE);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(moduloAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.setAxisOffset(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(moduloAxis0);
      Number[][] numberArray0 = new Number[3][6];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 0.0F;
      numberArray1[1] = (Number) 10;
      numberArray1[2] = (Number) 2.0F;
      numberArray1[3] = (Number) 0.05;
      numberArray1[4] = (Number) 10;
      numberArray1[5] = (Number) 0.0F;
      numberArray1[6] = (Number) 0.0F;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      Double double0 = AbstractRenderer.ZERO;
      numberArray2[0] = (Number) double0;
      numberArray2[1] = combinedDomainXYPlot0.ZERO;
      numberArray2[2] = (Number) 1.0F;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultIntervalCategoryDataset0);
      Area area0 = new Area(spiderWebPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Rectangle rectangle0 = area0.getBounds();
      Rectangle2D rectangle2D0 = rectangle0.getBounds2D();
      Point2D point2D0 = spiderWebPlot0.calculateLabelLocation(rectangle2D0, (-2752.5), rectangle2D0, 0.0F);
      combinedRangeXYPlot0.zoomRangeAxes(585.0, plotRenderingInfo0, point2D0, true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      Point2D.Float point2D_Float0 = new Point2D.Float();
      Year year0 = new Year((-933));
      PeriodAxis periodAxis0 = new PeriodAxis("ItemLabelAnchor.OUTSIDE11", year0, year0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      ValueMarker valueMarker1 = new ValueMarker(1.0450000000000002);
      combinedRangeXYPlot0.addRangeMarker((Marker) valueMarker1);
      PeriodAxis periodAxis1 = new PeriodAxis("Pie_Plot");
      XYPlot xYPlot0 = new XYPlot();
      combinedRangeXYPlot0.getRangeAxis();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("{0GEjY", cyclicNumberAxis0.DEFAULT_RANGE);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(moduloAxis0.DEFAULT_TICK_MARK_PAINT);
      CategoryMarker categoryMarker0 = new CategoryMarker(500);
      combinedDomainXYPlot0.addRangeMarker(3, (Marker) categoryMarker0, (Layer) null, false);
      combinedDomainXYPlot0.clearDomainMarkers(500);
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_BACKGROUND_PAINT;
      combinedDomainXYPlot0.setRangeGridlinePaint(moduloAxis0.DEFAULT_AXIS_LABEL_PAINT);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(moduloAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(moduloAxis0);
      combinedDomainXYPlot2.setDomainMinorGridlinesVisible(true);
      AxisLocation axisLocation0 = combinedDomainXYPlot2.getRangeAxisLocation();
      combinedDomainXYPlot0.setDomainAxisLocation(0, axisLocation0, false);
      combinedDomainXYPlot2.getRangeMarkers((-51), (Layer) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker1 = new ValueMarker((-1.0));
      combinedDomainXYPlot0.addDomainMarker(10, (Marker) valueMarker0, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlineStroke(combinedDomainXYPlot1.DEFAULT_CROSSHAIR_STROKE);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      combinedDomainXYPlot2.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedDomainXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(3);
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainAxisLocation(3, axisLocation0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      combinedDomainXYPlot0.setDomainGridlineStroke(highLowRenderer0.DEFAULT_STROKE);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      MeterPlot meterPlot0 = new MeterPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedDomainXYPlot1.setFixedDomainAxisSpace(axisSpace0);
      combinedDomainXYPlot1.setDomainMinorGridlinesVisible(true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      XYPlot xYPlot0 = new XYPlot();
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      xYPlot0.setInsets(rectangleInsets0, true);
      xYPlot0.getRangeMinorGridlinePaint();
      xYPlot0.isRangeGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      moduloAxis0.centerRange(2.0F);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker(34, (Marker) null, layer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker(295, (Marker) valueMarker0, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-695.094), true, highLowItemLabelGenerator0);
      candlestickRenderer0.getBaseLegendTextPaint();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      Point point0 = new Point();
      combinedRangeXYPlot1.setDomainZeroBaselineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot1.panDomainAxes(Double.POSITIVE_INFINITY, plotRenderingInfo0, point0);
      combinedRangeXYPlot0.getRangeZeroBaselineStroke();
      combinedRangeXYPlot1.isRangeCrosshairLockedOnData();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.resizeRange((double) 1.0F, 0.9800000000000001);
      ValueMarker valueMarker0 = new ValueMarker(10, dateAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5v~u0GQ5eVbt;og,w");
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(6, layer0);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("_X", (-1459.8292), (-1459.8292), 2.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYPointerAnnotation0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      combinedDomainXYPlot0.getRendererForDataset(jDBCXYDataset0);
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      XYSeries xYSeries0 = new XYSeries(false, false, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("PjtDXdug/%");
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, logAxis0, periodAxis0, vectorRenderer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'stroke' argument.");
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, logAxis0, categoryStepRenderer0);
      categoryPlot0.getDatasetRenderingOrder();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      Layer layer0 = Layer.BACKGROUND;
      XYPlot xYPlot1 = new XYPlot();
      xYPlot1.getRenderer(4606);
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(true);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      BasicStroke basicStroke0 = new BasicStroke(1.0F);
      ValueMarker valueMarker0 = new ValueMarker((-1104.7154618), combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT, basicStroke0, 1.0F);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      valueMarker0.setLabelOffsetType(lengthAdjustmentType0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.equals(logAxis0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(true);
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getBaseItemLabelPaint();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.configureRangeAxes();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(69);
      combinedRangeXYPlot0.getIndexOf(xYStepAreaRenderer0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(3);
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainAxisLocation(3, axisLocation0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.removeRangeMarker(15, (Marker) categoryMarker0, layer0, true);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      xYPlot0.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.getRangeTickBandPaint();
      DateAxis dateAxis0 = new DateAxis();
      xYPlot0.getDomainAxisIndex(dateAxis0);
      combinedDomainXYPlot0.getRangeCrosshairValue();
      CategoryMarker categoryMarker1 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      xYPlot0.addRangeMarker((Marker) categoryMarker1, layer0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      Point point0 = new Point();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Eduardo Ramalho", 2.5E9, 0.0, 0.05);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      boolean boolean0 = new Boolean(true);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      combinedDomainXYPlot1.getRendererForDataset(jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.resizeRange((double) 1.0F, 0.9800000000000001);
      ValueMarker valueMarker0 = new ValueMarker(10, dateAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5v~u0GQ5eVbt;og,w");
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(6, layer0);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("_X", (-1459.8292), (-1459.8292), 2.0);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYPointerAnnotation0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      combinedDomainXYPlot0.getRendererForDataset(jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      int int0 = 3;
      CategoryMarker categoryMarker1 = null;
      try {
        categoryMarker1 = new CategoryMarker(false, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'I=\"L%H:2H");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      Point point0 = new Point();
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot1.DEFAULT_CROSSHAIR_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis(10);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 1.0F, 1.0F, 10);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(500);
      logAxis0.exponentLengthToJava2D((-655.94), rectangle2D_Float0, rectangleEdge0);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0.0F, 1.0F, 10, (-1094.39457), combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, valueAxis0.DEFAULT_AXIS_LINE_PAINT, logAxis0.DEFAULT_AXIS_LINE_PAINT);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setDomainAxisLocation((-3303), axisLocation0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      Layer layer0 = Layer.BACKGROUND;
      PiePlot piePlot0 = new PiePlot();
      piePlot0.getLabelLinkStroke();
      Layer layer1 = Layer.BACKGROUND;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      StandardEntityCollection standardEntityCollection1 = new StandardEntityCollection();
      standardEntityCollection1.getEntities();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection1);
      GeneralPath generalPath0 = new GeneralPath(piePlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      logAxis0.setTickMarkOutsideLength(0.0F);
      Point2D point2D0 = generalPath0.getCurrentPoint();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot1.zoomRangeAxes((-4.0), 90.0, plotRenderingInfo0, point2D0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      combinedRangeXYPlot1.indexOf(jDBCXYDataset0);
      combinedRangeXYPlot0.zoomRangeAxes(0.9700000000000001, plotRenderingInfo0, point2D0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0);
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(63, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NumberAxis numberAxis0 = new NumberAxis("");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, numberAxis0);
      RectangleEdge rectangleEdge0 = paintScaleLegend0.getPosition();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      numberAxis0.setUpperBound((-90.709399739));
      AxisSpace axisSpace1 = categoryAxis0.reserveSpace(graphics2D0, xYPlot0, rectangle2D_Double0, rectangleEdge0, axisSpace0);
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace1);
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
      xYPlot0.setDomainAxisLocation(500, (AxisLocation) null, true);
      xYPlot0.getDomainMinorGridlineStroke();
      xYPlot0.setRangeMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      DateTitle dateTitle0 = new DateTitle();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      Rectangle rectangle0 = new Rectangle(point0);
      numberAxis3D0.lengthToJava2D(500, rectangle0, dateTitle0.DEFAULT_POSITION);
      numberAxis3D0.setNegativeArrowVisible(true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getPlotType();
      combinedDomainXYPlot0.getRangeAxisEdge();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.removeAnnotations();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
      Point point1 = new Point();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getQuadrantPaint(0);
      combinedDomainXYPlot1.getRangeGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      BasicStroke basicStroke0 = new BasicStroke(1.0F);
      ValueMarker valueMarker0 = new ValueMarker((-1104.7154618), combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT, basicStroke0, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      valueAxisArray0[2] = (ValueAxis) logAxis0;
      valueAxisArray0[3] = (ValueAxis) logAxis0;
      valueAxisArray0[4] = (ValueAxis) logAxis0;
      valueAxisArray0[5] = (ValueAxis) logAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.ChartColor", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      bufferedImage0.getScaledInstance(43, (-1066), 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JTextField jTextField0 = new JTextField(15);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextField0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getTextBounds(10, (-1222));
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, (Rectangle2D) null, (-1297.268161), basicStroke0, piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT);
      Layer layer1 = Layer.FOREGROUND;
      combinedRangeXYPlot0.drawRangeMarkers(graphics2D0, (Rectangle2D) null, (-1308), layer1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker(456, (Marker) valueMarker0, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(timeSeriesTableModel0);
      stackedAreaRenderer0.notifyListeners(rendererChangeEvent0);
      Stroke stroke0 = stackedAreaRenderer0.getItemOutlineStroke(10, 31, true);
      combinedDomainXYPlot0.setRangeGridlineStroke(stroke0);
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot1.removeDomainMarker((Marker) valueMarker0, layer1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      BasicStroke basicStroke0 = new BasicStroke(1.0F);
      ValueMarker valueMarker0 = new ValueMarker((-1104.7154618), combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT, basicStroke0, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XYSeries xYSeries0 = new XYSeries(1.0F, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, periodAxis0, periodAxis0, vectorRenderer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, logAxis0, levelRenderer0);
      categoryPlot0.getDatasetRenderingOrder();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      Layer layer1 = Layer.BACKGROUND;
      XYPlot xYPlot1 = new XYPlot();
      XYPlot xYPlot2 = new XYPlot();
      xYPlot2.getRenderer(10);
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(false);
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) vectorRenderer0, false);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisLocation();
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer1 = Layer.BACKGROUND;
      Layer layer2 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(2, (Marker) categoryMarker0, layer2);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis3D0, logarithmicAxis0, levelRenderer0);
      categoryPlot0.getDatasetRenderingOrder();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      Layer layer3 = Layer.BACKGROUND;
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRenderer((-41));
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(true);
      combinedRangeXYPlot0.getQuadrantOrigin();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = 0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getSubplots();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker(0, (Marker) null, layer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge(10);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      xYPlot0.mapDatasetToDomainAxis(10, 51);
      AxisLocation.getOpposite(axisLocation0);
      xYPlot0.getRangeAxisEdge();
      xYPlot0.setRangeAxisLocation(10, axisLocation0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Point point0 = new Point();
      Point point1 = chartPanel0.getLocation(point0);
      Point point2 = chartPanel0.translateJava2DToScreen(point1);
      xYPlot0.setQuadrantOrigin(point2);
      xYPlot0.getRenderer();
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      xYPlot1.getOrientation();
      xYPlot1.getDrawingSupplier();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(10.0, (-10.0), 10, 1000000.0, xYPlot0.DEFAULT_CROSSHAIR_STROKE, xYPlot1.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_OUTLINE_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0);
      double double0 = (-957.427317800593);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(1777);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1777, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      logAxis0.setRangeWithMargins(3.141592653589793, 3.141592653589793);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      logAxis0.setAxisLineVisible(false);
      combinedRangeXYPlot0.getRangeGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 1.0F);
      combinedRangeXYPlot0.panRangeAxes(0.05, plotRenderingInfo0, point2D_Float0);
      combinedRangeXYPlot0.canSelectByPoint();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes(484, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2446.661), (-2446.661), "OwwCTyE+");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      combinedRangeXYPlot1.setAxisOffset(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRenderer();
      combinedRangeXYPlot1.getDomainAxis(2143109954);
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(true);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(cyclicNumberAxis0, true);
      combinedRangeXYPlot1.rendererChanged(rendererChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_PAINT;
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(color0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      Integer integer0 = new Integer(15);
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      GeneralPath generalPath0 = new GeneralPath();
      defaultStatisticalCategoryDataset0.clear();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1024, 10, 1024, 10, 10, (-1577), false, true, true, true, true, false, true);
      Rectangle rectangle0 = new Rectangle(53, 1024);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
      combinedRangeXYPlot0.getRendererCount();
      combinedDomainXYPlot0.clearRangeAxes();
      combinedRangeXYPlot0.clearRangeMarkers(5);
      JFreeChart jFreeChart1 = new JFreeChart("Null 'annotation' argument.", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, true);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      BasicStroke basicStroke0 = new BasicStroke(1.0F);
      ValueMarker valueMarker0 = new ValueMarker((-1104.7154618), combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT, basicStroke0, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getPlotInfo();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      ItemLabelPosition itemLabelPosition0 = areaRenderer0.getBasePositiveItemLabelPosition();
      defaultPolarItemRenderer0.setBaseNegativeItemLabelPosition(itemLabelPosition0);
      defaultPolarItemRenderer0.getBaseItemLabelPaint();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MatrixSeries matrixSeries0 = new MatrixSeries("", 88, 10);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      PolarPlot polarPlot0 = new PolarPlot(matrixSeriesCollection0, logAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      combinedRangeXYPlot0.getRangeTickBandPaint();
      DateAxis dateAxis0 = new DateAxis();
      combinedRangeXYPlot0.getDomainAxisIndex((ValueAxis) null);
      double double0 = 0.915;
      ScrollPane scrollPane0 = null;
      try {
        scrollPane0 = new ScrollPane();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XYPlot xYPlot0 = new XYPlot();
      String string0 = xYPlot0.getPlotType();
      AxisSpace axisSpace0 = null;
      boolean boolean0 = true;
      xYPlot0.setFixedDomainAxisSpace(axisSpace0, boolean0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      Hour hour0 = Hour.parseHour(string0);
      String string1 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(xYPlot0.MINIMUM_HEIGHT_TO_DRAW, string1);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      int int0 = 6;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>(int0, comparator0);
      Locale locale0 = Locale.lookup(vector0, priorityQueue0);
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis(string0, hour0, hour0, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      String string0 = xYPlot0.getPlotType();
      xYPlot0.isRangeCrosshairVisible();
      int int0 = 2137;
      BufferedImage bufferedImage0 = new BufferedImage(xYPlot0.MINIMUM_WIDTH_TO_DRAW, int0, xYPlot0.MINIMUM_WIDTH_TO_DRAW);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<SamplingXYLineRenderer> vector0 = null;
      JTree jTree0 = new JTree(vector0);
      int int1 = 1129;
      Rectangle rectangle0 = jTree0.getRowBounds(int1);
      Font font0 = null;
      boolean boolean0 = true;
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, xYPlot0, boolean0);
      boolean boolean1 = true;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, boolean1);
      Point point0 = new Point();
      Point point1 = chartPanel0.getLocation(point0);
      Point point2 = new Point(point1);
      PlotState plotState0 = new PlotState();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        xYPlot0.draw(graphics2D0, rectangle0, point2, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      DateTitle dateTitle0 = new DateTitle();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(10, false);
      combinedDomainXYPlot1.setRenderer(10, (XYItemRenderer) clusteredXYBarRenderer0, false);
      combinedDomainXYPlot1.setFixedDomainAxisSpace((AxisSpace) null, false);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2446.661), (-2446.661), "OwwCTyE+");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot1.setAxisOffset(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRenderer();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.7976931348623157E308, 0.05, 10, 1.7976931348623157E308);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0, true);
      combinedRangeXYPlot1.getDomainAxis(2143109954);
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(true);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0);
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(63, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      NumberAxis numberAxis0 = new NumberAxis("");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, numberAxis0);
      RectangleEdge rectangleEdge0 = paintScaleLegend0.getPosition();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = categoryAxis0.reserveSpace(graphics2D0, xYPlot0, rectangle2D_Double0, rectangleEdge0, axisSpace0);
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace1);
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
      xYPlot0.setDomainAxisLocation(500, (AxisLocation) null, true);
      xYPlot0.getDomainMinorGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      xYPlot0.mapDatasetToDomainAxis(10, 51);
      AxisLocation.getOpposite(axisLocation0);
      xYPlot0.getRangeAxisEdge();
      xYPlot0.setRangeAxisLocation(10, axisLocation0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Point point0 = new Point();
      Point point1 = chartPanel0.getLocation(point0);
      Point point2 = chartPanel0.translateJava2DToScreen(point1);
      xYPlot0.setQuadrantOrigin(point2);
      xYPlot0.getRenderer();
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      PlotOrientation plotOrientation0 = xYPlot1.getOrientation();
      DrawingSupplier drawingSupplier0 = xYPlot1.getDrawingSupplier();
      drawingSupplier0.getNextOutlinePaint();
      xYPlot0.setDrawingSupplier(drawingSupplier0, true);
      xYPlot0.setOrientation(plotOrientation0);
      xYPlot1.getRangeTickBandPaint();
      DateAxis dateAxis0 = new DateAxis();
      xYPlot1.getDomainAxisIndex(dateAxis0);
      xYPlot1.getDomainZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      xYPlot0.mapDatasetToDomainAxis(10, 51);
      AxisLocation.getOpposite(axisLocation0);
      xYPlot0.getRangeAxisEdge();
      xYPlot0.setRangeAxisLocation(10, axisLocation0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Point point0 = new Point();
      Point point1 = chartPanel0.getLocation(point0);
      Point point2 = chartPanel0.translateJava2DToScreen(point1);
      xYPlot0.setQuadrantOrigin(point2);
      xYPlot0.getRenderer();
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      PlotOrientation plotOrientation0 = xYPlot1.getOrientation();
      DrawingSupplier drawingSupplier0 = xYPlot1.getDrawingSupplier();
      xYPlot0.setDrawingSupplier(drawingSupplier0, true);
      xYPlot0.setOrientation(plotOrientation0);
      xYPlot1.getRangeTickBandPaint();
      DateAxis dateAxis0 = new DateAxis();
      xYPlot1.getDomainAxisIndex(dateAxis0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_PAINT;
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(color0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      Integer integer0 = new Integer(15);
      GeneralPath generalPath0 = new GeneralPath();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      xYPlot0.setRangeAxisLocation(10, axisLocation0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", multiplePiePlot0);
      JFreeChart jFreeChart1 = new JFreeChart("-veI=", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1, false);
      Point point0 = new Point();
      Point point1 = chartPanel0.getLocation(point0);
      Point point2 = chartPanel0.translateJava2DToScreen(point1);
      combinedRangeXYPlot0.setQuadrantOrigin(point2);
      xYPlot0.getRenderer();
      Vector<DefaultHeatMapDataset> vector0 = new Vector<DefaultHeatMapDataset>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxes(273, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LogAxis logAxis0 = new LogAxis("w!W|;,[cldOqbPu(,");
      logAxis0.getRange();
      logAxis0.setTickLabelsVisible(false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.canSelectByRegion();
      combinedDomainXYPlot0.setDomainCrosshairVisible(false);
      double double0 = (-4215.0775954);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-79);
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(10, byteArray0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      // Undeclared exception!
      try { 
        lookupOp0.filter((BufferedImage) null, (BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.LookupOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Layer layer0 = Layer.BACKGROUND;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, logAxis0.DEFAULT_TICK_LABEL_PAINT, false);
      combinedRangeXYPlot0.setRenderer(10, (XYItemRenderer) xYDifferenceRenderer0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot1.getRangeAxisLocation((-948));
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      axisLocation1.getOpposite();
      axisLocation0.getOpposite();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(xYDifferenceRenderer0.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.setAxisOffset(logAxis0.DEFAULT_AXIS_LABEL_INSETS);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getRenderer();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(2.0F, 1.0E-8, 1.0F, 0.0F);
      combinedDomainXYPlot1.addAnnotation((XYAnnotation) xYBoxAnnotation0, false);
      combinedRangeXYPlot0.getDomainAxis(2581);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(1378.664);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot2.addDomainMarker((-1431655765), (Marker) valueMarker0, layer0);
      XYSeries xYSeries0 = new XYSeries(1.0E-8, false, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getDomainOrder();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      HistogramDataset histogramDataset0 = new HistogramDataset();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, periodAxis0, periodAxis0, vectorRenderer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, periodAxis0, levelRenderer0);
      DatasetRenderingOrder datasetRenderingOrder0 = categoryPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot1.setDatasetRenderingOrder(datasetRenderingOrder0);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot(periodAxis0);
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot3.getRenderer(0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(3);
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainAxisLocation(3, axisLocation0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer(2);
      combinedDomainXYPlot0.setRenderer(2, (XYItemRenderer) xYBubbleRenderer0);
      combinedDomainXYPlot0.setDomainGridlineStroke(highLowRenderer0.DEFAULT_STROKE);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(xYBubbleRenderer0.DEFAULT_OUTLINE_PAINT);
      ValueMarker valueMarker0 = new ValueMarker(10.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      LinkedList<DefaultWindDataset> linkedList0 = new LinkedList<DefaultWindDataset>();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeDomainMarker(10, (Marker) valueMarker0, layer0, false);
      combinedDomainXYPlot0.getDomainAxisLocation(10);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeAxes();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker(2154, (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      Object[][] objectArray0 = new Object[1][2];
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) combinedDomainXYPlot0;
      objectArray1[2] = (Object) combinedRangeXYPlot0;
      objectArray1[3] = (Object) combinedRangeXYPlot0;
      Object object0 = combinedDomainXYPlot0.clone();
      objectArray1[4] = object0;
      objectArray1[5] = (Object) null;
      Object object1 = combinedRangeXYPlot0.clone();
      objectArray1[6] = object1;
      objectArray0[0] = objectArray1;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Rectangle rectangle0 = jTable0.getCellRect(10, (-75), false);
      GeneralPath generalPath0 = new GeneralPath(rectangle0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot1.setRangeCrosshairPaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot1.setRangeCrosshairStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(3);
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainAxisLocation(3, axisLocation0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer(2);
      combinedDomainXYPlot0.setRenderer(2, (XYItemRenderer) xYBubbleRenderer0);
      combinedDomainXYPlot0.setDomainGridlineStroke(highLowRenderer0.DEFAULT_STROKE);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(xYBubbleRenderer0.DEFAULT_OUTLINE_PAINT);
      ValueMarker valueMarker0 = new ValueMarker(10.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      LinkedList<DefaultWindDataset> linkedList0 = new LinkedList<DefaultWindDataset>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CrosshairState crosshairState0 = new CrosshairState(false);
      crosshairState0.getAnchor();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((double) 3, (double) 2, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot1.equals(combinedDomainXYPlot0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getBaseItemLabelPaint();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setQuadrantPaint((-2151), highLowRenderer0.DEFAULT_OUTLINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-2151) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      BasicStroke basicStroke0 = new BasicStroke(1.0F);
      ValueMarker valueMarker0 = new ValueMarker((-1104.7154618), combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT, basicStroke0, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getPlotInfo();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      ItemLabelPosition itemLabelPosition0 = areaRenderer0.getBasePositiveItemLabelPosition();
      defaultPolarItemRenderer0.setBaseNegativeItemLabelPosition(itemLabelPosition0);
      defaultPolarItemRenderer0.getBaseItemLabelPaint();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setQuadrantPaint(3, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.getDomainGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      xYItemRendererArray0[0] = (XYItemRenderer) xYBoxAndWhiskerRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) xYBoxAndWhiskerRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.zoom(0.93);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      numberAxis3D0.setNegativeArrowVisible(false);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      combinedRangeXYPlot0.getDomainAxisLocation(10);
      combinedRangeXYPlot0.canSelectByPoint();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(multiplePiePlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, xYBoxAndWhiskerRenderer0.DEFAULT_PAINT, logAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      combinedDomainXYPlot0.getRangeCrosshairStroke();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      combinedDomainXYPlot0.plotChanged((PlotChangeEvent) null);
      combinedDomainXYPlot0.setRangeGridlinesVisible(true);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setNegativeArrowVisible(false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      ValueAxis valueAxis0 = combinedDomainXYPlot1.getRangeAxis((-3210));
      combinedDomainXYPlot1.setDomainCrosshairLockedOnData(false);
      Year year0 = new Year((-1628));
      Week week0 = new Week(10, year0);
      Year year1 = new Year();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      combinedDomainXYPlot1.setRangeAxis(1177, (ValueAxis) periodAxis0, true);
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      Rectangle rectangle0 = new Rectangle(point0);
      numberAxis3D0.lengthToJava2D(500, rectangle0, dateTitle0.DEFAULT_POSITION);
      numberAxis3D0.setNegativeArrowVisible(true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      numberAxis3D0.setNegativeArrowVisible(true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      combinedRangeXYPlot0.getDomainAxisLocation(0);
      combinedRangeXYPlot0.canSelectByPoint();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.getRangeZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DrawingSupplier drawingSupplier0 = xYPlot0.getDrawingSupplier();
      xYPlot0.setDrawingSupplier(drawingSupplier0);
      xYPlot0.setRangeAxis(2446, (ValueAxis) null, false);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      JFreeChart jFreeChart0 = new JFreeChart("F", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      xYPlot0.select((double) 2446, (double) 2446, (Rectangle2D) rectangle2D_Double0, (RenderingSource) chartPanel0);
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 680, 4.0, 115.97, 10);
      xYPlot0.setAxisOffset(rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("zsdq", combinedRangeCategoryPlot0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart1 = multiplePiePlot0.getPieChart();
      jFreeChart1.getBorderPaint();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0);
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(63, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      NumberAxis numberAxis0 = new NumberAxis("");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, numberAxis0);
      RectangleEdge rectangleEdge0 = paintScaleLegend0.getPosition();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      AxisSpace axisSpace0 = categoryAxis0.reserveSpace(graphics2D0, xYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace0);
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      combinedDomainXYPlot0.plotChanged((PlotChangeEvent) null);
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setNegativeArrowVisible(true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      numberAxis3D0.hasListener(combinedDomainXYPlot0);
      combinedDomainXYPlot0.getRangeAxis(2);
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot1.getLegendItems();
      combinedDomainXYPlot1.setFixedLegendItems(legendItemCollection0);
      combinedDomainXYPlot1.setDomainCrosshairLockedOnData(true);
      combinedDomainXYPlot0.setRangeAxis(2, (ValueAxis) null, true);
      combinedDomainXYPlot1.setDomainMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedDomainXYPlot0.getWeight();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      combinedDomainXYPlot0.plotChanged((PlotChangeEvent) null);
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setNegativeArrowVisible(true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.getRangeAxis(2);
      combinedDomainXYPlot1.setDomainCrosshairLockedOnData(true);
      combinedDomainXYPlot0.setRangeAxis(2, (ValueAxis) null, true);
      combinedDomainXYPlot1.setDomainMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2446.661), (-2446.661), "OwwCTyE+");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setRangeWithMargins(3.141592653589793, 3.141592653589793);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.clearSelection();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 464.2623742167138, 3.141592653589793, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(1.25, 2.5E7, 2.0F, 2.5E7);
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, true);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot1.drawRangeCrosshair(graphics2D0, rectangle2D0, plotOrientation0, 10, valueAxisArray0[0], combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, logAxis0.DEFAULT_TICK_MARK_PAINT);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot1.setRangeCrosshairPaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot1.setRangeCrosshairStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      axisLocation1.getOpposite();
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(combinedRangeXYPlot0);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      XYSeries xYSeries0 = new XYSeries(10, false, true);
      XYSeries xYSeries1 = xYSeries0.createCopy((-930), (-2140));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      xYSeriesCollection0.getDomainOrder();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, (ValueAxis) null, (ValueAxis) null, vectorRenderer0);
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.isDomainPannable();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedRangeXYPlot1.indexOf(xYSeriesCollection0);
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot1.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      combinedDomainXYPlot0.removeRangeMarker(23, (Marker) categoryMarker0, (Layer) null);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Stroke stroke0 = piePlot3D0.getLabelLinkStroke();
      ValueMarker valueMarker0 = new ValueMarker((-1104.7154618), combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getPlotInfo();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      generalPath0.getCurrentPoint();
      BufferedImage bufferedImage0 = new BufferedImage(383, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Layer layer1 = Layer.BACKGROUND;
      JTable jTable0 = new JTable(484, 500);
      Rectangle rectangle0 = jTable0.getCellRect(500, 3, true);
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 3331.0033, stroke0, piePlot3D0.DEFAULT_LABEL_BACKGROUND_PAINT);
      combinedRangeXYPlot0.getRangeGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, 500, "OwwCTyE+");
      PeriodAxis periodAxis0 = new PeriodAxis("OwwCTyE+");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      TimeZone timeZone0 = TimeZone.getDefault();
      JFreeChart jFreeChart0 = new JFreeChart("?`Xo;fotV)E`zS~RN{", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, false, true);
      Locale locale0 = chartPanel0.getLocale();
      DateAxis dateAxis0 = new DateAxis((String) null, timeZone0, locale0);
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(highLowRenderer0.ZERO, oHLCDataItemArray0);
      XYPlot xYPlot0 = new XYPlot(defaultOHLCDataset0, (ValueAxis) null, (ValueAxis) null, highLowRenderer0);
      xYPlot0.equals((Object) null);
      highLowRenderer0.clearSeriesStrokes(false);
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      xYPlot0.setRenderer(10, (XYItemRenderer) defaultXYItemRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot1.getPieChart();
      xYPlot0.getDomainAxisForDataset(0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      xYPlot0.getWeight();
      combinedDomainXYPlot0.getRenderer();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2446.661), (-2446.661), "OwwCTyE+");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      JFreeChart jFreeChart0 = new JFreeChart("OwwCTyE+", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1009, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JTextField jTextField0 = new JTextField(10);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextField0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getTextBounds(500, 10);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, (Rectangle2D) null, 0.05, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      combinedDomainXYPlot0.getRangeAxisEdge();
      ValueMarker valueMarker0 = new ValueMarker(225.0, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(valueMarker0);
      combinedDomainXYPlot0.markerChanged(markerChangeEvent0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The index value (");
      Stroke stroke0 = null;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getBaseItemLabelPaint();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      numberAxis3D0.setNegativeArrowVisible(true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      combinedRangeXYPlot0.getDomainAxisLocation(500);
      combinedRangeXYPlot0.canSelectByPoint();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, numberAxis3D0.DEFAULT_TICK_MARK_STROKE, xYBoxAndWhiskerRenderer0.DEFAULT_OUTLINE_PAINT, xYBoxAndWhiskerRenderer0.DEFAULT_OUTLINE_PAINT);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("zsdq", combinedRangeXYPlot0);
      Paint paint0 = jFreeChart0.getBorderPaint();
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(paint0);
      combinedRangeXYPlot0.getRangeAxisLocation();
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer1 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addRangeMarker(6, (Marker) categoryMarker0, layer1);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart1 = new JFreeChart("zsdq", combinedRangeCategoryPlot0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlinesVisible(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      combinedDomainXYPlot0.getPlotType();
      LogAxis logAxis0 = new LogAxis();
      combinedDomainXYPlot0.getDataRange(logAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, logAxis0, logAxis0, xYBoxAndWhiskerRenderer0);
      xYPlot0.setRangeGridlineStroke(xYBoxAndWhiskerRenderer0.DEFAULT_OUTLINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.panDomainAxes(525.092788430976, plotRenderingInfo0, (Point2D) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("=EpK?Sd/,Ce!Z[JV", xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      XYImageAnnotation xYImageAnnotation0 = new XYImageAnnotation(1.0F, (-271.0), bufferedImage0);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYImageAnnotation0, true);
      xYPlot0.isRangeCrosshairVisible();
      xYPlot0.getDomainAxis(10);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      moduloAxis0.centerRange(2.0F);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      combinedDomainXYPlot0.equals((Object) null);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      DateTitle dateTitle0 = new DateTitle();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRenderer(1);
      ImageIcon imageIcon0 = new ImageIcon("richard_c_atkinson@ntlworld.com", "Value:");
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("Value:", imageIcon0, false);
      JScrollPane jScrollPane0 = new JScrollPane(jRadioButtonMenuItem0);
      JViewport jViewport0 = jScrollPane0.getViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      combinedDomainXYPlot0.drawDomainTickBands(graphics2D0, rectangle0, vector0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot1.setRangeCrosshairPaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot1.setRangeCrosshairStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      axisLocation1.getOpposite();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      combinedRangeXYPlot1.setRenderer((XYItemRenderer) candlestickRenderer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getQuadrantPaint(3);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("{0GEjY", cyclicNumberAxis0.DEFAULT_RANGE);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(moduloAxis0.DEFAULT_TICK_MARK_PAINT);
      CategoryMarker categoryMarker0 = new CategoryMarker(500);
      combinedDomainXYPlot0.addRangeMarker(3, (Marker) categoryMarker0, (Layer) null, false);
      combinedDomainXYPlot0.clearDomainMarkers(500);
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_BACKGROUND_PAINT;
      combinedDomainXYPlot0.setRangeGridlinePaint(moduloAxis0.DEFAULT_AXIS_LABEL_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(moduloAxis0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.9800000000000001, false);
      combinedDomainXYPlot0.setRenderer(999, (XYItemRenderer) clusteredXYBarRenderer0, true);
      combinedDomainXYPlot0.isRangeZoomable();
      combinedDomainXYPlot1.getRangeGridlinePaint();
      combinedDomainXYPlot0.clearSelection();
      JFreeChart jFreeChart0 = new JFreeChart("{0GEjY", combinedDomainXYPlot1);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2000, 0.8350000000000001, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(Double.POSITIVE_INFINITY, 1279.610868042, 0.4, 2.0F);
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart1 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1, false, false, false, false, true);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      combinedDomainXYPlot1.drawRangeCrosshair(graphics2D0, rectangle2D0, plotOrientation0, 0.5F, moduloAxis0, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, moduloAxis0.DEFAULT_TICK_MARK_PAINT);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlineStroke(xYBoxAndWhiskerRenderer0.DEFAULT_OUTLINE_STROKE);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedDomainXYPlot0.getRangeAxis();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("zsdq", combinedRangeXYPlot0);
      Paint paint0 = jFreeChart0.getBorderPaint();
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(paint0);
      combinedRangeXYPlot0.getRangeAxisLocation();
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(6, (Marker) categoryMarker0, layer1);
      combinedRangeXYPlot0.setRangeCrosshairPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      combinedDomainXYPlot0.equals((Object) null);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(500, false);
      combinedDomainXYPlot0.setRenderer(2, (XYItemRenderer) clusteredXYBarRenderer0, true);
      combinedDomainXYPlot0.isRangeZoomable();
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.getDomainAxisEdge(2);
      combinedDomainXYPlot0.setRangeCrosshairValue((-489.0), true);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      xYPlot0.getDataRange(numberAxis0);
      Point point0 = new Point();
      xYPlot0.setDomainZeroBaselineStroke(numberAxis0.DEFAULT_AXIS_LINE_STROKE);
      JFreeChart jFreeChart0 = new JFreeChart("TfacU4>^(8J~31A= ", yIntervalRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 27, 1, 2607, 1, 0, 0, true, false, false, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 300, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Stack<VectorRenderer> stack0 = new Stack<VectorRenderer>();
      JTree jTree0 = new JTree(stack0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0);
      intervalMarker0.clone();
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(63, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D("");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, numberAxis3D1);
      paintScaleLegend0.getPosition();
      ValueMarker valueMarker0 = new ValueMarker(2.0F, numberAxis3D1.DEFAULT_AXIS_LINE_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      Layer layer1 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      categoryMarker0.setKey(10);
      xYPlot0.addDomainMarker(15, (Marker) categoryMarker0, layer1, true);
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.getDomainMarkers(1, (Layer) null);
      combinedRangeXYPlot0.getRangeMarkers((Layer) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(3);
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainAxisLocation(3, axisLocation0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer(2);
      combinedDomainXYPlot0.setRenderer(2, (XYItemRenderer) xYBubbleRenderer0);
      combinedDomainXYPlot0.setDomainGridlineStroke(highLowRenderer0.DEFAULT_STROKE);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (double) highLowRenderer0.ZERO);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.getDomainMinorGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.configureRangeAxes();
      combinedDomainXYPlot0.configureDomainAxes();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.getPlotArea();
      combinedDomainXYPlot3.drawAnnotations(graphics2D0, (Rectangle2D) null, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("zsdq", combinedRangeXYPlot0);
      Paint paint0 = jFreeChart0.getBorderPaint();
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(paint0);
      combinedRangeXYPlot0.getRangeAxisLocation();
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(6, (Marker) categoryMarker0, layer1);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart1 = new JFreeChart("zsdq", combinedRangeCategoryPlot0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlinesVisible(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      combinedDomainXYPlot0.getPlotType();
      LogAxis logAxis0 = new LogAxis();
      combinedDomainXYPlot0.getDataRange(logAxis0);
      Point point0 = new Point();
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.getDomainAxis(0);
      combinedRangeXYPlot0.isRangeZoomable();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-3587.5237), (-377.6), 1.0, 1.0E8);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 3655, 641, 1896, 3655, 1896, false, false, false, false, true, false);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(10, 10);
      jFreeChart0.draw(graphics2D0, rectangle2D0, chartRenderingInfo0);
      jFreeChart0.addSubtitle((Title) dateTitle0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      Rectangle rectangle0 = new Rectangle(point0);
      numberAxis3D0.lengthToJava2D(500, rectangle0, dateTitle0.DEFAULT_POSITION);
      numberAxis3D0.setNegativeArrowVisible(true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      BufferedImage bufferedImage1 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo1);
      bufferedImage1.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlinesVisible(true);
      combinedDomainXYPlot0.getPlotType();
      combinedDomainXYPlot0.getRangeAxisEdge();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.removeAnnotations();
      TimeSeries timeSeries0 = new TimeSeries(10, "", "T7+Rm@3Xy");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, numberAxis3D0, xYBlockRenderer0);
      // Undeclared exception!
      try { 
        xYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      LogAxis logAxis0 = new LogAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(2.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      xYItemRendererArray0[0] = (XYItemRenderer) xYBoxAndWhiskerRenderer0;
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      // Undeclared exception!
      try { 
        xYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(10);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer1 = Layer.BACKGROUND;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      PeriodAxis periodAxis0 = new PeriodAxis("Y", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.addRangeMarker(10, (Marker) categoryMarker0, layer1);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'layer' not permitted.", combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      Point point0 = new Point();
      combinedRangeXYPlot0.getRangeAxisForDataset(0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Y");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = new CombinedRangeCategoryPlot(logarithmicAxis0);
      JFreeChart jFreeChart1 = new JFreeChart("", combinedRangeCategoryPlot1);
      combinedRangeXYPlot0.isDomainGridlinesVisible();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, periodAxis0);
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setRangeAxisLocation((-3275), axisLocation0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      LogAxis logAxis0 = new LogAxis("qPshCA;S:{soCslNi");
      logAxis0.setRangeWithMargins(1.0E-4, 0.05);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      LogAxis logAxis1 = new LogAxis();
      logAxis1.setAxisLineVisible(false);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot1.getRangeGridlineStroke();
      JFreeChart jFreeChart0 = new JFreeChart("Pv+YW-!IG,fTH", logAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot1, true);
      jFreeChart0.getSubtitles();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis1);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Stroke stroke0 = piePlot3D0.getLabelLinkStroke();
      ValueMarker valueMarker0 = new ValueMarker((-1104.7154618), combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getPlotInfo();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      JFreeChart jFreeChart0 = new JFreeChart(") not recognised.", piePlot3D0.DEFAULT_LABEL_FONT, piePlot3D0, true);
      TextTitle textTitle0 = new TextTitle("dk*8GD-DDJ");
      jFreeChart0.addSubtitle((Title) textTitle0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 4.0, 10, 200.0);
      rectangle2D_Double0.getBounds();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.zoom(58.710028);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      ValueMarker valueMarker1 = new ValueMarker(1.0450000000000002, piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, piePlot3D0.DEFAULT_LABEL_BACKGROUND_PAINT, logAxis0.DEFAULT_TICK_MARK_STROKE, 1.0F);
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker1);
      LinkedList<DefaultWindDataset> linkedList0 = new LinkedList<DefaultWindDataset>();
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Point point0 = new Point();
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.handleClick(10, 768, chartRenderingInfo0);
      point0.setLocation((double) 10, 684.2488888);
      Point point1 = chartPanel0.translateJava2DToScreen(point0);
      xYPlot0.setQuadrantOrigin(point1);
      TextBox textBox0 = new TextBox();
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      xYPlot0.setAxisOffset(rectangleInsets0);
      LogAxis logAxis0 = new LogAxis("ZOOM_OUT_BOTH");
      Range range0 = new Range(0.0F, 0.05);
      Point point2 = new Point();
      xYPlot0.setRangeAxis(1, (ValueAxis) logAxis0, false);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_LEFT;
      xYPlot0.getRangeAxisEdge();
      xYPlot0.setRangeAxisLocation(51, axisLocation0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.lookupSeriesShape(51);
      xYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Point point0 = new Point();
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.handleClick(0, 680, chartRenderingInfo0);
      point0.move(1024, 10);
      point0.setLocation((double) 4, 806.81857716);
      Point point1 = chartPanel0.translateJava2DToScreen(point0);
      xYPlot0.setQuadrantOrigin(point1);
      TextBox textBox0 = new TextBox();
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      xYPlot0.setAxisOffset(rectangleInsets0);
      LogAxis logAxis0 = new LogAxis("ZOOM_RESET_RANGE");
      Range range0 = new Range(6.0, 807);
      Point point2 = new Point();
      xYPlot0.setRangeAxis(0, (ValueAxis) logAxis0, true);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.panDomainAxes(0.05, plotRenderingInfo0, point2);
      xYPlot0.clearAnnotations();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      xYPlot0.getDataRange(numberAxis0);
      Point point0 = new Point();
      xYPlot0.setDomainZeroBaselineStroke(numberAxis0.DEFAULT_AXIS_LINE_STROKE);
      xYPlot0.getDomainAxis((-1));
      xYPlot0.isRangeZoomable();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Object object0 = combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      object0.equals(combinedDomainXYPlot0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.getRangeGridlineStroke();
      combinedRangeXYPlot0.clearDomainAxes();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getBaseItemLabelPaint();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      numberAxis3D0.setNegativeArrowVisible(false);
      combinedRangeXYPlot0.setRangeCrosshairVisible(false);
      combinedRangeXYPlot0.getDomainAxisLocation(10);
      combinedRangeXYPlot0.canSelectByPoint();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot1.DEFAULT_LEGEND_ITEM_BOX, numberAxis0.DEFAULT_AXIS_LINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0, true);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_PAINT;
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(color0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(multiplePiePlot0.DEFAULT_LEGEND_ITEM_CIRCLE, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Integer integer0 = new Integer(15);
      GeneralPath generalPath0 = new GeneralPath();
      defaultStatisticalCategoryDataset0.clear();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1024, 10, 1024, 10, 10, (-1577), false, true, true, true, true, false, true);
      Rectangle rectangle0 = new Rectangle(53, 1024);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
      combinedRangeXYPlot0.getRendererCount();
      combinedDomainXYPlot0.clearRangeAxes();
      combinedRangeXYPlot0.clearRangeMarkers(5);
      JFreeChart jFreeChart1 = new JFreeChart("Null 'annotation' argument.", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(1780, 2607, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawVerticalLine(graphics2D0, rectangle0, 53, xYPlot0.DEFAULT_OUTLINE_STROKE, color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getOrientation();
      int int0 = 270;
      ValueMarker valueMarker0 = new ValueMarker(10, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      boolean boolean0 = true;
      combinedRangeXYPlot0.removeRangeMarker(270, (Marker) valueMarker0, layer0, true);
      combinedRangeXYPlot0.isDomainGridlinesVisible();
      AffineTransform affineTransform0 = new AffineTransform(10, (-1518.8), 10, 3072.56547923, 270, 2397.5);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 10
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("Requires StatisticalCategoryDataset.", numberAxis0.DEFAULT_RANGE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(numberAxis0.DEFAULT_TICK_MARK_PAINT);
      CategoryMarker categoryMarker0 = new CategoryMarker(moduloAxis0.DEFAULT_TICK_UNIT);
      combinedDomainXYPlot0.addRangeMarker(4390, (Marker) categoryMarker0, (Layer) null, true);
      combinedDomainXYPlot0.clearDomainMarkers(3);
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_BACKGROUND_PAINT;
      combinedDomainXYPlot0.setRangeGridlinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(moduloAxis0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(4794.79487262, true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRenderer((-2143197251), (XYItemRenderer) highLowRenderer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 499, 4, 499, (-2601), (-1), 70, false, true, false, true, false, true, false);
      chartPanel0.getBounds();
      DateAxis dateAxis0 = new DateAxis("PROPERTIES");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation((-3973));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      axisLocation0.getOpposite();
      xYPlot0.setRangeZeroBaselineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      xYPlot0.isDomainZoomable();
      xYPlot0.setDomainAxisLocation(axisLocation0);
      xYPlot0.getOrientation();
      IntervalMarker intervalMarker0 = new IntervalMarker((-256.0), 2974.29);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.setDomainCrosshairVisible(false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getSeriesCount();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot((ValueAxis) null);
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      arrowNeedle0.getOutlinePaint();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      xYPlot0.setDomainPannable(true);
      xYPlot0.setDomainZeroBaselinePaint(numberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Paint paint0 = defaultDrawingSupplier0.getNextPaint();
      defaultDrawingSupplier0.getNextFillPaint();
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0F, 0.0F, paint0, xYPlot0.DEFAULT_CROSSHAIR_STROKE, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE, 0.82807374F);
      xYPlot0.addRangeMarker((Marker) intervalMarker0);
      PeriodAxis periodAxis0 = new PeriodAxis(") should be in the range 0 to 3.");
      xYPlot0.setDomainAxis(500, (ValueAxis) periodAxis0, true);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getAxisOffset();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byte byte0 = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)94;
      byte byte1 = (byte)94;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-23);
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "0.0";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(14.0, 14.0, "0.0");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setDomainGridlinesVisible(false);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setAnchorValue(1.0E-8);
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation((-1));
      combinedDomainXYPlot0.setRangeAxisLocation(4698, axisLocation0, true);
      cyclicNumberAxis0.setFixedDimension((-630.3206236));
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(10);
      combinedDomainXYPlot0.addDomainMarker((-930), (Marker) valueMarker0, layer0);
      CategoryAxis categoryAxis0 = new CategoryAxis("java.lang.String");
      JFreeChart jFreeChart0 = new JFreeChart("java.lang.String", multiplePiePlot0);
      Image image0 = JFreeChart.DEFAULT_BACKGROUND_IMAGE;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      Range range0 = new Range(10, 10);
      Range.expandToInclude(range0, 10);
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, range0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(moduloAxis0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      combinedDomainXYPlot0.isDomainPannable();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      XYPlot xYPlot1 = new XYPlot(defaultXYZDataset0, symbolAxis0, symbolAxis0, highLowRenderer0);
      highLowRenderer0.clearSeriesStrokes(true);
      xYPlot0.setRenderer(44, (XYItemRenderer) highLowRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.findRangeBounds(categoryTableXYDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", symbolAxis0.DEFAULT_RANGE);
      moduloAxis0.setRangeAboutValue(0.0, 0.8600000000000001);
      xYPlot1.getDataRange(symbolAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDataset(10);
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) symbolAxis0, true);
      xYPlot0.setDomainGridlinePaint(highLowRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      combinedRangeXYPlot0.getOrientation();
      xYPlot1.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.findRangeBounds(categoryTableXYDataset0);
      DateTitle dateTitle0 = new DateTitle();
      TextTitle textTitle0 = new TextTitle("TfacU4>^(C8J~31A= ");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setDomainGridlinesVisible(true);
      combinedDomainXYPlot0.getRangeAxisCount();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation1, false);
      combinedDomainXYPlot0.getDomainCrosshairPaint();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      moduloAxis0.centerRange(2.0F);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      combinedDomainXYPlot0.equals((Object) null);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(15, 1, 0, 10);
      rectangle2D_Double0.getBounds();
      multiplePiePlot0.zoom(2);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      ValueMarker valueMarker0 = new ValueMarker(10, moduloAxis0.DEFAULT_TICK_MARK_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, 1);
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      LinkedList<DefaultWindDataset> linkedList0 = new LinkedList<DefaultWindDataset>();
      combinedDomainXYPlot0.removeRangeMarker(15, (Marker) valueMarker0, (Layer) null, true);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      xYPlot0.setDomainPannable(true);
      xYPlot0.setDomainZeroBaselinePaint(numberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      xYPlot0.getRangeAxisEdge();
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      defaultDrawingSupplier0.getNextPaint();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1411, 10, 10, 15, 500, 10, true, false, true, false, false, false);
      chartPanel0.getScreenDataArea(10, 10);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setLabelFont(jFreeChart0.DEFAULT_TITLE_FONT);
      piePlot3D0.getSectionOutlineStroke(500);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(xYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, (Stroke) null, piePlot3D0.DEFAULT_OUTLINE_PAINT, piePlot3D0.DEFAULT_OUTLINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(872, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(10);
      combinedDomainXYPlot0.addDomainMarker((-930), (Marker) valueMarker0, layer0);
      CategoryAxis categoryAxis0 = new CategoryAxis("java.lang.String");
      JFreeChart jFreeChart0 = new JFreeChart("java.lang.String", multiplePiePlot0);
      Image image0 = JFreeChart.DEFAULT_BACKGROUND_IMAGE;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.removeAnnotations();
      combinedDomainXYPlot1.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
      Point point0 = new Point();
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot(numberAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.getQuadrantPaint((-930));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-930) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(3);
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainAxisLocation(3, axisLocation0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer(2);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2, (-115.708), (double) xYBubbleRenderer0.ZERO, 75.0);
      rectangle2D_Double0.getBounds();
      CategoryMarker categoryMarker0 = new CategoryMarker(2);
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      multiplePiePlot0.zoom(10);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PropertyResourceBundle propertyResourceBundle0 = (PropertyResourceBundle)PiePlot.localizationResources;
      PiePlot.localizationResources = (ResourceBundle) propertyResourceBundle0;
      Paint paint0 = piePlot3D0.getLabelBackgroundPaint();
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(paint0);
      ValueMarker valueMarker0 = new ValueMarker(0.5F, piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT, xYBubbleRenderer0.DEFAULT_OUTLINE_STROKE, paint0, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      LinkedList<DefaultWindDataset> linkedList0 = new LinkedList<DefaultWindDataset>();
      combinedDomainXYPlot0.getDomainTickBandPaint();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(10);
      combinedDomainXYPlot0.addDomainMarker((-930), (Marker) valueMarker0, layer0);
      CategoryAxis categoryAxis0 = new CategoryAxis("java.lang.String");
      JFreeChart jFreeChart0 = new JFreeChart("java.lang.String", multiplePiePlot0);
      Image image0 = JFreeChart.DEFAULT_BACKGROUND_IMAGE;
      combinedDomainXYPlot2.setDomainTickBandPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      Range range0 = new Range(10, 10);
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, range0);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot(moduloAxis0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedDomainXYPlot1.setDatasetRenderingOrder(datasetRenderingOrder0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      xYPlot0.getRenderer(10);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[8];
      xYItemRendererArray0[0] = null;
      xYItemRendererArray0[1] = null;
      xYPlot0.setOutlineStroke(multiplePiePlot0.DEFAULT_OUTLINE_STROKE);
      xYItemRendererArray0[2] = null;
      xYItemRendererArray0[3] = null;
      xYItemRendererArray0[5] = null;
      xYItemRendererArray0[6] = null;
      xYItemRendererArray0[7] = null;
      xYPlot0.setRenderers(xYItemRendererArray0);
      xYPlot0.setDomainCrosshairStroke(multiplePiePlot0.DEFAULT_OUTLINE_STROKE);
      xYPlot0.setRenderers(xYItemRendererArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addRangeMarker((-1), (Marker) null, layer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-227), (-1), 10, 15, 142, 142, false, false, false, false, false, false, true);
      Rectangle rectangle0 = chartPanel0.getBounds();
      xYPlot0.drawDomainMarkers((Graphics2D) null, rectangle0, 680, (Layer) null);
      xYPlot0.getRenderer(10);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[8];
      xYItemRendererArray0[0] = null;
      xYItemRendererArray0[1] = null;
      xYPlot0.setOutlineStroke(multiplePiePlot0.DEFAULT_OUTLINE_STROKE);
      xYItemRendererArray0[2] = null;
      xYItemRendererArray0[3] = null;
      xYItemRendererArray0[4] = null;
      xYItemRendererArray0[5] = null;
      xYItemRendererArray0[6] = null;
      xYItemRendererArray0[7] = null;
      xYPlot0.setRenderers(xYItemRendererArray0);
      xYPlot0.isDomainZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      xYPlot0.setDomainPannable(true);
      xYPlot0.setDomainZeroBaselinePaint(numberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      xYPlot0.getRangeAxisEdge();
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      defaultDrawingSupplier0.getNextFillPaint();
      defaultDrawingSupplier0.getNextPaint();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1411, 10, 10, 15, 500, 10, true, false, true, false, false, false);
      chartPanel0.getScreenDataArea(10, 10);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getSectionOutlineStroke(500);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(xYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, (Stroke) null, piePlot3D0.DEFAULT_OUTLINE_PAINT, piePlot3D0.DEFAULT_OUTLINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      xYPlot0.canSelectByPoint();
      xYPlot0.getIndexOf(highLowRenderer0);
      combinedRangeXYPlot0.setDomainGridlinePaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.configureDomainAxes();
      xYPlot0.getRangeMinorGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      logAxis0.setRangeWithMargins(3.141592653589793, 3.141592653589793);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      logAxis0.setAxisLineVisible(false);
      combinedRangeXYPlot0.getRangeGridlineStroke();
      JFreeChart jFreeChart0 = new JFreeChart("", logAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      jFreeChart0.getSubtitles();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      combinedRangeXYPlot0.setDomainPannable(true);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxisArray0[0]);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot1.DEFAULT_LEGEND_ITEM_CIRCLE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisIndex(valueAxisArray0[0]);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<NumberTick> vector0 = new Vector<NumberTick>();
      JList<NumberTick> jList0 = new JList<NumberTick>(vector0);
      // Undeclared exception!
      try { 
        multiListUI0.indexToLocation(jList0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot1.equals(combinedDomainXYPlot0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      JFreeChart jFreeChart0 = new JFreeChart("'&O6\u0004%%>#", highLowRenderer0.DEFAULT_VALUE_LABEL_FONT, multiplePiePlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        chartPanel0.translateJava2DToScreen((Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      xYPlot0.setRenderer(500, (XYItemRenderer) clusteredXYBarRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.findRangeBounds((XYDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("TfacU4>^(C8J~31A= ", highLowRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, true);
      jFreeChart0.createBufferedImage(10, 10);
      DateTitle dateTitle0 = new DateTitle();
      TextTitle textTitle0 = new TextTitle("TfacU4>^(C8J~31A= ");
      jFreeChart0.addSubtitle((Title) dateTitle0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setRangeGridlineStroke(numberAxis0.DEFAULT_TICK_MARK_STROKE);
      highLowRenderer0.lookupSeriesOutlinePaint(485);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      xYPlot0.setDataset((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      logAxis0.setRangeWithMargins(3.141592653589793, 3.141592653589793);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      logAxis0.setAxisLineVisible(false);
      combinedRangeXYPlot0.getRangeGridlineStroke();
      JFreeChart jFreeChart0 = new JFreeChart("", logAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      jFreeChart0.createBufferedImage(465, 10, chartRenderingInfo0);
      jFreeChart0.getSubtitles();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      valueAxisArray0[2] = (ValueAxis) logAxis0;
      DateAxis dateAxis0 = new DateAxis();
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      valueAxisArray0[2] = (ValueAxis) logAxis0;
      valueAxisArray0[3] = (ValueAxis) logAxis0;
      valueAxisArray0[4] = (ValueAxis) logAxis0;
      valueAxisArray0[5] = (ValueAxis) logAxis0;
      valueAxisArray0[6] = (ValueAxis) logAxis0;
      valueAxisArray0[2] = (ValueAxis) logAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      PriorityQueue<LegendItemCollection> priorityQueue0 = new PriorityQueue<LegendItemCollection>();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.getRangeAxisForDataset((-122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -122 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      xYPlot0.setDomainPannable(true);
      xYPlot0.setDomainZeroBaselinePaint(numberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      combinedRangeXYPlot0.setRangeTickBandPaint(numberAxis0.DEFAULT_TICK_MARK_PAINT);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(xYPlot0.DEFAULT_LEGEND_ITEM_BOX, basicStroke0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getRangeAxisIndex(numberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<NumberTick> vector0 = new Vector<NumberTick>();
      JList<NumberTick> jList0 = new JList<NumberTick>(vector0);
      // Undeclared exception!
      try { 
        multiListUI0.indexToLocation(jList0, (-1363));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("TitleEntity: ");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.setRangeCrosshairValue(2644.41778025);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(500);
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setDomainAxisLocation((-2601), axisLocation1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0);
      xYPlot0.equals(axisLocation0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(1778, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot0.getPieChart();
      LogAxis logAxis0 = new LogAxis((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot1.setDomainAxis((ValueAxis) logAxis0);
      combinedDomainXYPlot0.setDomainCrosshairPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot2.clearDomainMarkers();
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      combinedDomainXYPlot0.getDomainAxisLocation();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot4 = new CombinedDomainXYPlot();
      combinedDomainXYPlot4.setRangeZeroBaselinePaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot1.setDomainGridlinesVisible(true);
      combinedDomainXYPlot1.getRangeAxisCount();
      combinedDomainXYPlot1.getDatasetRenderingOrder();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.findRangeBounds(categoryTableXYDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("TfacU4>^(C8J~31A= ", highLowRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, false);
      jFreeChart0.createBufferedImage(500, 1058);
      DateTitle dateTitle0 = new DateTitle();
      TextTitle textTitle0 = new TextTitle("TfacU4>^(C8J~31A= ");
      jFreeChart0.addSubtitle((Title) textTitle0);
      JFreeChart jFreeChart1 = new JFreeChart((String) null, xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1, 1364, 790, 15, 15, 492, 790, false, false, false, false, false, true, true);
      Rectangle rectangle0 = new Rectangle(500, 15);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
      combinedRangeXYPlot0.getRendererCount();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeAxes();
      combinedRangeXYPlot0.getRangeTickBandPaint();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Vs]q/>G^i<;FU9'6Hqc");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker(500, (Marker) categoryMarker0, (Layer) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      float[][] floatArray0 = new float[5][7];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = (float) 10;
      floatArray2[1] = 1.0F;
      floatArray2[2] = 1.0F;
      floatArray2[3] = (float) 10;
      floatArray2[4] = (float) 10;
      floatArray2[5] = 1.0F;
      floatArray2[6] = (float) 10;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = (float) 10;
      floatArray3[1] = (float) 10;
      floatArray3[2] = (float) 10;
      floatArray3[3] = (float) 10;
      floatArray3[4] = (float) 10;
      floatArray3[5] = (float) 10;
      floatArray3[6] = 1.0F;
      floatArray3[7] = (float) 10;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[9];
      floatArray4[0] = (float) 10;
      floatArray4[1] = (float) 10;
      floatArray4[2] = 2043.2979F;
      floatArray4[3] = 1.0F;
      floatArray4[4] = (float) 10;
      floatArray4[5] = (float) 10;
      floatArray4[6] = 1.0F;
      floatArray4[7] = 1.0F;
      floatArray4[8] = 2.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      floatArray5[0] = (float) 10;
      floatArray5[1] = (float) 10;
      floatArray5[2] = 2043.2979F;
      floatArray0[4] = floatArray5;
      PeriodAxis periodAxis0 = new PeriodAxis("(");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, periodAxis0, periodAxis0);
      Stroke stroke0 = fastScatterPlot0.getRangeGridlineStroke();
      combinedRangeXYPlot0.setDomainGridlineStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setBackgroundImageAlignment(35);
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 10, xYPlot0.DEFAULT_GRIDLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.isRangePannable();
      xYPlot0.isDomainCrosshairVisible();
      xYPlot0.addDomainMarker(35, (Marker) intervalMarker0, layer0, false);
      Boolean boolean0 = new Boolean(false);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getSeriesOutlineStroke(10);
      // Undeclared exception!
      try { 
        xYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0);
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(63, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds2D();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      NumberAxis numberAxis0 = new NumberAxis("");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, numberAxis0);
      paintScaleLegend0.getPosition();
      combinedDomainXYPlot0.configureRangeAxes();
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getDomainAxisIndex(numberAxis0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals((Object) null);
      highLowRenderer0.clearSeriesStrokes(true);
      xYPlot0.setRenderer(9999, (XYItemRenderer) highLowRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.findRangeBounds(categoryTableXYDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("TfacU4>^(C8J~31A= ", yIntervalRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, true);
      jFreeChart0.createBufferedImage(9999, 10);
      DateTitle dateTitle0 = new DateTitle();
      TextTitle textTitle0 = new TextTitle("TfacU4>^(C8J~31A= ");
      textTitle0.equals(dateTitle0);
      jFreeChart0.addSubtitle((Title) textTitle0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setRangeGridlineStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      double double0 = (-1.0);
      double double1 = (-98.8059953699143);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      GeneralPath generalPath0 = null;
      try {
        generalPath0 = new GeneralPath(10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // winding rule must be WIND_EVEN_ODD or WIND_NON_ZERO
         //
         verifyException("java.awt.geom.Path2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(3);
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainAxisLocation(3, axisLocation0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer(2);
      combinedDomainXYPlot0.setRenderer(2, (XYItemRenderer) xYBubbleRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot0.getPieChart();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (double) highLowRenderer0.ZERO);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.clearDomainMarkers();
      combinedDomainXYPlot1.getDomainMinorGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.configureRangeAxes();
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot1.getDomainAxisIndex(cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.findRangeBounds(categoryTableXYDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("TfacU4>^(C8J~31A= ", highLowRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, false);
      jFreeChart0.createBufferedImage(500, 1058);
      DateTitle dateTitle0 = new DateTitle();
      TextTitle textTitle0 = new TextTitle("TfacU4>^(C8J~31A= ");
      jFreeChart0.addSubtitle((Title) textTitle0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setRangeGridlineStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      highLowRenderer0.lookupSeriesOutlinePaint(1058);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      xYPlot0.setDataset((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer(2);
      combinedDomainXYPlot0.setRenderer(2, (XYItemRenderer) xYBubbleRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot0.getPieChart();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (double) highLowRenderer0.ZERO);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.clearDomainMarkers();
      combinedDomainXYPlot1.getDomainMinorGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.configureRangeAxes();
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot1.getDomainAxisIndex(cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      highLowRenderer0.clearSeriesStrokes(true);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.findRangeBounds(categoryTableXYDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("N", (Range) null);
      moduloAxis0.setRangeAboutValue(10.0, (double) highLowRenderer0.ZERO);
      xYPlot0.getDataRange(moduloAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDataset(474);
      xYPlot0.setDomainGridlinePaint(moduloAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedRangeXYPlot0.getOrientation();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0);
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(63, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds2D();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      NumberAxis numberAxis0 = new NumberAxis("");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, numberAxis0);
      paintScaleLegend0.getPosition();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getBaseFillPaint();
      Stroke stroke0 = xYPlot0.getDomainCrosshairStroke();
      IntervalMarker intervalMarker1 = new IntervalMarker(0.0F, 0.05, paint0, stroke0, xYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      combinedDomainXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis3D0);
      combinedDomainXYPlot0.getRangeMinorGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_PAINT;
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(color0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(multiplePiePlot0.DEFAULT_LEGEND_ITEM_CIRCLE, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Integer integer0 = new Integer(15);
      GeneralPath generalPath0 = new GeneralPath();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1024, 10, 1024, 10, 10, (-1577), false, true, true, true, true, false, true);
      Rectangle rectangle0 = new Rectangle(53, 1024);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
      combinedRangeXYPlot0.getRendererCount();
      combinedDomainXYPlot0.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(299.571966312, 1.0F, 10.0, 15, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      combinedRangeXYPlot0.getDomainAxisEdge();
      BasicStroke basicStroke0 = new BasicStroke(1983.0996F);
      combinedRangeXYPlot0.setOutlineStroke(basicStroke0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedRangeXYPlot0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      ChartChangeEventType chartChangeEventType0 = axisChangeEvent0.getType();
      plotChangeEvent0.setType(chartChangeEventType0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker((-2746.864515));
      combinedDomainXYPlot0.addDomainMarker((-930), (Marker) valueMarker0, layer0);
      CategoryAxis categoryAxis1 = new CategoryAxis("");
      JFreeChart jFreeChart0 = new JFreeChart("", multiplePiePlot0);
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset2 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      ModuloAxis moduloAxis0 = new ModuloAxis("java.lang.String", (Range) null);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.findRangeBounds(categoryTableXYDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("TfacU4>^(C8J~31A= ", (Range) null);
      moduloAxis0.setRangeAboutValue(1.0E-8, 10);
      xYPlot0.getDataRange(numberAxis0);
      Point point0 = new Point();
      xYPlot0.setDomainZeroBaselineStroke(numberAxis0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) numberAxis0);
      combinedDomainXYPlot0.setDomainCrosshairPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      combinedDomainXYPlot0.getDomainAxisLocation();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot1.setDomainGridlinesVisible(true);
      combinedDomainXYPlot1.getRangeAxisCount();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 500, 10, (-1386), 10, 10, false, false, true, true, false, false);
      Point point0 = chartPanel0.getLocation();
      xYPlot0.panDomainAxes(0.9, (PlotRenderingInfo) null, point0);
      xYPlot0.getDomainAxisForDataset(3);
      xYPlot0.getWeight();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      logAxis0.setTickUnit(numberTickUnit0);
      logAxis0.setFixedAutoRange(0.8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.getDomainAxisEdge();
      combinedRangeXYPlot0.getDomainAxisLocation(500);
      combinedRangeXYPlot0.isRangeZeroBaselineVisible();
      combinedRangeXYPlot0.getSeriesRenderingOrder();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, false);
      xYItemRendererArray0[0] = (XYItemRenderer) xYLineAndShapeRenderer0;
      String string0 = "org.jfree.chart.title.ShortTextTitle";
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        DateFormat.getDateInstance(1742, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1742
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      xYPlot0.getRangeAxisEdge();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.removeAnnotations();
      xYPlot0.setRenderer((XYItemRenderer) highLowRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("L)<NUr+O.Rbm7n~|Ho", xYPlot0);
      LinkedList<DateTick> linkedList0 = new LinkedList<DateTick>();
      jFreeChart0.setSubtitles(linkedList0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Point point0 = new Point();
      Point point1 = chartPanel0.getLocation(point0);
      chartPanel0.translateJava2DToScreen(point0);
      xYPlot0.setQuadrantOrigin(point1);
      xYPlot0.getAnnotations();
      xYPlot0.clearRangeAxes();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0, (-3551.694643703), 10, (-452.44548));
      xYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0, true);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.renderer.category.CategoryStepRenderer$State", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1411, 10, 1411, 10, 500, 10, true, true, true, true, true, true, true);
      chartPanel0.getBounds();
      DateAxis dateAxis0 = new DateAxis("SAVE");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation(1641);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      axisLocation0.getOpposite();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.isDomainZoomable();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedRangeXYPlot0.getOrientation();
      IntervalMarker intervalMarker0 = new IntervalMarker(1411, 9999);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.setDomainCrosshairVisible(true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.getDataset((-3563));
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      ObjectList objectList0 = new ObjectList(10);
      xYPlot0.equals(objectList0);
      highLowRenderer0.clearSeriesStrokes(false);
      int int0 = (-2581);
      // Undeclared exception!
      try { 
        xYPlot0.setRenderer((-2581), (XYItemRenderer) highLowRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.setRangeCrosshairPaint(numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      combinedRangeXYPlot0.setRangeCrosshairStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.setRangePannable(false);
      AxisLocation.getOpposite(axisLocation0);
      byte[] byteArray0 = new byte[1];
      axisLocation0.getOpposite();
      byte byte0 = (byte) (-109);
      int int0 = 5127;
      numberAxis3D0.setAutoRange(true);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1411, 22, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.findRangeBounds(categoryTableXYDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("TfacU4>^(C8J~31A= ", highLowRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, false);
      jFreeChart0.createBufferedImage(500, 1058);
      DateTitle dateTitle0 = new DateTitle();
      TextTitle textTitle0 = new TextTitle("TfacU4>^(C8J~31A= ");
      jFreeChart0.addSubtitle((Title) textTitle0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setRangeGridlineStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setDomainCrosshairPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      combinedDomainXYPlot0.getDomainAxisLocation();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.getDataset();
      // Undeclared exception!
      try { 
        xYPlot0.getRangeAxisForDataset((-1159));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1159 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.plotChanged((PlotChangeEvent) null);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
      intervalMarker0.setLabel("TimePeriodAnchor.MIDDLE");
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(500);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
      combinedRangeXYPlot0.clearRangeMarkers();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) null);
      JFreeChart jFreeChart0 = new JFreeChart("cQhIPr!", combinedDomainCategoryPlot0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      Rectangle rectangle0 = new Rectangle(point0);
      numberAxis3D0.lengthToJava2D(500, rectangle0, dateTitle0.DEFAULT_POSITION);
      numberAxis3D0.setNegativeArrowVisible(true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlinesVisible(true);
      combinedDomainXYPlot0.getPlotType();
      combinedDomainXYPlot0.getRangeAxisEdge();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.removeAnnotations();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) xYBlockRenderer0);
      Point point1 = new Point();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getQuadrantPaint(1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      moduloAxis0.centerRange(2.0F);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      moduloAxis0.setTickLabelInsets(thermometerPlot0.DEFAULT_INSETS);
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      combinedDomainXYPlot0.equals((Object) null);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(15, 1, 0, 10);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      ValueMarker valueMarker0 = new ValueMarker(10, moduloAxis0.DEFAULT_TICK_MARK_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, 1);
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      LinkedList<DefaultWindDataset> linkedList0 = new LinkedList<DefaultWindDataset>();
      combinedDomainXYPlot0.drawRangeTickBands(graphics2D0, rectangle0, linkedList0);
      combinedDomainXYPlot0.removeRangeMarker((Marker) valueMarker0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_LEFT;
      xYPlot0.getRangeAxisEdge();
      xYPlot0.setRangeAxisLocation(33, axisLocation0);
      Week week0 = new Week(33, 33);
      PeriodAxis periodAxis0 = new PeriodAxis("hqKd}-#T;m4^bG-*\"", week0, week0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(33, 10, 500, 500);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
      combinedRangeXYPlot0.setRangeCrosshairVisible(false);
      combinedRangeXYPlot0.getDomainAxisLocation(500);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clone();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.setRangeCrosshairValue(10.0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 63.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.setRangeGridlinesVisible(false);
      combinedDomainXYPlot0.getPlotType();
      combinedDomainXYPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = null;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 500, 1, 2000, 10, false, true, true, false, true, false);
      Point point0 = chartPanel0.getLocation();
      combinedDomainXYPlot0.panDomainAxes(0.0, plotRenderingInfo0, point0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset(2000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 2000 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      xYPlot0.getRangeAxisEdge();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.removeAnnotations();
      xYPlot0.setRenderer((XYItemRenderer) highLowRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("L)<NUr+O.Rbm7n~|Ho", xYPlot0);
      LinkedList<DateTick> linkedList0 = new LinkedList<DateTick>();
      jFreeChart0.setSubtitles(linkedList0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Point point0 = new Point();
      chartPanel0.getLocation(point0);
      chartPanel0.translateJava2DToScreen(point0);
      Point point1 = chartPanel0.getLocation(point0);
      xYPlot0.setQuadrantOrigin(point1);
      xYPlot0.getAnnotations();
      xYPlot0.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.plotChanged((PlotChangeEvent) null);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
      intervalMarker0.setLabel("TimePeriodAnchor.MIDDLE");
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot2.addDomainMarker(3, (Marker) intervalMarker0, layer1);
      CategoryAxis categoryAxis0 = new CategoryAxis("TimePeriodAnchor.MIDDLE");
      String string0 = "";
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot1);
      Image image0 = JFreeChart.DEFAULT_BACKGROUND_IMAGE;
      jFreeChart0.setBackgroundImage((Image) null);
      jFreeChart0.setNotify(true);
      numberAxis3D0.setNegativeArrowVisible(true);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot(numberAxis3D0);
      ValueAxis valueAxis0 = combinedDomainXYPlot1.getRangeAxis(15);
      Range range0 = Range.shift(valueAxis0.DEFAULT_RANGE, (double) 10, true);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setDomainAxis((-1), (ValueAxis) moduloAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator();
      highLowRenderer0.setLegendItemToolTipGenerator(standardXYSeriesLabelGenerator0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, moduloAxis0, highLowRenderer0);
      highLowRenderer0.clearSeriesStrokes(false);
      highLowRenderer0.setAutoPopulateSeriesPaint(false);
      combinedDomainXYPlot0.setRenderer(485, (XYItemRenderer) highLowRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.findRangeBounds(categoryTableXYDataset0);
      moduloAxis0.setRangeAboutValue(15.0, 10.0);
      combinedDomainXYPlot0.getDataRange(moduloAxis0);
      Point point0 = new Point();
      combinedDomainXYPlot0.getDatasetCount();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      AxisLocation.getOpposite(axisLocation0);
      xYPlot0.getRangeAxisEdge();
      xYPlot0.setRangeAxisLocation(39, axisLocation0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.lookupSeriesShape(39);
      stackedXYAreaRenderer0.removeAnnotations();
      xYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
      Point point0 = new Point();
      TextBox textBox0 = new TextBox();
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      xYPlot0.setAxisOffset(rectangleInsets0);
      PeriodAxis periodAxis0 = new PeriodAxis(">:!u(MWbHqS;Zn}YIJ ");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      combinedDomainXYPlot0.getDomainAxisLocation();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(periodAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.plotChanged((PlotChangeEvent) null);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
      intervalMarker0.setLabel("TimePeriodAnchor.MIDDLE");
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot2.addDomainMarker(3, (Marker) intervalMarker0, layer1);
      CategoryAxis categoryAxis0 = new CategoryAxis("TimePeriodAnchor.MIDDLE");
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot1);
      Image image0 = JFreeChart.DEFAULT_BACKGROUND_IMAGE;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      categoryTableXYDataset1.getDomainBounds(true);
      ModuloAxis moduloAxis0 = new ModuloAxis(">d-}ELv7;3s5=", (Range) null);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot((ValueAxis) null);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedDomainXYPlot3.setDatasetRenderingOrder(datasetRenderingOrder0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      combinedDomainXYPlot1.getDomainMinorGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getDomainAxisLocation();
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(10);
      Layer layer0 = Layer.BACKGROUND;
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeMarkers(layer0);
      combinedDomainXYPlot1.getRangeAxisCount();
      xYPlot0.setRangeZeroBaselineStroke(xYBarRenderer0.DEFAULT_STROKE);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(457.2483096, 0.05, 1.0F, (-77.6819645733693), combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      combinedRangeXYPlot0.getDomainAxisLocation(500);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      highLowRenderer0.clearSeriesStrokes(true);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      yIntervalRenderer0.findRangeBounds(categoryTableXYDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("N", (Range) null);
      moduloAxis0.setRangeAboutValue(10.0, (double) highLowRenderer0.ZERO);
      xYPlot0.getDataRange(moduloAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      xYPlot0.setInsets(moduloAxis0.DEFAULT_TICK_LABEL_INSETS, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 36, 10, 10, 500, 2301, 3, true, false, true, true, true, true);
      chartPanel0.hasFocus();
      chartPanel0.getZoomRectangle();
      xYPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.setRangeCrosshairPaint(numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      combinedRangeXYPlot0.setRangeCrosshairStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot1.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot1.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, 0.0F);
      combinedDomainXYPlot0.addDomainMarker((-4775), (Marker) valueMarker0, layer0);
      CategoryAxis categoryAxis0 = new CategoryAxis("Empty list not permitted.");
      JFreeChart jFreeChart0 = new JFreeChart("Empty list not permitted.", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.5F);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, numberAxis3D1);
      paintScaleLegend0.getPosition();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot1.getRangeAxis(500);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.clearSeriesStrokes(false);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer(2);
      combinedDomainXYPlot0.setRenderer(2, (XYItemRenderer) xYBubbleRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot0.getPieChart();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (double) highLowRenderer0.ZERO);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.clearDomainMarkers();
      combinedDomainXYPlot1.getDomainMinorGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getDomainAxisLocation();
      combinedDomainXYPlot2.isRangeMinorGridlinesVisible();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.configureRangeAxes();
      combinedDomainXYPlot0.configureDomainAxes();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      moduloAxis0.centerRange(2.0F);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      moduloAxis0.setTickLabelInsets(thermometerPlot0.DEFAULT_INSETS);
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      combinedDomainXYPlot0.equals((Object) null);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(15, 1, 0, 10);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      bufferedImage0.createGraphics();
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      ValueMarker valueMarker0 = new ValueMarker(10, moduloAxis0.DEFAULT_TICK_MARK_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, 1);
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      LinkedList<DefaultWindDataset> linkedList0 = new LinkedList<DefaultWindDataset>();
      combinedDomainXYPlot0.drawRangeTickBands(graphics2D0, rectangle0, linkedList0);
      combinedDomainXYPlot0.getWeight();
      combinedDomainXYPlot0.isRangePannable();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(2.0F);
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0);
      combinedRangeXYPlot0.setRangeAxis(500, (ValueAxis) cyclicNumberAxis0);
      Vector<XYDrawableAnnotation> vector0 = new Vector<XYDrawableAnnotation>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes(500, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      combinedDomainXYPlot0.equals((Object) null);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      jFreeChart0.addSubtitle((Title) dateTitle0);
      combinedDomainXYPlot0.clearDomainMarkers();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("David Li");
      numberAxis3D0.setLeftArrow(multiplePiePlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot1.getRangeAxis(945);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getRangeMarkers(500, layer0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      combinedDomainXYPlot1.getDomainMinorGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getDomainAxisLocation();
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.setRenderer((-7), (XYItemRenderer) xYBarRenderer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      Color color0 = (Color)combinedDomainCategoryPlot0.getRangeMinorGridlinePaint();
      dateTitle0.setPaint(color0);
      jFreeChart0.addSubtitle((Title) dateTitle0);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      combinedDomainXYPlot1.getDomainAxisLocation();
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(15);
      combinedDomainXYPlot0.setRenderer(1988, (XYItemRenderer) xYBarRenderer0, false);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      CategoryAxis categoryAxis0 = new CategoryAxis("TimePeriodAnchor.MIDDLE");
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1999, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, logAxis0);
      RectangleEdge rectangleEdge0 = paintScaleLegend0.getPosition();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      categoryAxis0.reserveSpace(graphics2D0, combinedDomainXYPlot0, rectangle2D_Double1, rectangleEdge0, (AxisSpace) null);
      combinedDomainXYPlot0.setDomainAxis(500, (ValueAxis) logAxis0);
      combinedDomainXYPlot0.getRangeMinorGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      AxisLocation.getOpposite(axisLocation0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0);
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.addDomainMarker(10, (Marker) intervalMarker0, layer0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPlot0);
      jFreeChart0.createBufferedImage(63, 10);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0);
      JFreeChart jFreeChart1 = new JFreeChart("[WB)C/L{yC]lU", xYPlot0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      moduloAxis0.centerRange(2.0F);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.getBaseToolTipGenerator();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Null 'origin' argument.", 0.05, 1382.960285, 10);
      stackedAreaRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      statisticalBarRenderer0.removeAnnotations();
      statisticalBarRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation((-44));
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      axisLocation0.getOpposite();
      combinedDomainXYPlot0.setRangeZeroBaselineStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.isDomainZoomable();
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedDomainXYPlot0.getOrientation();
      IntervalMarker intervalMarker0 = new IntervalMarker(500, 0.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setDomainCrosshairVisible(true);
      combinedDomainXYPlot0.getSeriesCount();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getBaseItemLabelPaint();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Graphics2D graphics2D0 = null;
      int int0 = 1662;
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(1662, (-4307.0570598), (double) 10);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      combinedRangeXYPlot0.getDomainGridlinePaint();
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform1, false, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4307.0570598);
      doubleArray0[3] = (double) 10;
      affineTransform1.transform(doubleArray0, 1404, doubleArray0, (-1190), (-1243));
      defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_FONT.getStringBounds("O\". t", fontRenderContext0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      combinedRangeXYPlot0.getDomainAxisEdge();
      BasicStroke basicStroke0 = new BasicStroke(1983.0996F);
      combinedRangeXYPlot0.setOutlineStroke(basicStroke0);
      combinedRangeXYPlot0.getRangeGridlineStroke();
      combinedRangeXYPlot0.isDomainZoomable();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.equals(combinedRangeXYPlot0);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(926, 10);
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1983.0996F, 0.0, 10.0, 63.0);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot1.setDomainMinorGridlinePaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      BasicStroke basicStroke1 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(rectangle2D_Double0, basicStroke1, valueAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot1.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      combinedRangeXYPlot0.getRangeAxisIndex(valueAxis0);
      GeneralPath generalPath0 = new GeneralPath();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 3, 500, (-1), (-483), (-999), 10, false, true, true, true, true, false, true);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle2D_Double0, (RenderingSource) chartPanel0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      numberAxis3D0.setNegativeArrowVisible(true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, true);
      Rectangle rectangle0 = chartPanel0.getBounds();
      combinedDomainCategoryPlot0.getFixedRangeAxisSpace();
      AxisSpace axisSpace0 = categoryAxis0.reserveSpace(graphics2D0, multiplePiePlot0, rectangle0, dateTitle0.DEFAULT_POSITION, (AxisSpace) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(420, 10.0, (-1224.6793357755832), 0.0);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      combinedDomainXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D0, axisSpace0);
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset(1024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1024 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRenderer(64);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker((-2072.68520785439), (-1250.19));
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(500, (Marker) intervalMarker0, layer0);
      Rectangle2D rectangle2D0 = null;
      JFreeChart jFreeChart0 = new JFreeChart("'jdqO~%#]", combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      Point point0 = new Point();
      JEditorPane jEditorPane0 = new JEditorPane();
      combinedRangeXYPlot0.getDomainMarkers(81, layer0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset((-775));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -775 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeMinorGridlinesVisible(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 10, 10, 10, false, false, false, false, false, false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getDomainAxisLocation();
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ZOOM_IN_RANGE");
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.configureRangeAxes();
      combinedDomainXYPlot1.getDomainZeroBaselineStroke();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 10;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1305.254F;
      floatArray0[4] = (-2492.5781F);
      floatArray0[5] = (float) 10;
      floatArray0[6] = (float) 10;
      floatArray0[7] = (float) 10;
      AffineTransform affineTransform0 = new AffineTransform(floatArray0);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform1, 2057);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 2057
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue(2602.06);
      combinedDomainXYPlot0.plotChanged((PlotChangeEvent) null);
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      combinedDomainXYPlot0.getPlotType();
      combinedDomainXYPlot0.getRangeAxisEdge();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.removeAnnotations();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(489);
      xYPlot0.setRenderer((XYItemRenderer) xYStepAreaRenderer0);
      Point point0 = new Point();
      xYPlot0.setRangeCrosshairValue((-366.7), true);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setDomainCrosshairPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      combinedDomainXYPlot0.getDomainAxisLocation();
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getDomainAxisLocation();
      combinedDomainXYPlot1.isRangeMinorGridlinesVisible();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.configureRangeAxes();
      combinedDomainXYPlot0.configureDomainAxes();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-1099.699), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertNotNull(moduloAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      moduloAxis0.centerRange(2.0F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertNotNull(thermometerPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      boolean boolean0 = combinedDomainXYPlot0.equals((Object) null);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(boolean0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      DateTitle dateTitle0 = new DateTitle();
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertNull(dateTitle0.getURLText());
      assertTrue(dateTitle0.getNotify());
      assertTrue(dateTitle0.isVisible());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) dateTitle0);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertNull(dateTitle0.getURLText());
      assertTrue(dateTitle0.getNotify());
      assertTrue(dateTitle0.isVisible());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(dateTitle0.visible);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertNotNull(graphics2D0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(15, 1, 0, 10);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(10, rectangle0.height);
      assertEquals(15, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(1, rectangle0.y);
      
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(10, rectangle0.height);
      assertEquals(15, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(1, rectangle0.y);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      
      ValueMarker valueMarker0 = new ValueMarker(10, moduloAxis0.DEFAULT_TICK_MARK_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, 1);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      boolean boolean1 = combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      LinkedList<DefaultWindDataset> linkedList0 = new LinkedList<DefaultWindDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      combinedDomainXYPlot0.drawRangeTickBands(graphics2D0, rectangle0, linkedList0);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(10, rectangle0.height);
      assertEquals(15, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(1, rectangle0.y);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.getDomainCrosshairPaint();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      combinedRangeXYPlot0.getDomainAxisEdge();
      BasicStroke basicStroke0 = new BasicStroke(1983.0996F);
      combinedRangeXYPlot0.setOutlineStroke(basicStroke0);
      Stroke stroke0 = combinedRangeXYPlot0.getRangeGridlineStroke();
      combinedRangeXYPlot0.isDomainZoomable();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.equals(combinedRangeXYPlot0);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(926, 10);
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1983.0996F, 0.0, 10.0, 63.0);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot1.getDomainMarkers(layer0);
      combinedDomainXYPlot1.setDomainMinorGridlinePaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      BasicStroke basicStroke1 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(thermometerPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, stroke0, valueAxis0.DEFAULT_TICK_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.getPadding();
      combinedDomainXYPlot0.equals((Object) null);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(15, 1, 0, 10);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      combinedDomainXYPlot0.getDomainAxisLocation();
      combinedDomainXYPlot0.drawZeroRangeBaseline(graphics2D0, rectangle2D_Double0);
      combinedDomainXYPlot0.isRangeZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.getRangeAxis(1411);
      combinedRangeXYPlot0.setDomainCrosshairValue(0.0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("|mRPVu");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(3);
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
      combinedRangeXYPlot0.clearRangeMarkers();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) logAxis0);
      double double0 = (-2632.72);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      xYPlot0.equals(numberAxis0);
      highLowRenderer0.clearSeriesStrokes(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot0.getPieChart();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      combinedDomainXYPlot0.getDomainAxisLocation();
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot1.configureRangeAxes();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      combinedRangeXYPlot0.getDomainAxisEdge();
      BasicStroke basicStroke0 = new BasicStroke(1983.0996F);
      combinedRangeXYPlot0.setOutlineStroke(basicStroke0);
      combinedRangeXYPlot0.getRangeGridlineStroke();
      combinedRangeXYPlot0.isDomainZoomable();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.equals(combinedRangeXYPlot0);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(926, 10);
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      TileObserver tileObserver0 = mock(TileObserver.class, new ViolatedAssumptionAnswer());
      bufferedImage0.addTileObserver(tileObserver0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1983.0996F, 0.0, 10.0, 63.0);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot1.setDomainMinorGridlinePaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      BasicStroke basicStroke1 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(rectangle2D_Double0, basicStroke1, valueAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot1.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      combinedRangeXYPlot0.getRangeAxisIndex(valueAxis0);
      combinedDomainXYPlot0.getFixedLegendItems();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeMinorGridlinesVisible(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 354, 10, 10, false, false, false, false, false, false);
      Point point0 = chartPanel0.getLocation();
      xYPlot0.panDomainAxes(1824.8, plotRenderingInfo0, point0);
      // Undeclared exception!
      try { 
        xYPlot0.getDomainAxisForDataset((-884));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -884 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      combinedRangeXYPlot0.getDomainAxisEdge();
      BasicStroke basicStroke0 = new BasicStroke(1983.0996F);
      combinedRangeXYPlot0.setOutlineStroke(basicStroke0);
      combinedRangeXYPlot0.getRangeGridlineStroke();
      combinedRangeXYPlot0.isDomainZoomable();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.equals(combinedRangeXYPlot0);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(926, 10);
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1983.0996F, 0.0, 10.0, 63.0);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot1.setDomainMinorGridlinePaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      BasicStroke basicStroke1 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(rectangle2D_Double0, basicStroke1, valueAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot1.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      combinedRangeXYPlot0.getRangeAxisIndex(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      moduloAxis0.centerRange(2.0F);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.getPadding();
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.getDomainMarkers(1, (Layer) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNotNull(numberAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(highLowRenderer0);
      
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertNotNull(xYPlot0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      boolean boolean0 = xYPlot0.equals(numberAxis0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(boolean0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge();
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBlockRenderer0.getBaseSeriesVisible());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getBaseCreateEntities());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(xYBlockRenderer0);
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertNotNull(stackedXYAreaRenderer0);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      
      stackedXYAreaRenderer0.removeAnnotations();
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      
      xYPlot0.setRenderer((XYItemRenderer) highLowRenderer0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart("L)<NUr+O.Rbm7n~|Ho", xYPlot0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertNotNull(jFreeChart0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertNotNull(chartPanel0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      Point point1 = chartPanel0.getLocation(point0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertNotNull(point1);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      
      Point point2 = chartPanel0.translateJava2DToScreen(point0);
      assertNotSame(point0, point2);
      assertSame(point0, point1);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertNotNull(point2);
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point1));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point2.x);
      assertEquals(0, point2.y);
      
      Point point3 = chartPanel0.getLocation(point0);
      assertNotSame(point0, point2);
      assertSame(point0, point1);
      assertSame(point0, point3);
      assertSame(point3, point1);
      assertNotSame(point3, point2);
      assertSame(point3, point0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point3.getY(), 0.01);
      assertEquals(0.0, point3.getX(), 0.01);
      assertNotNull(point3);
      assertTrue(point0.equals((Object)point2));
      assertTrue(point3.equals((Object)point2));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point3.y);
      assertEquals(0, point3.x);
      
      xYPlot0.setQuadrantOrigin(point3);
      assertNotSame(point0, point2);
      assertSame(point0, point1);
      assertSame(point0, point3);
      assertSame(point3, point1);
      assertNotSame(point3, point2);
      assertSame(point3, point0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point3.getY(), 0.01);
      assertEquals(0.0, point3.getX(), 0.01);
      assertTrue(point0.equals((Object)point2));
      assertTrue(point3.equals((Object)point2));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point3.y);
      assertEquals(0, point3.x);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals((-1099.699), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNotNull(cyclicNumberAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertNotNull(moduloAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      moduloAxis0.setRangeAboutValue(10.0, 1.0F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(10.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(9.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      moduloAxis0.centerRange(2.0F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNotNull(thermometerPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      
      moduloAxis0.setLabel("Value:");
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      boolean boolean0 = combinedDomainXYPlot0.equals((Object) null);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(boolean0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(jFreeChart0);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(bufferedImage0);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      jFreeChart0.setBorderStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      DateTitle dateTitle0 = new DateTitle();
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.isVisible());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertNull(dateTitle0.getURLText());
      assertTrue(dateTitle0.getNotify());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) dateTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.isVisible());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertNull(dateTitle0.getURLText());
      assertTrue(dateTitle0.getNotify());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(dateTitle0.visible);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedDomainXYPlot0.setRangeGridlineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(0, axisLocation0, true);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.setRangeAxis(2057, (ValueAxis) cyclicNumberAxis0, false);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(2058, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      assertEquals((-1099.699), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNotNull(cyclicNumberAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = combinedDomainXYPlot0.equals((Object) null);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(boolean0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertNotNull(multiplePiePlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNotNull(jFreeChart0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.clearDomainMarkers();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke1 = (BasicStroke)combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      assertSame(basicStroke1, basicStroke0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke1.getEndCap());
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertNotNull(basicStroke1);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean1 = combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.configureRangeAxes();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(logarithmicAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(logarithmicAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNotNull(jFreeChart0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      LogarithmicAxis logarithmicAxis1 = (LogarithmicAxis)logarithmicAxis0.clone();
      assertNotSame(logarithmicAxis0, logarithmicAxis1);
      assertNotSame(logarithmicAxis1, logarithmicAxis0);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis1.isPositiveArrowVisible());
      assertFalse(logarithmicAxis1.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis1.isAutoRange());
      assertEquals(0.05, logarithmicAxis1.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis1.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis1.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis1.getLabel());
      assertTrue(logarithmicAxis1.getAutoRangeStickyZero());
      assertEquals(0, logarithmicAxis1.getMinorTickCount());
      assertTrue(logarithmicAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis1.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis1.isNegativeArrowVisible());
      assertEquals(2.0, logarithmicAxis1.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis1.getUpperMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis1.getLabelURL());
      assertFalse(logarithmicAxis1.isVerticalTickLabels());
      assertFalse(logarithmicAxis1.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis1.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis1.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis1.isInverted());
      assertEquals(0.0F, logarithmicAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis1.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis1.isTickLabelsVisible());
      assertFalse(logarithmicAxis1.getAllowNegativesFlag());
      assertTrue(logarithmicAxis1.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis1.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis1.isVisible());
      assertEquals(1.0E-8, logarithmicAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logarithmicAxis1.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis1.getStrictValuesFlag());
      assertNotNull(logarithmicAxis1);
      assertTrue(logarithmicAxis1.equals((Object)logarithmicAxis0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 15;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      valueAxisArray0[0] = (ValueAxis) logarithmicAxis0;
      valueAxisArray0[1] = (ValueAxis) logarithmicAxis0;
      valueAxisArray0[2] = (ValueAxis) logarithmicAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      assertNotSame(logarithmicAxis0, logarithmicAxis1);
      assertEquals(3, valueAxisArray0.length);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(3, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(logarithmicAxis0.equals((Object)logarithmicAxis1));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      intArray0[4] = 10;
      intArray0[5] = 15;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, 10, intArray0, 15, 2099, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transferType must be eitherDataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-1099.699), cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNotNull(cyclicNumberAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      assertNotNull(defaultValueDataset0);
      
      boolean boolean0 = combinedDomainXYPlot0.equals((Object) null);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(boolean0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNotNull(multiplePiePlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      DateTitle dateTitle0 = new DateTitle();
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertTrue(dateTitle0.getNotify());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertTrue(dateTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      
      dateTitle0.setPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertTrue(dateTitle0.getNotify());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertTrue(dateTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(dateTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) dateTitle0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertTrue(dateTitle0.getNotify());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertTrue(dateTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(dateTitle0.visible);
      
      combinedDomainXYPlot0.clearDomainMarkers();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke1 = (BasicStroke)combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      assertSame(basicStroke1, basicStroke0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0, basicStroke1.getEndCap());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertNotNull(basicStroke1);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(0.0);
      assertFalse(xYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBarRenderer0.getShadowsVisible());
      assertFalse(xYBarRenderer0.getUseYInterval());
      assertEquals(1, xYBarRenderer0.getPassCount());
      assertTrue(xYBarRenderer0.getBaseCreateEntities());
      assertFalse(xYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, xYBarRenderer0.getMargin(), 0.01);
      assertEquals(2.0, xYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYBarRenderer0.getDefaultEntityRadius());
      assertTrue(xYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, xYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, xYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), xYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertTrue(xYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, xYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(xYBarRenderer0.isDrawBarOutline());
      assertTrue(xYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(xYBarRenderer0.getBaseSeriesVisible());
      assertNotNull(xYBarRenderer0);
      
      combinedDomainXYPlot0.setRenderer(15, (XYItemRenderer) xYBarRenderer0, true);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(16, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(xYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBarRenderer0.getShadowsVisible());
      assertFalse(xYBarRenderer0.getUseYInterval());
      assertEquals(1, xYBarRenderer0.getPassCount());
      assertTrue(xYBarRenderer0.getBaseCreateEntities());
      assertFalse(xYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, xYBarRenderer0.getMargin(), 0.01);
      assertEquals(2.0, xYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYBarRenderer0.getDefaultEntityRadius());
      assertTrue(xYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, xYBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, xYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), xYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertTrue(xYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, xYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(xYBarRenderer0.isDrawBarOutline());
      assertTrue(xYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(xYBarRenderer0.getBaseSeriesVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertNotNull(logarithmicAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(logarithmicAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNotNull(jFreeChart0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertNotNull(renderingHints0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      RescaleOp rescaleOp0 = null;
      try {
        rescaleOp0 = new RescaleOp((float[]) null, (float[]) null, renderingHints0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.RescaleOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNotNull(cyclicNumberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertNotNull(thermometerPlot0);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.RIGHT);
      
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.RIGHT);
      
      boolean boolean0 = combinedDomainXYPlot0.equals((Object) null);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(boolean0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      DateTitle dateTitle0 = new DateTitle();
      assertNull(dateTitle0.getToolTipText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertNull(dateTitle0.getURLText());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.getNotify());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertTrue(dateTitle0.isVisible());
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) dateTitle0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertNull(dateTitle0.getURLText());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.getNotify());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertTrue(dateTitle0.isVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(dateTitle0.visible);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertNotNull(graphics2D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(15, 1, 0, 10);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1, rectangle0.y);
      assertEquals(10, rectangle0.height);
      assertEquals(15, rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1, rectangle0.y);
      assertEquals(10, rectangle0.height);
      assertEquals(15, rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.RIGHT);
      
      combinedDomainXYPlot0.clearDomainMarkers();
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke1 = (BasicStroke)combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      assertSame(basicStroke1, basicStroke0);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke1.getEndCap());
      assertNotNull(basicStroke1);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.drawZeroRangeBaseline(graphics2D0, rectangle2D_Double0);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNotNull(xYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      int int0 = 39;
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge();
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      
      RectangleEdge rectangleEdge1 = xYPlot0.getRangeAxisEdge();
      assertSame(rectangleEdge1, rectangleEdge0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertNotNull(rectangleEdge1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      xYPlot0.setRangeAxisLocation(39, axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedXYAreaRenderer0);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)stackedXYAreaRenderer0.lookupSeriesShape(39);
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      
      stackedXYAreaRenderer0.removeAnnotations();
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      
      xYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", xYPlot0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertNotNull(chartPanel0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      Point point1 = chartPanel0.getLocation(point0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertNotNull(point1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      
      Point point2 = chartPanel0.translateJava2DToScreen(point1);
      assertNotSame(point0, point2);
      assertSame(point0, point1);
      assertNotSame(point1, point2);
      assertSame(point1, point0);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertNotNull(point2);
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0, point2.x);
      assertEquals(0, point2.y);
      
      xYPlot0.setQuadrantOrigin(point2);
      assertNotSame(point0, point2);
      assertSame(point0, point1);
      assertNotSame(point1, point2);
      assertSame(point1, point0);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertTrue(point0.equals((Object)point2));
      assertTrue(point1.equals((Object)point2));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0, point2.x);
      assertEquals(0, point2.y);
      
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      
      xYPlot0.setAxisOffset(rectangleInsets0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis(">d-}ELv7;3s5=", (Range) null);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(">d-}ELv7;3s5=", moduloAxis0.getLabel());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNotNull(moduloAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      Range range1 = xYPlot0.getDataRange(moduloAxis0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(">d-}ELv7;3s5=", moduloAxis0.getLabel());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(range1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      // Undeclared exception!
      try { 
        xYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNotNull(cyclicNumberAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertNull(moduloAxis0.getLabelToolTip());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertNotNull(moduloAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      moduloAxis0.centerRange(2.0F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertNotNull(thermometerPlot0);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      boolean boolean0 = combinedDomainXYPlot0.equals((Object) null);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(boolean0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      DateTitle dateTitle0 = new DateTitle();
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertTrue(dateTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertTrue(dateTitle0.getNotify());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) dateTitle0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertTrue(dateTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertTrue(dateTitle0.getNotify());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(dateTitle0.visible);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertNotNull(graphics2D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(15, 1, 0, 10);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(15, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(10, rectangle0.height);
      assertEquals(1, rectangle0.y);
      
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(15, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(10, rectangle0.height);
      assertEquals(1, rectangle0.y);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Area area0 = new Area(multiplePiePlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertFalse(area0.isEmpty());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNotNull(area0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-1771.27140246), (double) 0.5F);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(2.822830986740069E-4, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0000000000000002, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-2.822830986740069E-4), affineTransform0.getShearX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform0.getScaleX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform0.getScaleY(), 0.01);
      assertNotNull(affineTransform0);
      
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(2.822830986740069E-4, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0000000000000002, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-2.822830986740069E-4), affineTransform0.getShearX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform0.getScaleX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform0.getScaleY(), 0.01);
      assertEquals(2.822830986740069E-4, affineTransform1.getShearY(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateY(), 0.01);
      assertEquals((-2.822830986740069E-4), affineTransform1.getShearX(), 0.01);
      assertEquals(1.0000000000000002, affineTransform1.getDeterminant(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform1.getScaleX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform1.getScaleY(), 0.01);
      assertNotNull(affineTransform1);
      assertTrue(affineTransform1.equals((Object)affineTransform0));
      
      Area area1 = area0.createTransformedArea(affineTransform1);
      assertNotSame(area0, area1);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertNotSame(area1, area0);
      assertFalse(area0.isEmpty());
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(2.822830986740069E-4, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0000000000000002, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-2.822830986740069E-4), affineTransform0.getShearX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform0.getScaleX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform0.getScaleY(), 0.01);
      assertEquals(2.822830986740069E-4, affineTransform1.getShearY(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateY(), 0.01);
      assertEquals((-2.822830986740069E-4), affineTransform1.getShearX(), 0.01);
      assertEquals(1.0000000000000002, affineTransform1.getDeterminant(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform1.getScaleX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform1.getScaleY(), 0.01);
      assertFalse(area1.isEmpty());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNotNull(area1);
      assertTrue(affineTransform0.equals((Object)affineTransform1));
      assertTrue(affineTransform1.equals((Object)affineTransform0));
      assertFalse(area1.equals((Object)area0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(area1, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, dateTitle0.DEFAULT_TEXT_PAINT);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(area0.isEmpty());
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(2.822830986740069E-4, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0000000000000002, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-2.822830986740069E-4), affineTransform0.getShearX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform0.getScaleX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform0.getScaleY(), 0.01);
      assertEquals(2.822830986740069E-4, affineTransform1.getShearY(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateY(), 0.01);
      assertEquals((-2.822830986740069E-4), affineTransform1.getShearX(), 0.01);
      assertEquals(1.0000000000000002, affineTransform1.getDeterminant(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform1.getScaleX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform1.getScaleY(), 0.01);
      assertFalse(area1.isEmpty());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertTrue(dateTitle0.isVisible());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertTrue(dateTitle0.getNotify());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertNotNull(xYShapeAnnotation0);
      assertFalse(area0.equals((Object)area1));
      assertTrue(affineTransform0.equals((Object)affineTransform1));
      assertTrue(affineTransform1.equals((Object)affineTransform0));
      assertFalse(area1.equals((Object)area0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(dateTitle0.visible);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Color color0 = (Color)Axis.DEFAULT_TICK_MARK_PAINT;
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertNotNull(color0);
      
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-1771.27140246), 1.0F, (-1030.288), 15, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, color0);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertNotNull(xYBoxAnnotation0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      boolean boolean1 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(affineTransform1, defaultValueDataset0);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(2.822830986740069E-4, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0000000000000002, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-2.822830986740069E-4), affineTransform0.getShearX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform0.getScaleX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform0.getScaleY(), 0.01);
      assertEquals(2.822830986740069E-4, affineTransform1.getShearY(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateY(), 0.01);
      assertEquals((-2.822830986740069E-4), affineTransform1.getShearX(), 0.01);
      assertEquals(1.0000000000000002, affineTransform1.getDeterminant(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform1.getScaleX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform1.getScaleY(), 0.01);
      assertNotNull(datasetChangeEvent0);
      assertTrue(affineTransform0.equals((Object)affineTransform1));
      assertTrue(affineTransform1.equals((Object)affineTransform0));
      
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(2.822830986740069E-4, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0000000000000002, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-2.822830986740069E-4), affineTransform0.getShearX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform0.getScaleX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform0.getScaleY(), 0.01);
      assertEquals(2.822830986740069E-4, affineTransform1.getShearY(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateY(), 0.01);
      assertEquals((-2.822830986740069E-4), affineTransform1.getShearX(), 0.01);
      assertEquals(1.0000000000000002, affineTransform1.getDeterminant(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform1.getScaleX(), 0.01);
      assertEquals((-0.9999999601581254), affineTransform1.getScaleY(), 0.01);
      assertTrue(affineTransform0.equals((Object)affineTransform1));
      assertTrue(affineTransform1.equals((Object)affineTransform0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(xYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_LEFT;
      assertNotSame(axisLocation1, axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      
      RectangleEdge rectangleEdge1 = xYPlot0.getRangeAxisEdge();
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertNotNull(rectangleEdge1);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      xYPlot0.setRangeAxisLocation(39, axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertNotNull(stackedXYAreaRenderer0);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)stackedXYAreaRenderer0.lookupSeriesShape(39);
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      
      stackedXYAreaRenderer0.removeAnnotations();
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      
      xYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", xYPlot0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertNotNull(chartPanel0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      Point point1 = chartPanel0.getLocation(point0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertNotNull(point1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertNotNull(chartRenderingInfo0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      
      jFreeChart0.handleClick(0, 680, chartRenderingInfo0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      
      Point point2 = chartPanel0.translateJava2DToScreen(point1);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertNotSame(point0, point2);
      assertSame(point0, point1);
      assertNotSame(point1, point2);
      assertSame(point1, point0);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertNotNull(point2);
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point1));
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      
      xYPlot0.setQuadrantOrigin(point2);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertNotSame(point0, point2);
      assertSame(point0, point1);
      assertNotSame(point1, point2);
      assertSame(point1, point0);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point1));
      assertTrue(point0.equals((Object)point2));
      assertTrue(point1.equals((Object)point2));
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertNotNull(textBox0);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertNotNull(rectangleInsets0);
      
      xYPlot0.setAxisOffset(rectangleInsets0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      ModuloAxis moduloAxis0 = new ModuloAxis(">d-}ELv7;3s5=", (Range) null);
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(">d-}ELv7;3s5=", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertFalse(moduloAxis0.isInverted());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertNotNull(moduloAxis0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      moduloAxis0.setRangeAboutValue(0, 63.0);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(31.5, moduloAxis0.getUpperBound(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(">d-}ELv7;3s5=", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals((-31.5), moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertFalse(moduloAxis0.isInverted());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      Range range2 = xYPlot0.getDataRange(moduloAxis0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(31.5, moduloAxis0.getUpperBound(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(">d-}ELv7;3s5=", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals((-31.5), moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertFalse(moduloAxis0.isInverted());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertNull(range2);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = xYPlot0.getRangeMarkers(layer0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("{0GEjY", cyclicNumberAxis0.DEFAULT_RANGE);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals("{0GEjY", moduloAxis0.getLabel());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertNotNull(moduloAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      moduloAxis0.centerRange(0.0F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals("{0GEjY", moduloAxis0.getLabel());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-0.5), moduloAxis0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      LinkedList<Size2D> linkedList0 = new LinkedList<Size2D>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(6, (AxisLocation) null);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxes(6, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(moduloAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      moduloAxis0.centerRange(2.0F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNotNull(thermometerPlot0);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      boolean boolean0 = combinedDomainXYPlot0.equals((Object) null);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getHeight());
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      DateTitle dateTitle0 = new DateTitle();
      assertTrue(dateTitle0.getNotify());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getToolTipText());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.isVisible());
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) dateTitle0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(dateTitle0.getNotify());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getToolTipText());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.isVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(dateTitle0.visible);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getHeight());
      assertNotNull(graphics2D0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(15, 1, 0, 10);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(10, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(15, rectangle0.x);
      assertEquals(1, rectangle0.y);
      
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(10, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(15, rectangle0.x);
      assertEquals(1, rectangle0.y);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, dateTitle0.DEFAULT_TEXT_PAINT);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertTrue(dateTitle0.getNotify());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getToolTipText());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.isVisible());
      assertNotNull(xYShapeAnnotation0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(dateTitle0.visible);
      
      boolean boolean1 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertTrue(dateTitle0.getNotify());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getToolTipText());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.isVisible());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(dateTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(logarithmicAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.05, 1.0, 1.0, 2.0F);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertNotNull(rectangleInsets0);
      
      logarithmicAxis0.setLabelInsets(rectangleInsets0);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Color color0 = (Color)combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(xYPlot0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedRangeCategoryPlot0.setAnchorValue(10.0, true);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(10.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      xYPlot0.setDomainAxis(3084, (ValueAxis) null, false);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(3085, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation();
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(10.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      xYPlot0.setRangeAxisLocation(axisLocation0, false);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(3085, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(10.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      double double0 = xYPlot0.getDomainCrosshairValue();
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(3085, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, double0, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)xYPlot0.getRangeMinorGridlinePaint();
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(3085, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      xYPlot0.setRangeZeroBaselineStroke(combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(3085, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(10.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      float[] floatArray0 = new float[0];
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel((-775), 10, floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertNotNull(xYPlot0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge();
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      intervalMarker0.setLabel("");
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals("", intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNotNull(numberAxis3D0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.addDomainMarker(10, (Marker) intervalMarker0, layer0);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals("", intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNotNull(categoryAxis0);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPlot0);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNotNull(jFreeChart0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(63, 10);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(63, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(63, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertNotNull(bufferedImage0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(63, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(63, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertNotNull(graphics2D0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getBounds2D();
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertNotNull(grayPaintScale0);
      
      NumberAxis numberAxis0 = new NumberAxis("");
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals("", numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNotNull(numberAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, numberAxis0);
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals("", numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertNotNull(paintScaleLegend0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(paintScaleLegend0.visible);
      
      RectangleEdge rectangleEdge1 = paintScaleLegend0.getPosition();
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals("", numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertNotNull(rectangleEdge1);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(paintScaleLegend0.visible);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(axisSpace0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisSpace axisSpace1 = categoryAxis0.reserveSpace(graphics2D0, xYPlot0, rectangle2D_Double1, rectangleEdge1, (AxisSpace) null);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals("", numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(4.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(63, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(63, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertNotNull(axisSpace1);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(paintScaleLegend0.visible);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace1);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(63, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(63, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals("", numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(4.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(paintScaleLegend0.visible);
      
      combinedDomainXYPlot0.clearDomainAxes();
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals((-1099.699), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNotNull(cyclicNumberAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertNotNull(moduloAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      
      moduloAxis0.centerRange(2.0F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertNotNull(thermometerPlot0);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      moduloAxis0.setLabel("Value:");
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      
      boolean boolean0 = combinedDomainXYPlot0.equals((Object) null);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(boolean0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(jFreeChart0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(bufferedImage0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      jFreeChart0.setBorderStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      DateTitle dateTitle0 = new DateTitle();
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertNull(dateTitle0.getToolTipText());
      assertNull(dateTitle0.getURLText());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertTrue(dateTitle0.isVisible());
      assertTrue(dateTitle0.getNotify());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) dateTitle0);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertNull(dateTitle0.getToolTipText());
      assertNull(dateTitle0.getURLText());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertTrue(dateTitle0.isVisible());
      assertTrue(dateTitle0.getNotify());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(dateTitle0.visible);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.setRangeGridlineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(0, axisLocation0, true);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedDomainXYPlot0.setRangeAxis(2057, (ValueAxis) cyclicNumberAxis0, true);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(2058, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals((-115.708), combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.plotChanged((PlotChangeEvent) null);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals((-115.708), combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals((-115.708), combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      String string0 = combinedDomainXYPlot0.getPlotType();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals((-115.708), combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNotNull(string0);
      assertEquals("Combined_Domain_XYPlot", string0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNotNull(thermometerPlot0);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      
      String string1 = "";
      Range range0 = combinedDomainXYPlot0.getDataRange((ValueAxis) null);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals((-115.708), combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNull(range0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertNotNull(moduloAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      
      moduloAxis0.setTickLabelInsets(combinedDomainXYPlot0.DEFAULT_INSETS);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals((-115.708), combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      
      ModuloAxis moduloAxis1 = new ModuloAxis("", moduloAxis0.DEFAULT_RANGE);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(90.0, moduloAxis1.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis1.isVisible());
      assertEquals(0.0, moduloAxis1.getFixedDimension(), 0.01);
      assertTrue(moduloAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis1.getFixedAutoRange(), 0.01);
      assertNull(moduloAxis1.getLabelURL());
      assertFalse(moduloAxis1.isVerticalTickLabels());
      assertTrue(moduloAxis1.isAutoRange());
      assertFalse(moduloAxis1.isPositiveArrowVisible());
      assertEquals("", moduloAxis1.getLabel());
      assertEquals(0, moduloAxis1.getMinorTickCount());
      assertEquals(0.0F, moduloAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis1.getLowerBound(), 0.01);
      assertTrue(moduloAxis1.getAutoRangeStickyZero());
      assertEquals(2.0F, moduloAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis1.getUpperMargin(), 0.01);
      assertEquals(1.0E-8, moduloAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis1.isNegativeArrowVisible());
      assertFalse(moduloAxis1.isInverted());
      assertEquals(0.0, moduloAxis1.getLabelAngle(), 0.01);
      assertTrue(moduloAxis1.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis1.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis1.getLowerMargin(), 0.01);
      assertEquals(270.0, moduloAxis1.getDisplayStart(), 0.01);
      assertTrue(moduloAxis1.getAutoRangeIncludesZero());
      assertNull(moduloAxis1.getLabelToolTip());
      assertTrue(moduloAxis1.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis1.isTickLabelsVisible());
      assertEquals(1.0, moduloAxis1.getUpperBound(), 0.01);
      assertNotNull(moduloAxis1);
      assertFalse(moduloAxis1.equals((Object)moduloAxis0));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      moduloAxis1.setAxisLineStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      assertNotSame(moduloAxis0, moduloAxis1);
      assertNotSame(moduloAxis1, moduloAxis0);
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(90.0, moduloAxis1.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis1.isVisible());
      assertEquals(0.0, moduloAxis1.getFixedDimension(), 0.01);
      assertTrue(moduloAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis1.getFixedAutoRange(), 0.01);
      assertNull(moduloAxis1.getLabelURL());
      assertFalse(moduloAxis1.isVerticalTickLabels());
      assertTrue(moduloAxis1.isAutoRange());
      assertFalse(moduloAxis1.isPositiveArrowVisible());
      assertEquals("", moduloAxis1.getLabel());
      assertEquals(0, moduloAxis1.getMinorTickCount());
      assertEquals(0.0F, moduloAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis1.getLowerBound(), 0.01);
      assertTrue(moduloAxis1.getAutoRangeStickyZero());
      assertEquals(2.0F, moduloAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis1.getUpperMargin(), 0.01);
      assertEquals(1.0E-8, moduloAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis1.isNegativeArrowVisible());
      assertFalse(moduloAxis1.isInverted());
      assertEquals(0.0, moduloAxis1.getLabelAngle(), 0.01);
      assertTrue(moduloAxis1.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis1.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis1.getLowerMargin(), 0.01);
      assertEquals(270.0, moduloAxis1.getDisplayStart(), 0.01);
      assertTrue(moduloAxis1.getAutoRangeIncludesZero());
      assertNull(moduloAxis1.getLabelToolTip());
      assertTrue(moduloAxis1.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis1.isTickLabelsVisible());
      assertEquals(1.0, moduloAxis1.getUpperBound(), 0.01);
      assertFalse(moduloAxis1.equals((Object)moduloAxis0));
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedDomainXYPlot0.plotChanged((PlotChangeEvent) null);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
      assertEquals(10.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      intervalMarker0.setLabel("");
      assertEquals(10.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals("", intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNotNull(numberAxis3D0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      LogAxis logAxis0 = new LogAxis();
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertNotNull(logAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertNotNull(combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot2);
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Layer layer1 = Layer.BACKGROUND;
      assertNotSame(layer1, layer0);
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertNotNull(layer1);
      assertFalse(layer1.equals((Object)layer0));
      
      combinedDomainXYPlot2.addDomainMarker(3, (Marker) intervalMarker0, layer1);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      assertNotSame(layer1, layer0);
      assertEquals(10.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals("", intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(layer1.equals((Object)layer0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertNotNull(categoryAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot1);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(jFreeChart0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot2));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      int int0 = 1999;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1999, 10);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot2);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1999, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1999, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertNotNull(bufferedImage0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot2));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot2);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1999, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1999, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertNotNull(graphics2D0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot2));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getBounds2D();
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
      assertNotNull(grayPaintScale0);
      
      NumberAxis numberAxis0 = new NumberAxis("X");
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.isVisible());
      assertNotNull(numberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, logAxis0);
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertNotNull(paintScaleLegend0);
      assertTrue(paintScaleLegend0.visible);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      RectangleEdge rectangleEdge0 = paintScaleLegend0.getPosition();
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertNotNull(rectangleEdge0);
      assertTrue(paintScaleLegend0.visible);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(axisSpace0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisSpace axisSpace1 = categoryAxis0.reserveSpace(graphics2D0, combinedDomainXYPlot1, rectangle2D_Double1, rectangleEdge0, (AxisSpace) null);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot2);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(4.0, axisSpace1.getTop(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1999, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1999, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertNotNull(axisSpace1);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot2));
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertTrue(paintScaleLegend0.visible);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      AxisSpace axisSpace2 = combinedDomainXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D_Double1, axisSpace1);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot2);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertSame(axisSpace1, axisSpace2);
      assertSame(axisSpace2, axisSpace1);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1999, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1999, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(4.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(4.0, axisSpace2.getTop(), 0.01);
      assertNotNull(axisSpace2);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot2));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot2));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertTrue(paintScaleLegend0.visible);
      
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace2);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot2);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertSame(axisSpace1, axisSpace2);
      assertSame(axisSpace2, axisSpace1);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1999, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1999, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(255, grayPaintScale0.getAlpha());
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(0.0, axisSpace1.getLeft(), 0.01);
      assertEquals(0.0, axisSpace1.getBottom(), 0.01);
      assertEquals(0.0, axisSpace1.getRight(), 0.01);
      assertEquals(4.0, axisSpace1.getTop(), 0.01);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01);
      assertEquals(0.0, axisSpace2.getRight(), 0.01);
      assertEquals(0.0, axisSpace2.getLeft(), 0.01);
      assertEquals(4.0, axisSpace2.getTop(), 0.01);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot2));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot2));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertTrue(paintScaleLegend0.visible);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.getDomainAxisForDataset(926);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 926 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNotNull(cyclicNumberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("{0GEjY", cyclicNumberAxis0.DEFAULT_RANGE);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals("{0GEjY", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertNotNull(moduloAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(moduloAxis0.DEFAULT_TICK_MARK_PAINT);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals("{0GEjY", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      combinedDomainXYPlot0.clearDomainMarkers(500);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(boolean0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_BACKGROUND_PAINT;
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-64), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setRangeGridlinePaint(moduloAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals("{0GEjY", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      byte byte0 = (byte)34;
      byte byte1 = (byte) (-94);
      int int0 = 5127;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-35);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((byte)120, 5127, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNotNull(logAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      IntervalMarker intervalMarker0 = new IntervalMarker((-2072.68520785439), (-1250.19));
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals((-1250.19), intervalMarker0.getEndValue(), 0.01);
      assertEquals((-2072.68520785439), intervalMarker0.getStartValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeXYPlot0.addRangeMarker(500, (Marker) intervalMarker0, layer0);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals((-1250.19), intervalMarker0.getEndValue(), 0.01);
      assertEquals((-2072.68520785439), intervalMarker0.getStartValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      JFreeChart jFreeChart0 = new JFreeChart("'jdqO~%#]", combinedRangeXYPlot0);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNotNull(jFreeChart0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertNotNull(renderingHints0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertNotNull(colorConvertOp0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      JEditorPane jEditorPane0 = new JEditorPane("$y%W8h", "$y%W8h");
      assertFalse(jEditorPane0.getIgnoreRepaint());
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertNotNull(jEditorPane0);
      
      MouseEvent mouseEvent0 = new MouseEvent(jEditorPane0, 0, 0L, 1898, 1898, (-1300), 0, false);
      assertFalse(jEditorPane0.getIgnoreRepaint());
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(0, mouseEvent0.getClickCount());
      assertTrue(mouseEvent0.isAltGraphDown());
      assertTrue(mouseEvent0.isControlDown());
      assertTrue(mouseEvent0.isAltDown());
      assertEquals(0, mouseEvent0.getID());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals((-1300), mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(1898, mouseEvent0.getX());
      assertEquals(42, mouseEvent0.getModifiers());
      assertEquals(0L, mouseEvent0.getWhen());
      assertNotNull(mouseEvent0);
      
      Point point1 = mouseEvent0.getPoint();
      assertNotSame(point1, point0);
      assertFalse(jEditorPane0.getIgnoreRepaint());
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(0, mouseEvent0.getClickCount());
      assertTrue(mouseEvent0.isAltGraphDown());
      assertTrue(mouseEvent0.isControlDown());
      assertTrue(mouseEvent0.isAltDown());
      assertEquals(0, mouseEvent0.getID());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals((-1300), mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(1898, mouseEvent0.getX());
      assertEquals(42, mouseEvent0.getModifiers());
      assertEquals(0L, mouseEvent0.getWhen());
      assertEquals(1898.0, point1.getX(), 0.01);
      assertEquals((-1300.0), point1.getY(), 0.01);
      assertNotNull(point1);
      assertFalse(point1.equals((Object)point0));
      assertEquals((-1300), point1.y);
      assertEquals(1898, point1.x);
      
      Point point2 = (Point)colorConvertOp0.getPoint2D(point0, point1);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertSame(point1, point2);
      assertNotSame(point1, point0);
      assertNotSame(point2, point0);
      assertSame(point2, point1);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertFalse(jEditorPane0.getIgnoreRepaint());
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(0, mouseEvent0.getClickCount());
      assertTrue(mouseEvent0.isAltGraphDown());
      assertTrue(mouseEvent0.isControlDown());
      assertTrue(mouseEvent0.isAltDown());
      assertEquals(0, mouseEvent0.getID());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertFalse(mouseEvent0.isShiftDown());
      assertEquals((-1300), mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(1898, mouseEvent0.getX());
      assertEquals(42, mouseEvent0.getModifiers());
      assertEquals(0L, mouseEvent0.getWhen());
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertNotNull(point2);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertTrue(point2.equals((Object)point0));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      
      PlotState plotState0 = new PlotState();
      assertNotNull(plotState0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      standardEntityCollection0.clear();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.draw((Graphics2D) null, (Rectangle2D) null, point2, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNotNull(xYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge();
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      
      RectangleEdge rectangleEdge1 = xYPlot0.getRangeAxisEdge();
      assertSame(rectangleEdge1, rectangleEdge0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertNotNull(rectangleEdge1);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      xYPlot0.setRangeAxisLocation(39, axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertNotNull(stackedXYAreaRenderer0);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      
      stackedXYAreaRenderer0.removeAnnotations();
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      
      xYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", xYPlot0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertNotNull(chartPanel0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      Point point1 = chartPanel0.getLocation(point0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertNotNull(point1);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      
      Point point2 = chartPanel0.translateJava2DToScreen(point1);
      assertNotSame(point0, point2);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertNotSame(point1, point2);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertNotNull(point2);
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0, point2.x);
      assertEquals(0, point2.y);
      
      xYPlot0.setQuadrantOrigin(point2);
      assertNotSame(point0, point2);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertNotSame(point1, point2);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertTrue(point0.equals((Object)point2));
      assertTrue(point1.equals((Object)point2));
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0, point2.x);
      assertEquals(0, point2.y);
      
      boolean boolean0 = xYPlot0.isRangeZoomable();
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNotNull(xYPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge();
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      
      RectangleEdge rectangleEdge1 = xYPlot0.getRangeAxisEdge();
      assertSame(rectangleEdge1, rectangleEdge0);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertNotNull(rectangleEdge1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      xYPlot0.setRangeAxisLocation(39, axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertNotNull(stackedXYAreaRenderer0);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)stackedXYAreaRenderer0.lookupSeriesShape(39);
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      
      stackedXYAreaRenderer0.removeAnnotations();
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      
      xYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", xYPlot0);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertNotNull(jFreeChart0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertNotNull(chartPanel0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      Point point1 = chartPanel0.getLocation(point0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertNotNull(point1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      
      Point point2 = chartPanel0.translateJava2DToScreen(point1);
      assertSame(point0, point1);
      assertNotSame(point0, point2);
      assertSame(point1, point0);
      assertNotSame(point1, point2);
      assertNotSame(point2, point0);
      assertNotSame(point2, point1);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertNotNull(point2);
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point1));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      
      xYPlot0.setQuadrantOrigin(point2);
      assertSame(point0, point1);
      assertNotSame(point0, point2);
      assertSame(point1, point0);
      assertNotSame(point1, point2);
      assertNotSame(point2, point0);
      assertNotSame(point2, point1);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertTrue(point0.equals((Object)point2));
      assertTrue(point1.equals((Object)point2));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point1));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      
      TextBox textBox0 = new TextBox();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertNotNull(textBox0);
      
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertNotNull(rectangleInsets0);
      
      xYPlot0.setAxisOffset(rectangleInsets0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis(">d-}ELv7;3s5=", (Range) null);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(">d-}ELv7;3s5=", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertNotNull(moduloAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      Range range1 = xYPlot0.getDataRange(moduloAxis0);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(">d-}ELv7;3s5=", moduloAxis0.getLabel());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertNull(range1);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertNotNull(moduloAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      moduloAxis0.centerRange(2.0F);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertNotNull(thermometerPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      boolean boolean0 = combinedDomainXYPlot0.equals((Object) null);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(boolean0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      DateTitle dateTitle0 = new DateTitle();
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.isVisible());
      assertTrue(dateTitle0.getNotify());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) dateTitle0);
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertTrue(dateTitle0.isVisible());
      assertTrue(dateTitle0.getNotify());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(dateTitle0.visible);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertNotNull(graphics2D0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(15, 1, 0, 10);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertNotNull(rectangle0);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1, rectangle0.y);
      assertEquals(15, rectangle0.x);
      assertEquals(10, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1, rectangle0.y);
      assertEquals(15, rectangle0.x);
      assertEquals(10, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      
      combinedDomainXYPlot0.clearDomainMarkers();
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke1 = (BasicStroke)combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      assertSame(basicStroke1, basicStroke0);
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke1.getEndCap());
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertNotNull(basicStroke1);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(xYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge();
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      xYPlot0.mapDatasetToDomainAxis(39, 51);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      
      RectangleEdge rectangleEdge1 = xYPlot0.getRangeAxisEdge();
      assertSame(rectangleEdge1, rectangleEdge0);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertNotNull(rectangleEdge1);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      xYPlot0.setRangeAxisLocation(39, axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", xYPlot0);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertNotNull(chartPanel0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      Point point1 = chartPanel0.getLocation(point0);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertNotNull(point1);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      
      Point point2 = chartPanel0.translateJava2DToScreen(point1);
      assertSame(point0, point1);
      assertNotSame(point0, point2);
      assertSame(point1, point0);
      assertNotSame(point1, point2);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertNotNull(point2);
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      
      xYPlot0.setQuadrantOrigin(point2);
      assertSame(point0, point1);
      assertNotSame(point0, point2);
      assertSame(point1, point0);
      assertNotSame(point1, point2);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertTrue(point0.equals((Object)point2));
      assertTrue(point1.equals((Object)point2));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals((-1099.699), cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNotNull(cyclicNumberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertNotNull(moduloAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      moduloAxis0.centerRange(2.0F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertNotNull(thermometerPlot0);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("Value:", moduloAxis0.getLabel());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      boolean boolean0 = combinedDomainXYPlot0.equals((Object) null);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(boolean0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(jFreeChart0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertNotNull(bufferedImage0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      DateTitle dateTitle0 = new DateTitle();
      assertTrue(dateTitle0.isVisible());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertTrue(dateTitle0.getNotify());
      assertNull(dateTitle0.getURLText());
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) dateTitle0);
      assertTrue(dateTitle0.isVisible());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertTrue(dateTitle0.getNotify());
      assertNull(dateTitle0.getURLText());
      assertFalse(multiplePiePlot0.isSubplot());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(dateTitle0.visible);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      combinedDomainXYPlot0.setRangeGridlineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(0, axisLocation0, true);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "Null 'stroke' argument.");
      assertEquals("java.util.SimpleTimeZone[id=Null 'stroke' argument.,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'stroke' argument.", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      int int0 = (-1);
      simpleTimeZone0.setStartRule(1, (-1), (-1), 0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'stroke' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'stroke' argument.,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=4,startMonth=1,startDay=1,startDayOfWeek=1,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      
      int int1 = simpleTimeZone0.getOffset(0L);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'stroke' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'stroke' argument.,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=4,startMonth=1,startDay=1,startDayOfWeek=1,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      DateAxis dateAxis0 = new DateAxis("Null 'stroke' argument.", simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'stroke' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'stroke' argument.,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=4,startMonth=1,startDay=1,startDayOfWeek=1,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals("Null 'stroke' argument.", dateAxis0.getLabel());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNotNull(dateAxis0);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertNotNull(clusteredXYBarRenderer0);
      
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      boolean boolean0 = defaultXYDataset0.hasListener((EventListener) null);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertFalse(boolean0);
      
      xYPlot0.mapDatasetToRangeAxis(972, 972);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxisLocation(0, (AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertNotNull(logAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis(500);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(valueAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      double double0 = combinedDomainXYPlot0.getRangeCrosshairValue();
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.setBackgroundPaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeCrosshairPaint();
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint(10, logAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = null;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.5707963267948966), (-1.5707963267948966), (String) null);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals((-1.5707963267948966), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1.5707963267948966), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1.5707963267948966), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNotNull(cyclicNumberAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)line2D_Double0.getBounds2D();
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      
      cyclicNumberAxis0.setRightArrow(rectangle2D_Double0);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals((-1.5707963267948966), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1.5707963267948966), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1.5707963267948966), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals((-1.5707963267948966), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1.5707963267948966), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNotNull(combinedDomainXYPlot0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      cyclicNumberAxis0.addChangeListener(combinedDomainXYPlot0);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals((-1.5707963267948966), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1.5707963267948966), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(false);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals((-1.5707963267948966), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals((-1.5707963267948966), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      MockDate mockDate0 = new MockDate(10);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1, month0.getMonth());
      assertEquals(10L, month0.getFirstMillisecond());
      assertEquals(10L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertNotNull(month0);
      
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(month0, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      DatasetGroup datasetGroup0 = categoryTableXYDataset0.getGroup();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertNotNull(datasetGroup1);
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      
      DatasetGroup datasetGroup2 = (DatasetGroup)datasetGroup0.clone();
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup2, datasetGroup0);
      assertNotSame(datasetGroup2, datasetGroup1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup2.getID());
      assertNotNull(datasetGroup2);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup2.equals((Object)datasetGroup0));
      assertTrue(datasetGroup2.equals((Object)datasetGroup1));
      
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot0.getDomainAxisEdge();
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedRangeXYPlot0.setDatasetGroup(datasetGroup0);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke0 = new BasicStroke(1983.0996F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1983.0996F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setOutlineStroke(basicStroke0);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1983.0996F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      BasicStroke basicStroke1 = (BasicStroke)combinedRangeXYPlot0.getRangeGridlineStroke();
      assertNotSame(basicStroke1, basicStroke0);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke1.getEndCap());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getLineJoin());
      assertNotNull(basicStroke1);
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0, int0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Layer layer0 = null;
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(192, (Layer) null);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(collection0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset(192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 192 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1099.699));
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-1099.699), cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNotNull(cyclicNumberAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("Value:", cyclicNumberAxis0.DEFAULT_RANGE);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNotNull(moduloAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      moduloAxis0.centerRange(2.0F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertNotNull(thermometerPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.NONE);
      
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertNotNull(rectangleInsets0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.NONE);
      
      moduloAxis0.setTickLabelInsets(rectangleInsets0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.05, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.05, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.05, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.05, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.NONE);
      
      moduloAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals("Value:", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(2.5, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isAutoRange());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(1.5, moduloAxis0.getLowerBound(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      boolean boolean0 = combinedDomainXYPlot0.equals((Object) null);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(boolean0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      DateTitle dateTitle0 = new DateTitle();
      assertTrue(dateTitle0.isVisible());
      assertTrue(dateTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      
      jFreeChart0.addSubtitle((Title) dateTitle0);
      assertTrue(dateTitle0.isVisible());
      assertTrue(dateTitle0.getNotify());
      assertEquals(Integer.MAX_VALUE, dateTitle0.getMaximumLinesToDisplay());
      assertNull(dateTitle0.getURLText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01);
      assertEquals("February 14, 2014", dateTitle0.getText());
      assertFalse(dateTitle0.getExpandToFitSpace());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01);
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertNull(dateTitle0.getToolTipText());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(dateTitle0.visible);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertNotNull(graphics2D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(15, 1, 0, 10);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(10, rectangle0.height);
      assertEquals(1, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(15, rectangle0.x);
      
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(11.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(6.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(11.0, rectangle0.getMaxY(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(15.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getMinY(), 0.01);
      assertEquals(1.0, rectangle0.getY(), 0.01);
      assertEquals(15.0, rectangle0.getMinX(), 0.01);
      assertEquals(15.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(15.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(10, rectangle0.height);
      assertEquals(1, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(15, rectangle0.x);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.NONE);
      
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(true);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-1099.699), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      int int0 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "Null 'stroke' argument.");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'stroke' argument.,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("Null 'stroke' argument.", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      int int1 = (-1);
      simpleTimeZone0.setStartRule(1, (-1), (-1), 0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("Null 'stroke' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'stroke' argument.,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=4,startMonth=1,startDay=1,startDayOfWeek=1,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      int int2 = simpleTimeZone0.getOffset(0L);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("Null 'stroke' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'stroke' argument.,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=4,startMonth=1,startDay=1,startDayOfWeek=1,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      DateAxis dateAxis0 = new DateAxis("Null 'stroke' argument.", simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("Null 'stroke' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'stroke' argument.,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=4,startMonth=1,startDay=1,startDayOfWeek=1,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals("Null 'stroke' argument.", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(dateAxis0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(clusteredXYBarRenderer0);
      
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertNotNull(xYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      int int3 = 0;
      boolean boolean0 = xYPlot0.isDomainGridlinesVisible();
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxisLocation(0, (AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNotNull(logAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.isNotify());
      assertNotNull(piePlot3D0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.getLabelLinkStroke();
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      ValueMarker valueMarker0 = new ValueMarker((-1104.7154618), combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT, basicStroke0, 1.0F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1104.7154618), valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01);
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertTrue(piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertFalse(piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertFalse(piePlot3D0.getSimpleLabels());
      assertTrue(piePlot3D0.getSectionOutlinesVisible());
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01);
      assertFalse(piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.getLabelLinksVisible());
      assertFalse(piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1104.7154618), valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(boolean0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.08, PiePlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.4, PiePlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-5, PiePlot.DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW, 0.01);
      assertEquals(90.0, PiePlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      BasicStroke basicStroke1 = (BasicStroke)combinedRangeXYPlot0.getRangeZeroBaselineStroke();
      assertNotSame(basicStroke1, basicStroke0);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertNotNull(basicStroke1);
      assertTrue(basicStroke1.equals((Object)basicStroke0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Point2D.Float point2D_Float0 = (Point2D.Float)generalPath0.getCurrentPoint();
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(point2D_Float0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(4.0F, point2D_Float0.x, 0.01F);
      
      combinedRangeXYPlot0.panRangeAxes((-972.19), plotRenderingInfo0, point2D_Float0);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(4.0F, point2D_Float0.x, 0.01F);
      
      boolean boolean1 = combinedRangeXYPlot0.canSelectByPoint();
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      LinkedList<DefaultKeyedValues2DDataset> linkedList0 = new LinkedList<DefaultKeyedValues2DDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes((-2820), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNotNull(numberAxis3D0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      int int0 = (-222);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setRangeCrosshairPaint(numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setRangeCrosshairStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      byteArray0[0] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(500, (-2094), byteArray0, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNotNull(cyclicNumberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("{0GEjY", cyclicNumberAxis0.DEFAULT_RANGE);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("{0GEjY", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertNotNull(moduloAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      moduloAxis0.centerRange(0.0F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.5E8, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals((-2.49999999E8), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.5E8, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-0.5), moduloAxis0.getLowerBound(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("{0GEjY", moduloAxis0.getLabel());
      assertEquals(0.5, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelURL());
      assertNull(moduloAxis0.getLabelToolTip());
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      LinkedList<Size2D> linkedList0 = new LinkedList<Size2D>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxes(6, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      String string0 = "sdq";
      JFreeChart jFreeChart0 = new JFreeChart("sdq", combinedRangeXYPlot0);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNotNull(jFreeChart0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      Color color0 = (Color)jFreeChart0.getBorderPaint();
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(color0);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(941, layer0);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertNotNull(candlestickRenderer0);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      LegendItemCollection legendItemCollection0 = candlestickRenderer0.getLegendItems();
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      String string1 = "_.hP2=(7X#@N";
      int int0 = 4742;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getQuadrantPaint(4742);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (4742) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertNotNull(thermometerPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      
      DateAxis dateAxis0 = new DateAxis();
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNotNull(dateAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      
      Range range0 = thermometerPlot0.getDataRange(dateAxis0);
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("org.jfree.chart.axis.PeriodAxisLabelInfo", range0);
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals("org.jfree.chart.axis.PeriodAxisLabelInfo", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertNotNull(moduloAxis0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(moduloAxis0);
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(100.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals("org.jfree.chart.axis.PeriodAxisLabelInfo", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.setWeight((-2346));
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(100.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals("org.jfree.chart.axis.PeriodAxisLabelInfo", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals((-2346), combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("O\". t");
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals("O\". t", logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNotNull(logAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      logAxis0.setRangeWithMargins(0.0, 2106.26496530417);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals((-105.3132482652085), logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(2211.5782135693785, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals("O\". t", logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals((-105.3132482652085), logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(2211.5782135693785, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals("O\". t", logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      logAxis0.setAxisLineVisible(false);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals((-105.3132482652085), logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(2211.5782135693785, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals("O\". t", logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeGridlineStroke();
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals((-105.3132482652085), logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(2211.5782135693785, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals("O\". t", logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedRangeXYPlot0.clearDomainAxes();
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals((-105.3132482652085), logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isAutoRange());
      assertEquals(2211.5782135693785, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals("O\". t", logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      Color color0 = (Color)defaultPolarItemRenderer0.getBaseItemLabelPaint();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertNotNull(color0);
      
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker(500, color0, basicStroke0, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, defaultPolarItemRenderer0.DEFAULT_STROKE, (-1194.6628F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Paint[] paintArray0 = new Paint[6];
      paintArray0[0] = combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT;
      paintArray0[1] = combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT;
      paintArray0[2] = combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT;
      paintArray0[3] = combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT;
      paintArray0[4] = combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT;
      paintArray0[5] = combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT;
      Stroke[] strokeArray0 = new Stroke[4];
      strokeArray0[0] = combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE;
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(minMaxCategoryRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)minMaxCategoryRenderer0.getGroupStroke();
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      strokeArray0[1] = (Stroke) basicStroke0;
      strokeArray0[2] = combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE;
      strokeArray0[3] = combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE;
      Shape[] shapeArray0 = new Shape[2];
      shapeArray0[0] = minMaxCategoryRenderer0.DEFAULT_SHAPE;
      shapeArray0[1] = minMaxCategoryRenderer0.DEFAULT_SHAPE;
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, paintArray0, strokeArray0, strokeArray0, shapeArray0);
      assertEquals(6, paintArray0.length);
      assertEquals(4, strokeArray0.length);
      assertEquals(2, shapeArray0.length);
      assertNotNull(defaultDrawingSupplier0);
      
      BasicStroke basicStroke1 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertNotSame(basicStroke1, basicStroke0);
      assertEquals(6, paintArray0.length);
      assertEquals(4, strokeArray0.length);
      assertEquals(2, shapeArray0.length);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertNotNull(basicStroke1);
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      
      combinedDomainXYPlot0.setRangeGridlineStroke(basicStroke1);
      assertNotSame(basicStroke1, basicStroke0);
      assertEquals(6, paintArray0.length);
      assertEquals(4, strokeArray0.length);
      assertEquals(2, shapeArray0.length);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.5F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      int int0 = 6;
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(6, axisLocation0, false);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5Mi B_C";
      stringArray0[1] = "5Mi B_C";
      stringArray0[2] = "M*=0.";
      stringArray0[3] = "5Mi B_C";
      stringArray0[4] = "5Mi B_C";
      stringArray0[5] = "5Mi B_C";
      stringArray0[6] = "5Mi B_C";
      stringArray0[7] = "5Mi B_C";
      stringArray0[8] = "Indices must be Integer instances.";
      SymbolAxis symbolAxis0 = new SymbolAxis("5Mi B_C", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isInverted());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals("5Mi B_C", symbolAxis0.getLabel());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(symbolAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(symbolAxis0);
      assertEquals(9, stringArray0.length);
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isInverted());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals("5Mi B_C", symbolAxis0.getLabel());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(axisChangeEvent0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      JFreeChart jFreeChart0 = axisChangeEvent0.getChart();
      assertEquals(9, stringArray0.length);
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isInverted());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals("5Mi B_C", symbolAxis0.getLabel());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(jFreeChart0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      int int1 = 0;
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel((JFreeChart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      NumberAxis numberAxis0 = new NumberAxis(":t[VAoLU\"`xM");
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(":t[VAoLU\"`xM", numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNotNull(numberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      
      LogAxis logAxis0 = new LogAxis("@kP\"Te*^JbR");
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("@kP\"Te*^JbR", logAxis0.getLabel());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertNotNull(logAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, logAxis0, (XYItemRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge();
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      
      RectangleEdge rectangleEdge1 = xYPlot0.getRangeAxisEdge();
      assertSame(rectangleEdge1, rectangleEdge0);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertNotNull(rectangleEdge1);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      xYPlot0.setRangeAxisLocation(39, axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedXYAreaRenderer0);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      
      stackedXYAreaRenderer0.removeAnnotations();
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      
      xYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      
      JFreeChart jFreeChart0 = new JFreeChart("Null 'values' argument.", xYPlot0);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertNotNull(chartPanel0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      Point point1 = new Point(point0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertNotNull(point1);
      assertTrue(point1.equals((Object)point0));
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      
      Point point2 = chartPanel0.getLocation(point1);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertSame(point1, point2);
      assertNotSame(point1, point0);
      assertNotSame(point2, point0);
      assertSame(point2, point1);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertNotNull(point2);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertTrue(point2.equals((Object)point0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      
      Point point3 = chartPanel0.translateJava2DToScreen(point2);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertNotSame(point0, point3);
      assertSame(point1, point2);
      assertNotSame(point1, point3);
      assertNotSame(point1, point0);
      assertNotSame(point2, point0);
      assertSame(point2, point1);
      assertNotSame(point2, point3);
      assertNotSame(point3, point0);
      assertNotSame(point3, point2);
      assertNotSame(point3, point1);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point3.getY(), 0.01);
      assertEquals(0.0, point3.getX(), 0.01);
      assertNotNull(point3);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point2));
      assertTrue(point1.equals((Object)point0));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point3.equals((Object)point2));
      assertTrue(point3.equals((Object)point1));
      assertTrue(point3.equals((Object)point0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertEquals(0, point3.x);
      assertEquals(0, point3.y);
      
      xYPlot0.setQuadrantOrigin(point3);
      assertNotSame(point0, point2);
      assertNotSame(point0, point1);
      assertNotSame(point0, point3);
      assertSame(point1, point2);
      assertNotSame(point1, point3);
      assertNotSame(point1, point0);
      assertNotSame(point2, point0);
      assertSame(point2, point1);
      assertNotSame(point2, point3);
      assertNotSame(point3, point0);
      assertNotSame(point3, point2);
      assertNotSame(point3, point1);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point3.getY(), 0.01);
      assertEquals(0.0, point3.getX(), 0.01);
      assertTrue(point0.equals((Object)point3));
      assertTrue(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point2));
      assertTrue(point1.equals((Object)point0));
      assertTrue(point1.equals((Object)point3));
      assertTrue(point2.equals((Object)point3));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point3.equals((Object)point2));
      assertTrue(point3.equals((Object)point1));
      assertTrue(point3.equals((Object)point0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertEquals(0, point3.x);
      assertEquals(0, point3.y);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot1);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertNotNull(plotChangeEvent0);
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.plotChanged(plotChangeEvent0);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      int int0 = (-775);
      boolean boolean0 = true;
      combinedDomainXYPlot0.setRangeGridlinesVisible(true);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxis((-775), 1059);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertNotNull(numberAxis0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(highLowRenderer0);
      
      highLowRenderer0.setLegendItemToolTipGenerator((XYSeriesLabelGenerator) null);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, highLowRenderer0);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertNotNull(xYPlot0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = xYPlot0.equals(numberAxis0);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(boolean0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      highLowRenderer0.clearSeriesStrokes(true);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      xYPlot0.setRenderer(500, (XYItemRenderer) highLowRenderer0);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(501, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      xYPlot0.setDomainPannable(true);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(501, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      xYPlot0.setDomainZeroBaselinePaint(numberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(501, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge();
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(501, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      assertNotNull(defaultDrawingSupplier0);
      
      Color color0 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertEquals(255, color0.getAlpha());
      assertEquals(85, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(85, color0.getGreen());
      assertEquals((-43691), color0.getRGB());
      assertNotNull(color0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker((-1210.45483), 0.0F, color0, xYPlot0.DEFAULT_CROSSHAIR_STROKE, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE, 0.0F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(501, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(85, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(85, color0.getGreen());
      assertEquals((-43691), color0.getRGB());
      assertNull(intervalMarker0.getLabel());
      assertEquals((-1210.45483), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      xYPlot0.addRangeMarker((Marker) intervalMarker0);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesShape());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getBaseCreateEntities());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertTrue(highLowRenderer0.getBaseSeriesVisible());
      assertTrue(highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(501, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(85, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(85, color0.getGreen());
      assertEquals((-43691), color0.getRGB());
      assertNull(intervalMarker0.getLabel());
      assertEquals((-1210.45483), intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 2);
      Minute minute0 = new Minute(mockDate0);
      Locale locale0 = Locale.US;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale1 = Locale.GERMANY;
      PeriodAxis periodAxis0 = new PeriodAxis("", minute0, minute0, timeZone0, locale1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.getRangeAxisEdge();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker((-2072.68520785439), (-1250.19));
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(500, (Marker) intervalMarker0, layer0);
      JFreeChart jFreeChart0 = new JFreeChart("'jdqO~%#]", combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      Point point0 = new Point();
      JEditorPane jEditorPane0 = new JEditorPane("$y%W8h", "$y%W8h");
      MouseEvent mouseEvent0 = new MouseEvent(jEditorPane0, 0, 0L, 1898, 0, (-1300), 0, false);
      Point point1 = mouseEvent0.getPoint();
      Point2D point2D0 = colorConvertOp0.getPoint2D(point0, point1);
      PlotState plotState0 = new PlotState();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.draw((Graphics2D) null, (Rectangle2D) null, point2D0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainCrosshairValue(793.56036231828, false);
      xYPlot0.getDomainMinorGridlinePaint();
      ConvolveOp convolveOp0 = new ConvolveOp((Kernel) null);
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      int int0 = 336;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10, 336, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 336
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      int int0 = 0;
      Point point0 = new Point(10, 0);
      XYPlot xYPlot0 = combinedRangeXYPlot0.findSubplot(plotRenderingInfo0, point0);
      int int1 = 3;
      PiePlot piePlot0 = new PiePlot();
      Paint paint0 = piePlot0.getLabelShadowPaint();
      ValueMarker valueMarker0 = new ValueMarker(4.0, paint0, xYPlot0.DEFAULT_OUTLINE_STROKE, piePlot0.DEFAULT_LABEL_SHADOW_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, 0.0F);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker(3, (Marker) valueMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(0, layer0);
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1719.181F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10, true, customXYToolTipGenerator0);
      candlestickRenderer0.getSeriesOutlineStroke(10);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset(972);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 972 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "Null 'stroke' argument.");
      int int0 = (-1);
      simpleTimeZone0.setStartRule(1, (-1), (-1), 0);
      simpleTimeZone0.getOffset(0L);
      DateAxis dateAxis0 = new DateAxis("Null 'stroke' argument.", simpleTimeZone0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, dateAxis0, dateAxis0, clusteredXYBarRenderer0);
      int int1 = 0;
      defaultXYDataset0.hasListener(xYPlot0);
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxisLocation(0, (AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis(500);
      combinedDomainXYPlot0.getRangeCrosshairValue();
      combinedDomainXYPlot0.setBackgroundPaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.getLegendItems();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint(3702, logAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (3702) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairValue((-115.708));
      combinedDomainXYPlot0.plotChanged((PlotChangeEvent) null);
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      combinedDomainXYPlot0.getPlotType();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1688.882973894581), 0.0);
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker(1, (Marker) intervalMarker0, layer0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("6bb=PGiw/");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setRangeCrosshairPaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0.0, 1.0F, 500, 0.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setBackgroundImageAlignment(4);
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 10, xYPlot0.DEFAULT_GRIDLINE_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0, layer0);
      xYPlot0.isDomainCrosshairVisible();
      xYPlot0.addDomainMarker(4, (Marker) intervalMarker0, layer0, false);
      xYPlot0.isDomainMinorGridlinesVisible();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getSeriesOutlineStroke(10);
      // Undeclared exception!
      try { 
        xYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(681.0, 0.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("2]\"MAIncY", combinedDomainXYPlot0);
      int int0 = (-224);
      int int1 = (-2213);
      int int2 = 0;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 36, (-224), (-2213), 10, 0, true, true, false, true, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(36);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      int int0 = (-222);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((-222), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }
}
