* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-50
* Going to generate test cases for class: org.jfree.chart.plot.XYPlot
* Starting Client-0
* Connecting to master process on port 21506
* Analyzing classpath: 
  - subjects/buggy-versions/Chart-4/build
  - subjects/buggy-versions/Chart-4/lib/servlet.jar
* Finished analyzing classpath
* Generating tests for class org.jfree.chart.plot.XYPlot
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 5800
* Using seed 2051763203
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 2064 / 5800
[MASTER] 14:54:54.627 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 14:54:54.654 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 14:55:10.746 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] org.jfree.chart.plot.XYPlot.getRangeAxis(I)Lorg/jfree/chart/axis/ValueAxis;
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
[MASTER] 15:03:48.302 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
*C2*
*C2*
*C2*
* Search finished after 607s and 186 generations, 118654 statements, best individual has fitness: 2074.0
* Minimizing test suite
[MASTER] 15:06:37.871 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 70%
* Total number of goals: 1743
* Number of covered goals: 1213
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 62%
* Total number of goals: 1077
* Number of covered goals: 665
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 83
* Number of covered goals: 83
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 73%
* Total number of goals: 742
* Number of covered goals: 538
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 39%
* Total number of goals: 717
* Number of covered goals: 282
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 222
* Number of covered goals: 222
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 99%
* Total number of goals: 222
* Number of covered goals: 220
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 60%
* Total number of goals: 1077
* Number of covered goals: 650
* Generated 395 tests with total length 7449
* Resulting test suite's coverage: 70% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 15:07:51.861 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7313% of time used, but only 15/395 tests minimized), falling back to using all assertions
[MASTER] 15:08:29.318 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 2%
* Compiling and checking tests
[MASTER] 15:08:34.134 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 26 seconds more than allowed.
[MASTER] 15:08:44.936 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_23_1633619324455/org/jfree/chart/plot/XYPlot_23_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_23_1633619324455/org/jfree/chart/plot/XYPlot_23_tmp__ESTest_scaffolding.java]]
[MASTER] 15:08:44.936 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Chart-4/build:subjects/buggy-versions/Chart-4/lib/servlet.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Chart-4/build:/experiment/subjects/buggy-versions/Chart-4/lib/servlet.jar
[MASTER] 15:08:44.937 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Chart-4/build:/experiment/subjects/buggy-versions/Chart-4/lib/servlet.jar
[MASTER] 15:08:44.947 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   variable decimalFormat0
  location: class org.jfree.chart.plot.XYPlot_23_tmp__ESTest: 119
[MASTER] 15:08:44.977 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_23_1633619324455/org/jfree/chart/plot/XYPlot_23_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Oct 07 15:08:44 GMT 2021
4:  */
5: 
6: package org.jfree.chart.plot;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.awt.BasicStroke;
11: import java.awt.Color;
12: import java.awt.geom.Point2D;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.jfree.chart.ChartRenderingInfo;
16: import org.jfree.chart.plot.CombinedDomainXYPlot;
17: import org.jfree.chart.plot.Plot;
18: import org.jfree.chart.plot.PlotRenderingInfo;
19: import org.jfree.chart.plot.XYPlot;
20: import org.jfree.chart.title.LegendTitle;
21: import org.jfree.chart.util.Layer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class XYPlot_23_tmp__ESTest extends XYPlot_23_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
30:       assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
31:       assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
32:       assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
33:       assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
34:       assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
35:       assertNotNull(combinedDomainXYPlot0);
36:       assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
37:       assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
38:       assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
39:       assertNull(combinedDomainXYPlot0.getNoDataMessage());
40:       assertFalse(combinedDomainXYPlot0.canSelectByPoint());
41:       assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
42:       assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
43:       assertEquals(1, combinedDomainXYPlot0.getWeight());
44:       assertTrue(combinedDomainXYPlot0.isRangeZoomable());
45:       assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
46:       assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
47:       assertEquals(1, combinedDomainXYPlot0.getRendererCount());
48:       assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
49:       assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
50:       assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
51:       assertFalse(combinedDomainXYPlot0.isRangePannable());
52:       assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
53:       assertFalse(combinedDomainXYPlot0.isSubplot());
54:       assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
55:       assertTrue(combinedDomainXYPlot0.isOutlineVisible());
56:       assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
57:       assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
58:       assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
59:       assertTrue(combinedDomainXYPlot0.isDomainZoomable());
60:       assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
61:       assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
62:       assertTrue(combinedDomainXYPlot0.isNotify());
63:       assertTrue(combinedDomainXYPlot0.canSelectByRegion());
64:       assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
65:       assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
66:       assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
67:       assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
68:       assertFalse(combinedDomainXYPlot0.isDomainPannable());
69:       
70:       Point2D.Double point2D_Double0 = (Point2D.Double)combinedDomainXYPlot0.getQuadrantOrigin();
71:       assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
72:       assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
73:       assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
74:       assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
75:       assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
76:       assertEquals(0.0, point2D_Double0.x, 0.01);
77:       assertEquals(0.0, point2D_Double0.y, 0.01);
78:       assertNotNull(point2D_Double0);
79:       assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
80:       assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
81:       assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
82:       assertNull(combinedDomainXYPlot0.getNoDataMessage());
83:       assertFalse(combinedDomainXYPlot0.canSelectByPoint());
84:       assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
85:       assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
86:       assertEquals(1, combinedDomainXYPlot0.getWeight());
87:       assertTrue(combinedDomainXYPlot0.isRangeZoomable());
88:       assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
89:       assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
90:       assertEquals(1, combinedDomainXYPlot0.getRendererCount());
91:       assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
92:       assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
93:       assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
94:       assertFalse(combinedDomainXYPlot0.isRangePannable());
95:       assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
96:       assertFalse(combinedDomainXYPlot0.isSubplot());
97:       assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
98:       assertTrue(combinedDomainXYPlot0.isOutlineVisible());
99:       assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
100:       assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
101:       assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
102:       assertTrue(combinedDomainXYPlot0.isDomainZoomable());
103:       assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
104:       assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
105:       assertTrue(combinedDomainXYPlot0.isNotify());
106:       assertTrue(combinedDomainXYPlot0.canSelectByRegion());
107:       assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
108:       assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
109:       assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
110:       assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
111:       assertFalse(combinedDomainXYPlot0.isDomainPannable());
112:       
113:       combinedDomainXYPlot0.clearRangeAxes();
114:       assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
115:       assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
116:       assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
117:       assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
118:       assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
119:       assertNotNull(decimalFormat0);
120:       assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
121:       assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
122:       assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
123:       assertNull(combinedDomainXYPlot0.getNoDataMessage());
124:       assertFalse(combinedDomainXYPlot0.canSelectByPoint());
125:       assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
126:       assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
127:       assertEquals(1, combinedDomainXYPlot0.getWeight());
128:       assertTrue(combinedDomainXYPlot0.isRangeZoomable());
129:       assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
130:       assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
131:       assertEquals(1, combinedDomainXYPlot0.getRendererCount());
132:       assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
133:       assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
134:       assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
135:       assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
136:       assertFalse(combinedDomainXYPlot0.isRangePannable());
137:       assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
138:       assertFalse(combinedDomainXYPlot0.isSubplot());
139:       assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
140:       assertTrue(combinedDomainXYPlot0.isOutlineVisible());
141:       assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
142:       assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
143:       assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
144:       assertTrue(combinedDomainXYPlot0.isDomainZoomable());
145:       assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
146:       assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
147:       assertTrue(combinedDomainXYPlot0.isNotify());
148:       assertTrue(combinedDomainXYPlot0.canSelectByRegion());
149:       assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
150:       assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
151:       assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
152:       assertFalse(combinedDomainXYPlot0.isDomainPannable());
153:       
154:       Layer layer0 = Layer.BACKGROUND;
155:       assertNotNull(layer0);
156:       assertEquals("Layer.BACKGROUND", layer0.toString());
157:       
158:       Color color0 = (Color)LegendTitle.DEFAULT_ITEM_PAINT;
159:       assertNotNull(color0);
160:       assertEquals(0, color0.getBlue());
161:       assertEquals(0, color0.getRed());
162:       assertEquals(0, color0.getGreen());
163:       assertEquals(255, color0.getAlpha());
164:       assertEquals(1, color0.getTransparency());
165:       assertEquals((-16777216), color0.getRGB());
166:       
167:       combinedDomainXYPlot0.setRangeTickBandPaint(color0);
168:       assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
169:       assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
170:       assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
171:       assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
172:       assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
173:       assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
174:       assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
175:       assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
176:       assertNull(combinedDomainXYPlot0.getNoDataMessage());
177:       assertFalse(combinedDomainXYPlot0.canSelectByPoint());
178:       assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
179:       assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
180:       assertEquals(1, combinedDomainXYPlot0.getWeight());
181:       assertTrue(combinedDomainXYPlot0.isRangeZoomable());
182:       assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
183:       assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
184:       assertEquals(1, combinedDomainXYPlot0.getRendererCount());
185:       assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
186:       assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
187:       assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
188:       assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
189:       assertFalse(combinedDomainXYPlot0.isRangePannable());
190:       assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
191:       assertFalse(combinedDomainXYPlot0.isSubplot());
192:       assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
193:       assertTrue(combinedDomainXYPlot0.isOutlineVisible());
194:       assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
195:       assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
196:       assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
197:       assertTrue(combinedDomainXYPlot0.isDomainZoomable());
198:       assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
199:       assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
200:       assertTrue(combinedDomainXYPlot0.isNotify());
201:       assertTrue(combinedDomainXYPlot0.canSelectByRegion());
202:       assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
203:       assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
204:       assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
205:       assertFalse(combinedDomainXYPlot0.isDomainPannable());
206:       assertEquals(0, color0.getBlue());
207:       assertEquals(0, color0.getRed());
208:       assertEquals(0, color0.getGreen());
209:       assertEquals(255, color0.getAlpha());
210:       assertEquals(1, color0.getTransparency());
211:       assertEquals((-16777216), color0.getRGB());
212:       
213:       Color color1 = (Color)combinedDomainXYPlot0.getDomainMinorGridlinePaint();
214:       assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
215:       assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
216:       assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
217:       assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
218:       assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
219:       assertNotSame(color1, color0);
220:       assertNotNull(color1);
221:       assertFalse(color1.equals((Object)color0));
222:       assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
223:       assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
224:       assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
225:       assertNull(combinedDomainXYPlot0.getNoDataMessage());
226:       assertFalse(combinedDomainXYPlot0.canSelectByPoint());
227:       assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
228:       assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
229:       assertEquals(1, combinedDomainXYPlot0.getWeight());
230:       assertTrue(combinedDomainXYPlot0.isRangeZoomable());
231:       assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
232:       assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
233:       assertEquals(1, combinedDomainXYPlot0.getRendererCount());
234:       assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
235:       assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
236:       assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
237:       assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
238:       assertFalse(combinedDomainXYPlot0.isRangePannable());
239:       assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
240:       assertFalse(combinedDomainXYPlot0.isSubplot());
241:       assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
242:       assertTrue(combinedDomainXYPlot0.isOutlineVisible());
243:       assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
244:       assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
245:       assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
246:       assertTrue(combinedDomainXYPlot0.isDomainZoomable());
247:       assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
248:       assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
249:       assertTrue(combinedDomainXYPlot0.isNotify());
250:       assertTrue(combinedDomainXYPlot0.canSelectByRegion());
251:       assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
252:       assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
253:       assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
254:       assertFalse(combinedDomainXYPlot0.isDomainPannable());
255:       assertEquals(255, color1.getAlpha());
256:       assertEquals(255, color1.getBlue());
257:       assertEquals(255, color1.getGreen());
258:       assertEquals(255, color1.getRed());
259:       assertEquals(1, color1.getTransparency());
260:       assertEquals((-1), color1.getRGB());
261:       
262:       Color color2 = (Color)combinedDomainXYPlot0.getRangeZeroBaselinePaint();
263:       assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
264:       assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
265:       assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
266:       assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
267:       assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
268:       assertSame(color2, color0);
269:       assertNotSame(color2, color1);
270:       assertNotNull(color2);
271:       assertFalse(color2.equals((Object)color1));
272:       assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
273:       assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
274:       assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
275:       assertNull(combinedDomainXYPlot0.getNoDataMessage());
276:       assertFalse(combinedDomainXYPlot0.canSelectByPoint());
277:       assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
278:       assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
279:       assertEquals(1, combinedDomainXYPlot0.getWeight());
280:       assertTrue(combinedDomainXYPlot0.isRangeZoomable());
281:       assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
282:       assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
283:       assertEquals(1, combinedDomainXYPlot0.getRendererCount());
284:       assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
285:       assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
286:       assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
287:       assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
288:       assertFalse(combinedDomainXYPlot0.isRangePannable());
289:       assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
290:       assertFalse(combinedDomainXYPlot0.isSubplot());
291:       assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
292:       assertTrue(combinedDomainXYPlot0.isOutlineVisible());
293:       assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
294:       assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
295:       assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
296:       assertTrue(combinedDomainXYPlot0.isDomainZoomable());
297:       assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
298:       assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
299:       assertTrue(combinedDomainXYPlot0.isNotify());
300:       assertTrue(combinedDomainXYPlot0.canSelectByRegion());
301:       assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
302:       assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
303:       assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
304:       assertFalse(combinedDomainXYPlot0.isDomainPannable());
305:       assertEquals(0, color2.getRed());
306:       assertEquals(1, color2.getTransparency());
307:       assertEquals(0, color2.getGreen());
308:       assertEquals((-16777216), color2.getRGB());
309:       assertEquals(0, color2.getBlue());
310:       assertEquals(255, color2.getAlpha());
311:       
312:       BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
313:       assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
314:       assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
315:       assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
316:       assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
317:       assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
318:       assertNotNull(basicStroke0);
319:       assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
320:       assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
321:       assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
322:       assertNull(combinedDomainXYPlot0.getNoDataMessage());
323:       assertFalse(combinedDomainXYPlot0.canSelectByPoint());
324:       assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
325:       assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
326:       assertEquals(1, combinedDomainXYPlot0.getWeight());
327:       assertTrue(combinedDomainXYPlot0.isRangeZoomable());
328:       assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
329:       assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
330:       assertEquals(1, combinedDomainXYPlot0.getRendererCount());
331:       assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
332:       assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
333:       assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
334:       assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
335:       assertFalse(combinedDomainXYPlot0.isRangePannable());
336:       assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
337:       assertFalse(combinedDomainXYPlot0.isSubplot());
338:       assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
339:       assertTrue(combinedDomainXYPlot0.isOutlineVisible());
340:       assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
341:       assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
342:       assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
343:       assertTrue(combinedDomainXYPlot0.isDomainZoomable());
344:       assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
345:       assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
346:       assertTrue(combinedDomainXYPlot0.isNotify());
347:       assertTrue(combinedDomainXYPlot0.canSelectByRegion());
348:       assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
349:       assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
350:       assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
351:       assertFalse(combinedDomainXYPlot0.isDomainPannable());
352:       assertEquals(0, basicStroke0.getEndCap());
353:       assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
354:       assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
355:       assertEquals(2, basicStroke0.getLineJoin());
356:       assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
357:       
358:       ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
359:       assertNotNull(chartRenderingInfo0);
360:       
361:       PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
362:       assertNotNull(plotRenderingInfo0);
363:       assertEquals(0, plotRenderingInfo0.getSubplotCount());
364:       
365:       combinedDomainXYPlot0.panDomainAxes(0.0, plotRenderingInfo0, point2D_Double0);
366:       assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
367:       assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
368:       assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
369:       assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
370:       assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
371:       assertEquals(0.0, point2D_Double0.x, 0.01);
372:       assertEquals(0.0, point2D_Double0.y, 0.01);
373:       assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
374:       assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
375:       assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
376:       assertNull(combinedDomainXYPlot0.getNoDataMessage());
377:       assertFalse(combinedDomainXYPlot0.canSelectByPoint());
378:       assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
379:       assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
380:       assertEquals(1, combinedDomainXYPlot0.getWeight());
381:       assertTrue(combinedDomainXYPlot0.isRangeZoomable());
382:       assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
383:       assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
384:       assertEquals(1, combinedDomainXYPlot0.getRendererCount());
385:       assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
386:       assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
387:       assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
388:       assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
389:       assertFalse(combinedDomainXYPlot0.isRangePannable());
390:       assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
391:       assertFalse(combinedDomainXYPlot0.isSubplot());
392:       assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
393:       assertTrue(combinedDomainXYPlot0.isOutlineVisible());
394:       assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
395:       assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
396:       assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
397:       assertTrue(combinedDomainXYPlot0.isDomainZoomable());
398:       assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
399:       assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
400:       assertTrue(combinedDomainXYPlot0.isNotify());
401:       assertTrue(combinedDomainXYPlot0.canSelectByRegion());
402:       assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
403:       assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
404:       assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
405:       assertFalse(combinedDomainXYPlot0.isDomainPannable());
406:       assertEquals(0, plotRenderingInfo0.getSubplotCount());
407:   }
408: }
RegularFileObject[/tmp/EvoSuite_23_1633619324455/org/jfree/chart/plot/XYPlot_23_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Oct 07 15:08:44 GMT 2021
5:  */
6: 
7: package org.jfree.chart.plot;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class XYPlot_23_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "org.jfree.chart.plot.XYPlot"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(XYPlot_23_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "org.jfree.data.time.TimeTableXYDataset",
70:       "org.jfree.chart.renderer.xy.VectorRenderer",
71:       "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
72:       "org.jfree.chart.MouseWheelHandler",
73:       "org.jfree.chart.plot.ValueMarker",
74:       "org.jfree.chart.renderer.xy.DeviationRenderer$State",
75:       "org.jfree.data.time.Minute",
76:       "org.jfree.chart.renderer.xy.XYAreaRenderer",
77:       "org.jfree.chart.Effect3D",
78:       "org.jfree.data.general.ValueDataset",
79:       "org.jfree.data.general.AbstractSeriesDataset",
80:       "org.jfree.chart.LegendItemCollection",
81:       "org.jfree.chart.annotations.XYShapeAnnotation",
82:       "org.jfree.data.xy.DefaultTableXYDataset",
83:       "org.jfree.data.RangeInfo",
84:       "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer",
85:       "org.jfree.data.general.DatasetSelectionState",
86:       "org.jfree.chart.renderer.category.BarPainter",
87:       "org.jfree.chart.labels.ItemLabelPosition",
88:       "org.jfree.data.xy.DefaultXYDataset",
89:       "org.jfree.chart.labels.ItemLabelAnchor",
90:       "org.jfree.chart.plot.PiePlot3D",
91:       "org.jfree.chart.util.PaintList",
92:       "org.jfree.chart.labels.StandardXYToolTipGenerator",
93:       "org.jfree.chart.axis.Timeline",
94:       "org.jfree.chart.labels.XYZToolTipGenerator",
95:       "org.jfree.chart.ui.Contributor",
96:       "org.jfree.data.xy.XYDatasetSelectionState",
97:       "org.jfree.data.time.TimeSeriesCollection",
98:       "org.jfree.chart.axis.DateTick",
99:       "org.jfree.chart.panel.PanHandler",
100:       "org.jfree.chart.util.RectangleAnchor",
101:       "org.jfree.chart.entity.XYAnnotationEntity",
102:       "org.jfree.data.time.TimePeriodFormatException",
103:       "org.jfree.chart.renderer.xy.XYDifferenceRenderer",
104:       "org.jfree.chart.text.TextBlock",
105:       "org.jfree.chart.axis.Axis",
106:       "org.jfree.chart.axis.NumberAxis3D",
107:       "org.jfree.chart.block.BlockBorder",
108:       "org.jfree.chart.util.UnitType",
109:       "org.jfree.chart.annotations.XYAnnotation",
110:       "org.jfree.chart.renderer.xy.CyclicXYItemRenderer",
111:       "org.jfree.chart.util.ObjectUtilities",
112:       "org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState",
113:       "org.jfree.data.time.Second",
114:       "org.jfree.chart.util.PaintMap",
115:       "org.jfree.chart.plot.DatasetRenderingOrder",
116:       "org.jfree.chart.event.RendererChangeListener",
117:       "org.jfree.chart.util.HashUtilities",
118:       "org.jfree.data.KeyedValues",
119:       "org.jfree.chart.plot.CombinedRangeCategoryPlot",
120:       "org.jfree.chart.block.FlowArrangement",
121:       "org.jfree.chart.event.TitleChangeListener",
122:       "org.jfree.chart.text.TextMeasurer",
123:       "org.jfree.chart.renderer.xy.XYAreaRenderer2",
124:       "org.jfree.chart.LegendItemSource",
125:       "org.jfree.chart.renderer.PolarItemRenderer",
126:       "org.jfree.data.xy.XYZDataset",
127:       "org.jfree.chart.event.OverlayChangeListener",
128:       "org.jfree.chart.plot.PieLabelLinkStyle",
129:       "org.jfree.data.general.DatasetChangeListener",
130:       "org.jfree.data.statistics.MultiValueCategoryDataset",
131:       "org.jfree.data.gantt.TaskSeries",
132:       "org.jfree.chart.event.TitleChangeEvent",
133:       "org.jfree.chart.ui.ExtensionFileFilter",
134:       "org.jfree.chart.ui.Licences",
135:       "org.jfree.chart.axis.CyclicNumberAxis$CycleBoundTick",
136:       "org.jfree.chart.event.ChartChangeEventType",
137:       "org.jfree.data.time.Millisecond",
138:       "org.jfree.chart.axis.ExtendedCategoryAxis",
139:       "org.jfree.chart.renderer.category.CategoryItemRenderer",
140:       "org.jfree.chart.util.Size2D",
141:       "org.jfree.chart.annotations.CategoryTextAnnotation",
142:       "org.jfree.chart.renderer.category.LineAndShapeRenderer",
143:       "org.jfree.chart.util.ShapeUtilities",
144:       "org.jfree.data.general.SeriesChangeEvent",
145:       "org.jfree.chart.ChartPanel",
146:       "org.jfree.chart.labels.CategoryItemLabelGenerator",
147:       "org.jfree.chart.renderer.xy.StackedXYAreaRenderer$StackedXYAreaRendererState",
148:       "org.jfree.chart.axis.TickUnits",
149:       "org.jfree.chart.PolarChartPanel",
150:       "org.jfree.chart.util.VerticalAlignment",
151:       "org.jfree.chart.renderer.category.GanttRenderer",
152:       "org.jfree.chart.renderer.category.StackedBarRenderer",
153:       "org.jfree.chart.plot.SeriesRenderingOrder",
154:       "org.jfree.chart.renderer.category.StackedAreaRenderer",
155:       "org.jfree.chart.axis.NumberTick",
156:       "org.jfree.chart.block.BlockContainer",
157:       "org.jfree.data.xy.DefaultWindDataset",
158:       "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
159:       "org.jfree.chart.plot.Marker",
160:       "org.jfree.chart.ChartMouseListener",
161:       "org.jfree.chart.renderer.category.CategoryItemRendererState",
162:       "org.jfree.data.time.FixedMillisecond",
163:       "org.jfree.chart.axis.SegmentedTimeline",
164:       "org.jfree.chart.axis.ValueAxis",
165:       "org.jfree.data.Value",
166:       "org.jfree.data.time.TimePeriodAnchor",
167:       "org.jfree.chart.plot.MultiplePiePlot",
168:       "org.jfree.chart.block.BlockFrame",
169:       "org.jfree.data.general.DefaultValueDataset",
170:       "org.jfree.chart.panel.Overlay",
171:       "org.jfree.data.xy.VectorSeriesCollection",
172:       "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
173:       "org.jfree.chart.plot.CrosshairState",
174:       "org.jfree.chart.labels.XYSeriesLabelGenerator",
175:       "org.jfree.chart.urls.TimeSeriesURLGenerator",
176:       "org.jfree.chart.plot.PieLabelRecord",
177:       "org.jfree.data.DomainOrder",
178:       "org.jfree.chart.axis.AxisState",
179:       "org.jfree.chart.renderer.AbstractRenderer",
180:       "org.jfree.data.xy.SelectableXYDataset",
181:       "org.jfree.chart.renderer.xy.XYStepRenderer",
182:       "org.jfree.chart.annotations.XYDataImageAnnotation",
183:       "org.jfree.chart.plot.RingPlot",
184:       "org.jfree.chart.block.RectangleConstraint",
185:       "org.jfree.chart.renderer.DefaultPolarItemRenderer",
186:       "org.jfree.chart.title.Title",
187:       "org.jfree.data.jdbc.JDBCPieDataset",
188:       "org.jfree.chart.labels.PieToolTipGenerator",
189:       "org.jfree.chart.axis.DateTickMarkPosition",
190:       "org.jfree.chart.block.LineBorder",
191:       "org.jfree.chart.renderer.xy.StandardXYItemRenderer$State",
192:       "org.jfree.chart.plot.CombinedDomainXYPlot",
193:       "org.jfree.chart.panel.ZoomHandler",
194:       "org.jfree.data.time.Day",
195:       "org.jfree.data.general.SeriesDataset",
196:       "org.jfree.chart.ui.BasicProjectInfo",
197:       "org.jfree.data.xy.XYDataset",
198:       "org.jfree.chart.block.Arrangement",
199:       "org.jfree.chart.plot.Plot",
200:       "org.jfree.chart.plot.ValueAxisPlot",
201:       "org.jfree.chart.renderer.category.IntervalBarRenderer",
202:       "org.jfree.chart.renderer.category.BarRenderer",
203:       "org.jfree.chart.event.AxisChangeEvent",
204:       "org.jfree.chart.LegendItem",
205:       "org.jfree.chart.renderer.xy.XYErrorRenderer",
206:       "org.jfree.chart.renderer.xy.StackedXYAreaRenderer",
207:       "org.jfree.chart.urls.CategoryURLGenerator",
208:       "org.jfree.chart.plot.PlotRenderingInfo",
209:       "org.jfree.chart.renderer.xy.CandlestickRenderer",
210:       "org.jfree.data.time.RegularTimePeriod",
211:       "org.jfree.data.xy.AbstractXYZDataset",
212:       "org.jfree.chart.entity.TickLabelEntity",
213:       "org.jfree.data.time.TimeSeries",
214:       "org.jfree.chart.renderer.category.LineRenderer3D",
215:       "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2",
216:       "org.jfree.chart.entity.CategoryItemEntity",
217:       "org.jfree.chart.entity.AxisLabelEntity",
218:       "org.jfree.chart.plot.AbstractPieLabelDistributor",
219:       "org.jfree.data.general.DatasetUtilities",
220:       "org.jfree.chart.util.BooleanList",
221:       "org.jfree.chart.annotations.TextAnnotation",
222:       "org.jfree.chart.util.AbstractObjectList",
223:       "org.jfree.data.xy.IntervalXYDataset",
224:       "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
225:       "org.jfree.data.general.DefaultPieDataset",
226:       "org.jfree.chart.entity.CategoryLabelEntity",
227:       "org.jfree.chart.util.RectangleEdge",
228:       "org.jfree.chart.plot.DefaultDrawingSupplier",
229:       "org.jfree.chart.plot.PieLabelDistributor",
230:       "org.jfree.data.category.DefaultIntervalCategoryDataset",
231:       "org.jfree.chart.event.OverlayChangeEvent",
232:       "org.jfree.chart.annotations.XYTitleAnnotation",
233:       "org.jfree.data.xy.XIntervalSeriesCollection",
234:       "org.jfree.chart.annotations.XYAnnotationBoundsInfo",
235:       "org.jfree.data.category.CategoryDataset",
236:       "org.jfree.data.xy.XYSeries",
237:       "org.jfree.chart.util.RectangleInsets",
238:       "org.jfree.chart.text.TextAnchor",
239:       "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
240:       "org.jfree.chart.axis.TickUnit",
241:       "org.jfree.chart.ChartColor",
242:       "org.jfree.chart.util.GradientPaintTransformer",
243:       "org.jfree.data.gantt.TaskSeriesCollection",
244:       "org.jfree.chart.annotations.CategoryPointerAnnotation",
245:       "org.jfree.chart.util.StrokeList",
246:       "org.jfree.chart.axis.CategoryAxis3D",
247:       "org.jfree.chart.axis.TickUnitSource",
248:       "org.jfree.chart.plot.CategoryMarker",
249:       "org.jfree.data.time.SpreadsheetDate",
250:       "org.jfree.data.xy.MatrixSeriesCollection",
251:       "org.jfree.chart.plot.XYPlot",
252:       "org.jfree.chart.block.AbstractBlock",
253:       "org.jfree.chart.util.TableOrder",
254:       "org.jfree.chart.annotations.AbstractXYAnnotation",
255:       "org.jfree.data.xy.MatrixSeries",
256:       "org.jfree.chart.renderer.xy.WindItemRenderer",
257:       "org.jfree.data.time.TimeSeriesDataItem",
258:       "org.jfree.chart.plot.SpiderWebPlot",
259:       "org.jfree.chart.renderer.xy.XYItemRendererState",
260:       "org.jfree.data.xy.XYBarDataset",
261:       "org.jfree.chart.plot.ThermometerPlot",
262:       "org.jfree.data.xy.VectorXYDataset",
263:       "org.jfree.data.time.Hour",
264:       "org.jfree.chart.title.PaintScaleLegend",
265:       "org.jfree.chart.axis.PeriodAxisLabelInfo",
266:       "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
267:       "org.jfree.chart.axis.SubCategoryAxis",
268:       "org.jfree.chart.axis.NumberTickUnit",
269:       "org.jfree.chart.title.TextTitle",
270:       "org.jfree.data.statistics.StatisticalCategoryDataset",
271:       "org.jfree.chart.event.ChartChangeEvent",
272:       "org.jfree.data.Values",
273:       "org.jfree.data.KeyedValues2D",
274:       "org.jfree.chart.axis.CyclicNumberAxis",
275:       "org.jfree.chart.text.TextBlockAnchor",
276:       "org.jfree.data.general.SeriesException",
277:       "org.jfree.chart.event.ChartChangeListener",
278:       "org.jfree.chart.util.PaintUtilities",
279:       "org.jfree.chart.entity.AxisEntity",
280:       "org.jfree.chart.event.ChartProgressListener",
281:       "org.jfree.chart.renderer.xy.XYDotRenderer",
282:       "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
283:       "org.jfree.chart.text.TextBox",
284:       "org.jfree.chart.plot.WaferMapPlot",
285:       "org.jfree.chart.labels.CategorySeriesLabelGenerator",
286:       "org.jfree.chart.axis.MarkerAxisBand",
287:       "org.jfree.chart.renderer.xy.XYItemRenderer",
288:       "org.jfree.chart.axis.CategoryAxis",
289:       "org.jfree.chart.ui.ProjectInfo",
290:       "org.jfree.chart.renderer.RendererState",
291:       "org.jfree.data.xy.AbstractIntervalXYDataset",
292:       "org.jfree.chart.entity.StandardEntityCollection",
293:       "org.jfree.chart.axis.LogarithmicAxis",
294:       "org.jfree.chart.axis.DateAxis$DefaultTimeline",
295:       "org.jfree.data.xy.YIntervalSeriesCollection",
296:       "org.jfree.data.xy.AbstractXYDataset",
297:       "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
298:       "org.jfree.chart.axis.DateAxis",
299:       "org.jfree.chart.annotations.XYPointerAnnotation",
300:       "org.jfree.chart.plot.CategoryPlot",
301:       "org.jfree.chart.event.MarkerChangeListener",
302:       "org.jfree.chart.event.PlotChangeEvent",
303:       "org.jfree.chart.plot.PiePlot",
304:       "org.jfree.chart.axis.DateTickUnitType",
305:       "org.jfree.chart.renderer.xy.XYSplineRenderer",
306:       "org.jfree.data.xy.DefaultIntervalXYDataset",
307:       "org.jfree.chart.event.RendererChangeEvent",
308:       "org.jfree.chart.entity.TitleEntity",
309:       "org.jfree.chart.block.CenterArrangement",
310:       "org.jfree.chart.labels.PieSectionLabelGenerator",
311:       "org.jfree.chart.axis.Tick",
312:       "org.jfree.chart.plot.CategoryCrosshairState",
313:       "org.jfree.chart.urls.PieURLGenerator",
314:       "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset",
315:       "org.jfree.chart.util.ShapeList",
316:       "org.jfree.data.statistics.BoxAndWhiskerCategoryDataset",
317:       "org.jfree.chart.entity.JFreeChartEntity",
318:       "org.jfree.chart.urls.XYURLGenerator",
319:       "org.jfree.data.time.TimePeriodValues",
320:       "org.jfree.chart.annotations.XYDrawableAnnotation",
321:       "org.jfree.chart.util.HorizontalAlignment",
322:       "org.jfree.chart.plot.Selectable",
323:       "org.jfree.chart.axis.CategoryAnchor",
324:       "org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence",
325:       "org.jfree.chart.axis.SegmentedTimeline$BaseTimelineSegmentRange",
326:       "org.jfree.chart.labels.CategoryToolTipGenerator",
327:       "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
328:       "org.jfree.data.general.DefaultKeyedValues2DDataset",
329:       "org.jfree.chart.entity.XYItemEntity",
330:       "org.jfree.chart.axis.CategoryLabelPositions",
331:       "org.jfree.chart.plot.DialShape",
332:       "org.jfree.data.time.Quarter",
333:       "org.jfree.data.time.DynamicTimeSeriesCollection",
334:       "org.jfree.chart.util.SortOrder",
335:       "org.jfree.data.DomainInfo",
336:       "org.jfree.data.gantt.XYTaskDataset",
337:       "org.jfree.chart.labels.StandardXYZToolTipGenerator",
338:       "org.jfree.chart.annotations.CategoryAnnotation",
339:       "org.jfree.chart.axis.AxisSpace",
340:       "org.jfree.chart.axis.SegmentedTimeline$SegmentRange",
341:       "org.jfree.data.xy.XYDomainInfo",
342:       "org.jfree.chart.plot.PolarPlot",
343:       "org.jfree.chart.RenderingSource",
344:       "org.jfree.chart.plot.MeterInterval",
345:       "org.jfree.data.time.DateRange",
346:       "org.jfree.data.general.DatasetGroup",
347:       "org.jfree.chart.util.Rotation",
348:       "org.jfree.data.xy.OHLCDataset",
349:       "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State",
350:       "org.jfree.chart.resources.JFreeChartResources",
351:       "org.jfree.data.RangeType",
352:       "org.jfree.data.time.Month",
353:       "org.jfree.chart.title.DateTitle",
354:       "org.jfree.chart.renderer.LookupPaintScale",
355:       "org.jfree.data.general.Dataset",
356:       "org.jfree.chart.plot.PlotOrientation",
357:       "org.jfree.chart.axis.NumberAxis",
358:       "org.jfree.chart.renderer.category.AreaRenderer",
359:       "org.jfree.chart.annotations.XYTextAnnotation",
360:       "org.jfree.chart.axis.SymbolAxis",
361:       "org.jfree.chart.axis.ValueTick",
362:       "org.jfree.chart.JFreeChart",
363:       "org.jfree.chart.renderer.xy.XYBarRenderer",
364:       "org.jfree.chart.title.LegendTitle",
365:       "org.jfree.chart.ChartRenderingInfo",
366:       "org.jfree.data.xy.WindDataset",
367:       "org.jfree.chart.renderer.xy.DeviationRenderer",
368:       "org.jfree.chart.JFreeChartInfo",
369:       "org.jfree.chart.event.MarkerChangeEvent",
370:       "org.jfree.data.time.MonthConstants",
371:       "org.jfree.chart.util.StrokeMap",
372:       "org.jfree.data.xy.XYIntervalSeriesCollection",
373:       "org.jfree.chart.event.AxisChangeListener",
374:       "org.jfree.chart.renderer.xy.ClusteredXYBarRenderer",
375:       "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
376:       "org.jfree.chart.entity.PlotEntity",
377:       "org.jfree.chart.axis.SegmentedTimeline$Segment",
378:       "org.jfree.data.xy.DefaultXYZDataset",
379:       "org.jfree.chart.ui.Library",
380:       "org.jfree.data.time.SerialDate",
381:       "org.jfree.chart.block.ColumnArrangement",
382:       "org.jfree.data.general.AbstractDataset",
383:       "org.jfree.chart.plot.Zoomable",
384:       "org.jfree.chart.util.ObjectList",
385:       "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
386:       "org.jfree.chart.plot.PiePlotState",
387:       "org.jfree.chart.axis.PeriodAxis",
388:       "org.jfree.chart.plot.XYCrosshairState",
389:       "org.jfree.chart.renderer.category.StatisticalBarRenderer",
390:       "org.jfree.chart.labels.StandardCategoryItemLabelGenerator",
391:       "org.jfree.data.UnknownKeyException",
392:       "org.jfree.chart.urls.StandardXYURLGenerator",
393:       "org.jfree.chart.labels.XYToolTipGenerator",
394:       "org.jfree.data.time.TimePeriod",
395:       "org.jfree.chart.renderer.WaferMapRenderer",
396:       "org.jfree.data.statistics.HistogramDataset",
397:       "org.jfree.chart.plot.MeterPlot",
398:       "org.jfree.chart.labels.CustomXYToolTipGenerator",
399:       "org.jfree.chart.util.LengthAdjustmentType",
400:       "org.jfree.chart.renderer.xy.XYBarPainter",
401:       "org.jfree.chart.block.Block",
402:       "org.jfree.chart.plot.CombinedRangeXYPlot",
403:       "org.jfree.data.general.PieDataset",
404:       "org.jfree.chart.labels.XYItemLabelGenerator",
405:       "org.jfree.data.xy.XYRangeInfo",
406:       "org.jfree.chart.axis.AxisLocation",
407:       "org.jfree.chart.event.ChartProgressEvent",
408:       "org.jfree.data.general.KeyedValues2DDataset",
409:       "org.jfree.chart.block.LengthConstraintType",
410:       "org.jfree.data.Range",
411:       "org.jfree.data.statistics.DefaultMultiValueCategoryDataset",
412:       "org.jfree.chart.util.LogFormat",
413:       "org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator",
414:       "org.jfree.chart.plot.CombinedDomainCategoryPlot",
415:       "org.jfree.data.category.IntervalCategoryDataset",
416:       "org.jfree.chart.plot.PlotState",
417:       "org.jfree.data.time.Year",
418:       "org.jfree.chart.Drawable",
419:       "org.jfree.chart.axis.CategoryLabelPosition",
420:       "org.jfree.chart.renderer.xy.XYAreaRenderer$XYAreaRendererState",
421:       "org.jfree.data.time.TimePeriodValuesCollection",
422:       "org.jfree.chart.renderer.xy.XYBubbleRenderer",
423:       "org.jfree.chart.axis.DateTickUnit",
424:       "org.jfree.chart.annotations.XYBoxAnnotation",
425:       "org.jfree.chart.axis.ModuloAxis",
426:       "org.jfree.chart.panel.AbstractMouseHandler",
427:       "org.jfree.data.xy.TableXYDataset",
428:       "org.jfree.chart.entity.ChartEntity",
429:       "org.jfree.chart.entity.EntityCollection",
430:       "org.jfree.chart.plot.Pannable",
431:       "org.jfree.data.gantt.GanttCategoryDataset",
432:       "org.jfree.data.jdbc.JDBCCategoryDataset",
433:       "org.jfree.data.Values2D",
434:       "org.jfree.data.general.DatasetChangeEvent",
435:       "org.jfree.data.statistics.BoxAndWhiskerXYDataset",
436:       "org.jfree.data.general.SeriesChangeListener",
437:       "org.jfree.data.category.DefaultCategoryDataset",
438:       "org.jfree.chart.renderer.xy.DefaultXYItemRenderer",
439:       "org.jfree.data.general.KeyedValuesDataset",
440:       "org.jfree.data.time.Week",
441:       "org.jfree.chart.entity.PieSectionEntity",
442:       "org.jfree.data.general.DefaultKeyedValuesDataset",
443:       "org.jfree.chart.util.Layer",
444:       "org.jfree.chart.event.PlotChangeListener",
445:       "org.jfree.data.general.Series",
446:       "org.jfree.data.xy.XYSeriesCollection",
447:       "org.jfree.chart.plot.DrawingSupplier",
448:       "org.jfree.chart.renderer.PaintScale",
449:       "org.jfree.chart.labels.HighLowItemLabelGenerator",
450:       "org.jfree.chart.plot.IntervalMarker",
451:       "org.jfree.chart.util.PublicCloneable",
452:       "org.jfree.data.xy.IntervalXYDelegate",
453:       "org.jfree.chart.util.ResourceBundleWrapper",
454:       "org.jfree.chart.axis.LogAxis",
455:       "org.jfree.chart.axis.CategoryLabelWidthType"
456:     );
457:   } 
458: 
459:   private static void resetClasses() {
460:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(XYPlot_23_tmp__ESTest_scaffolding.class.getClassLoader()); 
461: 
462:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
463:       "org.jfree.chart.util.UnitType",
464:       "org.jfree.chart.util.RectangleInsets",
465:       "org.jfree.chart.plot.Plot",
466:       "org.jfree.chart.util.ResourceBundleWrapper",
467:       "org.jfree.chart.plot.XYPlot",
468:       "org.jfree.chart.plot.DatasetRenderingOrder",
469:       "org.jfree.chart.plot.SeriesRenderingOrder",
470:       "org.jfree.chart.plot.PlotOrientation",
471:       "org.jfree.chart.axis.AxisLocation",
472:       "org.jfree.chart.util.RectangleEdge",
473:       "org.jfree.chart.util.Layer",
474:       "org.jfree.data.DomainOrder",
475:       "org.jfree.chart.axis.TickType",
476:       "org.jfree.chart.event.ChartChangeEventType",
477:       "org.jfree.chart.util.SerialUtilities",
478:       "org.jfree.chart.axis.Axis",
479:       "org.jfree.data.Range",
480:       "org.jfree.chart.axis.ValueAxis",
481:       "org.jfree.chart.axis.TickUnit",
482:       "org.jfree.chart.axis.NumberTickUnit",
483:       "org.jfree.chart.axis.NumberAxis",
484:       "org.jfree.chart.axis.LogarithmicAxis",
485:       "org.jfree.chart.axis.TickUnits",
486:       "org.jfree.data.RangeType",
487:       "org.jfree.chart.plot.CombinedDomainXYPlot",
488:       "org.jfree.chart.ChartColor",
489:       "org.jfree.chart.plot.DefaultDrawingSupplier",
490:       "org.jfree.chart.util.AbstractObjectList",
491:       "org.jfree.chart.util.ObjectList",
492:       "org.jfree.data.general.DatasetChangeEvent",
493:       "org.jfree.chart.event.ChartChangeEvent",
494:       "org.jfree.chart.event.PlotChangeEvent",
495:       "org.jfree.chart.ChartRenderingInfo",
496:       "org.jfree.chart.entity.StandardEntityCollection",
497:       "org.jfree.chart.plot.PlotRenderingInfo",
498:       "org.jfree.chart.block.AbstractBlock",
499:       "org.jfree.chart.util.HorizontalAlignment",
500:       "org.jfree.chart.util.VerticalAlignment",
501:       "org.jfree.chart.title.Title",
502:       "org.jfree.chart.title.TextTitle",
503:       "org.jfree.chart.ui.Library",
504:       "org.jfree.chart.ui.BasicProjectInfo",
505:       "org.jfree.chart.ui.ProjectInfo",
506:       "org.jfree.chart.JFreeChartInfo",
507:       "org.jfree.chart.resources.JFreeChartResources",
508:       "org.jfree.chart.ui.Licences",
509:       "org.jfree.chart.ui.Contributor",
510:       "org.jfree.chart.JFreeChart",
511:       "org.jfree.chart.block.BlockBorder",
512:       "org.jfree.chart.ChartPanel",
513:       "org.jfree.chart.PolarChartPanel",
514:       "org.jfree.chart.axis.NumberAxis3D",
515:       "org.jfree.chart.event.AxisChangeEvent",
516:       "org.jfree.chart.axis.ModuloAxis",
517:       "org.jfree.chart.title.LegendTitle",
518:       "org.jfree.chart.block.FlowArrangement",
519:       "org.jfree.chart.block.ColumnArrangement",
520:       "org.jfree.chart.block.BlockContainer",
521:       "org.jfree.chart.util.RectangleAnchor",
522:       "org.jfree.chart.block.LineBorder",
523:       "org.jfree.chart.event.TitleChangeEvent",
524:       "org.jfree.chart.panel.AbstractMouseHandler",
525:       "org.jfree.chart.panel.ZoomHandler",
526:       "org.jfree.chart.panel.PanHandler",
527:       "org.jfree.data.general.AbstractDataset",
528:       "org.jfree.data.general.AbstractSeriesDataset",
529:       "org.jfree.data.xy.AbstractXYDataset",
530:       "org.jfree.data.xy.AbstractIntervalXYDataset",
531:       "org.jfree.data.time.DynamicTimeSeriesCollection",
532:       "org.jfree.data.time.RegularTimePeriod",
533:       "org.jfree.data.time.Millisecond",
534:       "org.jfree.data.time.Day",
535:       "org.jfree.data.time.SerialDate",
536:       "org.jfree.data.time.SpreadsheetDate",
537:       "org.jfree.data.general.DatasetGroup",
538:       "org.jfree.data.time.Minute",
539:       "org.jfree.data.time.Second",
540:       "org.jfree.data.time.Hour",
541:       "org.jfree.chart.axis.PeriodAxis",
542:       "org.jfree.data.time.Year",
543:       "org.jfree.data.time.Quarter",
544:       "org.jfree.data.time.Month",
545:       "org.jfree.chart.axis.PeriodAxisLabelInfo",
546:       "org.jfree.chart.renderer.AbstractRenderer",
547:       "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
548:       "org.jfree.chart.renderer.xy.XYShapeRenderer",
549:       "org.jfree.chart.util.BooleanList",
550:       "org.jfree.chart.util.PaintList",
551:       "org.jfree.chart.util.StrokeList",
552:       "org.jfree.chart.util.ShapeList",
553:       "org.jfree.chart.labels.ItemLabelPosition",
554:       "org.jfree.chart.labels.ItemLabelAnchor",
555:       "org.jfree.chart.text.TextAnchor",
556:       "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
557:       "org.jfree.chart.renderer.LookupPaintScale",
558:       "org.jfree.chart.event.RendererChangeEvent",
559:       "org.jfree.chart.plot.CombinedRangeXYPlot",
560:       "org.jfree.chart.plot.MultiplePiePlot",
561:       "org.jfree.chart.plot.PiePlot",
562:       "org.jfree.chart.plot.PieLabelLinkStyle",
563:       "org.jfree.chart.util.Rotation",
564:       "org.jfree.chart.util.PaintMap",
565:       "org.jfree.chart.util.StrokeMap",
566:       "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
567:       "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
568:       "org.jfree.chart.plot.AbstractPieLabelDistributor",
569:       "org.jfree.chart.plot.PieLabelDistributor",
570:       "org.jfree.chart.util.TableOrder",
571:       "org.jfree.chart.axis.CyclicNumberAxis",
572:       "org.jfree.chart.plot.Marker",
573:       "org.jfree.chart.plot.ValueMarker",
574:       "org.jfree.chart.util.LengthAdjustmentType",
575:       "org.jfree.chart.renderer.xy.StandardXYItemRenderer",
576:       "org.jfree.chart.renderer.xy.CyclicXYItemRenderer",
577:       "org.jfree.data.gantt.TaskSeriesCollection",
578:       "org.jfree.data.time.DateRange",
579:       "org.jfree.chart.axis.DateTickUnit",
580:       "org.jfree.chart.axis.DateTickUnitType",
581:       "org.jfree.chart.axis.DateAxis$DefaultTimeline",
582:       "org.jfree.chart.axis.DateAxis",
583:       "org.jfree.chart.axis.DateTickMarkPosition",
584:       "org.jfree.chart.renderer.DefaultPolarItemRenderer",
585:       "org.jfree.chart.plot.CompassPlot",
586:       "org.jfree.data.general.DefaultValueDataset",
587:       "org.jfree.chart.needle.MeterNeedle",
588:       "org.jfree.chart.needle.ArrowNeedle",
589:       "org.jfree.data.jdbc.JDBCXYDataset",
590:       "org.jfree.chart.renderer.xy.XYDifferenceRenderer",
591:       "org.jfree.chart.plot.CategoryPlot",
592:       "org.jfree.chart.plot.CombinedDomainCategoryPlot",
593:       "org.jfree.chart.axis.CategoryAxis",
594:       "org.jfree.chart.axis.CategoryLabelPosition",
595:       "org.jfree.chart.text.TextBlockAnchor",
596:       "org.jfree.chart.axis.CategoryLabelWidthType",
597:       "org.jfree.chart.axis.CategoryLabelPositions",
598:       "org.jfree.chart.util.SortOrder",
599:       "org.jfree.chart.axis.CategoryAnchor",
600:       "org.jfree.chart.renderer.xy.CandlestickRenderer",
601:       "org.jfree.chart.labels.HighLowItemLabelGenerator",
602:       "org.jfree.chart.axis.LogAxis",
603:       "org.jfree.chart.util.LogFormat",
604:       "org.jfree.chart.plot.PiePlot3D",
605:       "org.jfree.chart.util.ObjectUtilities",
606:       "org.jfree.data.xy.DefaultIntervalXYDataset",
607:       "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
608:       "org.jfree.chart.labels.StandardXYToolTipGenerator",
609:       "org.jfree.chart.plot.CombinedRangeCategoryPlot",
610:       "org.jfree.chart.annotations.AbstractXYAnnotation",
611:       "org.jfree.chart.annotations.XYLineAnnotation",
612:       "org.jfree.chart.axis.SegmentedTimeline",
613:       "org.jfree.data.xy.XYSeriesCollection",
614:       "org.jfree.data.xy.IntervalXYDelegate",
615:       "org.jfree.chart.renderer.xy.VectorRenderer",
616:       "org.jfree.chart.util.HashUtilities",
617:       "org.jfree.chart.renderer.xy.XYAreaRenderer2",
618:       "org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator",
619:       "org.jfree.chart.plot.ThermometerPlot",
620:       "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
621:       "org.jfree.chart.renderer.category.AreaRenderer",
622:       "org.jfree.chart.renderer.category.StackedAreaRenderer",
623:       "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
624:       "org.jfree.chart.renderer.AreaRendererEndType",
625:       "org.jfree.chart.renderer.xy.GradientXYBarPainter",
626:       "org.jfree.chart.renderer.xy.XYBarRenderer",
627:       "org.jfree.chart.renderer.xy.StackedXYBarRenderer",
628:       "org.jfree.chart.util.StandardGradientPaintTransformer",
629:       "org.jfree.chart.util.GradientPaintTransformType",
630:       "org.jfree.chart.labels.StandardXYItemLabelGenerator",
631:       "org.jfree.data.time.FixedMillisecond",
632:       "org.jfree.data.xy.XYIntervalSeriesCollection",
633:       "org.jfree.chart.plot.CategoryMarker",
634:       "org.jfree.chart.event.MarkerChangeEvent",
635:       "org.jfree.data.time.TimePeriodValuesCollection",
636:       "org.jfree.data.time.TimePeriodAnchor",
637:       "org.jfree.chart.urls.TimeSeriesURLGenerator",
638:       "org.jfree.data.statistics.SimpleHistogramDataset",
639:       "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset",
640:       "org.jfree.chart.renderer.xy.XYBubbleRenderer",
641:       "org.jfree.chart.axis.CategoryAxis3D",
642:       "org.jfree.chart.plot.IntervalMarker",
643:       "org.jfree.chart.plot.SpiderWebPlot",
644:       "org.jfree.data.general.DefaultPieDataset",
645:       "org.jfree.data.jdbc.JDBCPieDataset",
646:       "org.jfree.data.DefaultKeyedValues",
647:       "org.jfree.data.time.TimeTableXYDataset",
648:       "org.jfree.data.DefaultKeyedValues2D",
649:       "org.jfree.chart.annotations.XYBoxAnnotation",
650:       "org.jfree.chart.plot.CrosshairState",
651:       "org.jfree.chart.plot.CategoryCrosshairState",
652:       "org.jfree.chart.renderer.xy.ClusteredXYBarRenderer",
653:       "org.jfree.chart.labels.StandardXYZToolTipGenerator",
654:       "org.jfree.chart.urls.StandardXYURLGenerator",
655:       "org.jfree.data.general.Series",
656:       "org.jfree.data.time.TimePeriodValues",
657:       "org.jfree.chart.annotations.XYShapeAnnotation",
658:       "org.jfree.data.category.DefaultIntervalCategoryDataset",
659:       "org.jfree.data.DataUtilities",
660:       "org.jfree.data.resources.DataPackageResources",
661:       "org.jfree.chart.renderer.category.GradientBarPainter",
662:       "org.jfree.chart.renderer.category.BarRenderer",
663:       "org.jfree.chart.renderer.category.IntervalBarRenderer",
664:       "org.jfree.chart.renderer.category.GanttRenderer",
665:       "org.jfree.data.general.DatasetUtilities",
666:       "org.jfree.chart.renderer.RendererState",
667:       "org.jfree.chart.renderer.xy.XYItemRendererState",
668:       "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
669:       "org.jfree.chart.renderer.xy.XYStepRenderer",
670:       "org.jfree.data.xy.DefaultWindDataset",
671:       "org.jfree.chart.plot.PolarPlot",
672:       "org.jfree.chart.axis.SymbolAxis",
673:       "org.jfree.chart.annotations.XYTextAnnotation",
674:       "org.jfree.data.time.Week",
675:       "org.jfree.data.xy.XIntervalSeriesCollection",
676:       "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
677:       "org.jfree.chart.renderer.category.StatisticalBarRenderer",
678:       "org.jfree.chart.plot.MeterPlot",
679:       "org.jfree.chart.plot.DialShape",
680:       "org.jfree.data.gantt.XYTaskDataset",
681:       "org.jfree.chart.LegendItemCollection",
682:       "org.jfree.data.time.TimePeriodFormatException",
683:       "org.jfree.chart.axis.SubCategoryAxis",
684:       "org.jfree.chart.event.ChartProgressEvent",
685:       "org.jfree.chart.block.LengthConstraintType",
686:       "org.jfree.chart.block.RectangleConstraint",
687:       "org.jfree.chart.block.BlockParams",
688:       "org.jfree.chart.text.G2TextMeasurer",
689:       "org.jfree.chart.text.TextUtilities",
690:       "org.jfree.chart.text.TextBlock",
691:       "org.jfree.chart.text.TextLine",
692:       "org.jfree.chart.text.TextFragment",
693:       "org.jfree.chart.util.Size2D",
694:       "org.jfree.chart.block.BlockResult",
695:       "org.jfree.data.xy.VectorSeriesCollection",
696:       "org.jfree.data.xy.YIntervalSeriesCollection",
697:       "org.jfree.data.general.DefaultHeatMapDataset",
698:       "org.jfree.data.category.DefaultCategoryDataset",
699:       "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
700:       "org.jfree.data.KeyedObjects2D",
701:       "org.jfree.chart.util.PaintUtilities",
702:       "org.jfree.chart.util.ShapeUtilities",
703:       "org.jfree.chart.labels.CustomXYToolTipGenerator",
704:       "org.jfree.data.xy.XYDatasetTableModel",
705:       "org.jfree.chart.renderer.xy.XYBlockRenderer",
706:       "org.jfree.chart.title.PaintScaleLegend",
707:       "org.jfree.data.time.TimeSeries",
708:       "org.jfree.data.time.TimeSeriesCollection",
709:       "org.jfree.chart.renderer.xy.WindItemRenderer",
710:       "org.jfree.chart.annotations.TextAnnotation",
711:       "org.jfree.chart.renderer.xy.DeviationRenderer",
712:       "org.jfree.chart.needle.WindNeedle",
713:       "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
714:       "org.jfree.chart.renderer.category.MinMaxCategoryRenderer$1",
715:       "org.jfree.chart.renderer.category.MinMaxCategoryRenderer$2",
716:       "org.jfree.chart.annotations.CategoryTextAnnotation",
717:       "org.jfree.chart.entity.ChartEntity",
718:       "org.jfree.chart.entity.JFreeChartEntity",
719:       "org.jfree.chart.entity.TitleEntity",
720:       "org.jfree.chart.axis.AxisSpace",
721:       "org.jfree.chart.axis.AxisState",
722:       "org.jfree.chart.entity.AxisEntity",
723:       "org.jfree.chart.plot.PlotState",
724:       "org.jfree.chart.plot.RingPlot",
725:       "org.jfree.chart.axis.Tick",
726:       "org.jfree.chart.axis.ValueTick",
727:       "org.jfree.chart.axis.DateTick",
728:       "org.jfree.chart.annotations.CategoryPointerAnnotation",
729:       "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
730:       "org.jfree.chart.renderer.category.BarRenderer3D",
731:       "org.jfree.chart.annotations.XYPolygonAnnotation",
732:       "org.jfree.chart.annotations.XYTitleAnnotation",
733:       "org.jfree.chart.util.XYCoordinateType",
734:       "org.jfree.chart.renderer.category.LineAndShapeRenderer",
735:       "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer",
736:       "org.jfree.chart.renderer.WaferMapRenderer",
737:       "org.jfree.chart.axis.ExtendedCategoryAxis",
738:       "org.jfree.data.category.CategoryToPieDataset",
739:       "org.jfree.chart.annotations.XYDrawableAnnotation",
740:       "org.jfree.data.general.DefaultKeyedValues2DDataset",
741:       "org.jfree.data.jdbc.JDBCCategoryDataset",
742:       "org.jfree.chart.plot.MeterInterval",
743:       "org.jfree.data.statistics.HistogramDataset",
744:       "org.jfree.data.statistics.HistogramType",
745:       "org.jfree.chart.renderer.xy.XYLine3DRenderer",
746:       "org.jfree.chart.renderer.xy.HighLowRenderer",
747:       "org.jfree.data.xy.CategoryTableXYDataset",
748:       "org.jfree.data.xy.DefaultXYDataset",
749:       "org.jfree.chart.renderer.GrayPaintScale",
750:       "org.jfree.data.xy.XYBarDataset",
751:       "org.jfree.chart.annotations.XYDataImageAnnotation",
752:       "org.jfree.data.statistics.SimpleHistogramBin",
753:       "org.jfree.data.xy.AbstractXYZDataset",
754:       "org.jfree.data.xy.DefaultXYZDataset",
755:       "org.jfree.data.statistics.DefaultMultiValueCategoryDataset",
756:       "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
757:       "org.jfree.chart.labels.StandardCategoryItemLabelGenerator",
758:       "org.jfree.chart.renderer.xy.DefaultXYItemRenderer",
759:       "org.jfree.chart.axis.NumberTick",
760:       "org.jfree.chart.renderer.xy.XYDotRenderer",
761:       "org.jfree.chart.annotations.XYImageAnnotation",
762:       "org.jfree.chart.renderer.xy.XYAreaRenderer",
763:       "org.jfree.chart.renderer.xy.StackedXYAreaRenderer",
764:       "org.jfree.chart.title.CompositeTitle",
765:       "org.jfree.chart.block.BorderArrangement",
766:       "org.jfree.data.general.WaferMapDataset",
767:       "org.jfree.chart.plot.PieLabelRecord",
768:       "org.jfree.data.xy.MatrixSeriesCollection",
769:       "org.jfree.chart.labels.MultipleXYSeriesLabelGenerator",
770:       "org.jfree.chart.annotations.XYPointerAnnotation",
771:       "org.jfree.chart.renderer.category.WaterfallBarRenderer",
772:       "org.jfree.data.ComparableObjectSeries",
773:       "org.jfree.data.xy.XYIntervalSeries",
774:       "org.jfree.chart.renderer.category.LineRenderer3D",
775:       "org.jfree.chart.axis.StandardTickUnitSource",
776:       "org.jfree.chart.renderer.xy.XYErrorRenderer",
777:       "org.jfree.chart.renderer.category.StackedBarRenderer",
778:       "org.jfree.data.xy.MatrixSeries",
779:       "org.jfree.chart.block.LabelBlock",
780:       "org.jfree.chart.urls.CustomXYURLGenerator",
781:       "org.jfree.chart.plot.FastScatterPlot",
782:       "org.jfree.data.general.DefaultKeyedValuesDataset",
783:       "org.jfree.data.xy.DefaultTableXYDataset",
784:       "org.jfree.chart.renderer.xy.YIntervalRenderer",
785:       "org.jfree.chart.labels.SymbolicXYItemLabelGenerator",
786:       "org.jfree.chart.plot.PiePlotState",
787:       "org.jfree.chart.renderer.xy.SamplingXYLineRenderer",
788:       "org.jfree.data.xy.XYSeries",
789:       "org.jfree.chart.renderer.xy.SamplingXYLineRenderer$State",
790:       "org.jfree.data.time.TimeSeriesDataItem",
791:       "org.jfree.chart.title.DateTitle",
792:       "org.jfree.data.gantt.SlidingGanttCategoryDataset",
793:       "org.jfree.chart.urls.StandardXYZURLGenerator",
794:       "org.jfree.chart.plot.WaferMapPlot",
795:       "org.jfree.chart.renderer.xy.XYSplineRenderer",
796:       "org.jfree.data.xy.OHLCDataItem",
797:       "org.jfree.data.xy.DefaultOHLCDataset",
798:       "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer",
799:       "org.jfree.data.time.TimeSeriesTableModel",
800:       "org.jfree.chart.text.TextBox",
801:       "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State",
802:       "org.jfree.chart.renderer.category.GroupedStackedBarRenderer",
803:       "org.jfree.data.KeyToGroupMap",
804:       "org.jfree.data.time.SimpleTimePeriod",
805:       "org.jfree.chart.renderer.category.StackedBarRenderer3D",
806:       "org.jfree.chart.plot.XYCrosshairState",
807:       "org.jfree.chart.block.CenterArrangement",
808:       "org.jfree.chart.axis.AxisCollection",
809:       "org.jfree.chart.plot.Crosshair",
810:       "org.jfree.chart.labels.StandardCrosshairLabelGenerator",
811:       "org.jfree.chart.renderer.category.LayeredBarRenderer",
812:       "org.jfree.data.xy.DefaultHighLowDataset",
813:       "org.jfree.data.category.SlidingCategoryDataset",
814:       "org.jfree.chart.renderer.xy.StackedXYAreaRenderer2",
815:       "org.jfree.chart.axis.CyclicNumberAxis$CycleBoundTick",
816:       "org.jfree.chart.entity.PlotEntity",
817:       "org.jfree.chart.entity.AxisLabelEntity",
818:       "org.jfree.data.general.SeriesChangeEvent",
819:       "org.jfree.chart.title.ImageTitle",
820:       "org.jfree.data.DefaultKeyedValue",
821:       "org.jfree.data.general.DefaultKeyedValueDataset",
822:       "org.jfree.chart.panel.AbstractOverlay",
823:       "org.jfree.chart.panel.CrosshairOverlay",
824:       "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
825:       "org.jfree.chart.renderer.category.CategoryItemRendererState",
826:       "org.jfree.chart.block.EmptyBlock",
827:       "org.jfree.chart.MouseWheelHandler",
828:       "org.jfree.chart.block.GridArrangement",
829:       "org.jfree.chart.renderer.category.CategoryStepRenderer"
830:     );
831:   }
832: }

[MASTER] 15:08:45.021 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
assertNotNull(combinedDomainXYPlot0);
assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
assertNull(combinedDomainXYPlot0.getNoDataMessage());
assertFalse(combinedDomainXYPlot0.canSelectByPoint());
assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
assertEquals(1, combinedDomainXYPlot0.getWeight());
assertTrue(combinedDomainXYPlot0.isRangeZoomable());
assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
assertEquals(1, combinedDomainXYPlot0.getRendererCount());
assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangePannable());
assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
assertFalse(combinedDomainXYPlot0.isSubplot());
assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
assertTrue(combinedDomainXYPlot0.isOutlineVisible());
assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
assertTrue(combinedDomainXYPlot0.isDomainZoomable());
assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
assertTrue(combinedDomainXYPlot0.isNotify());
assertTrue(combinedDomainXYPlot0.canSelectByRegion());
assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
assertFalse(combinedDomainXYPlot0.isDomainPannable());

Point2D.Double point2D_Double0 = (Point2D.Double)combinedDomainXYPlot0.getQuadrantOrigin();
assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
assertEquals(0.0, point2D_Double0.x, 0.01);
assertEquals(0.0, point2D_Double0.y, 0.01);
assertNotNull(point2D_Double0);
assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
assertNull(combinedDomainXYPlot0.getNoDataMessage());
assertFalse(combinedDomainXYPlot0.canSelectByPoint());
assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
assertEquals(1, combinedDomainXYPlot0.getWeight());
assertTrue(combinedDomainXYPlot0.isRangeZoomable());
assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
assertEquals(1, combinedDomainXYPlot0.getRendererCount());
assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangePannable());
assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
assertFalse(combinedDomainXYPlot0.isSubplot());
assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
assertTrue(combinedDomainXYPlot0.isOutlineVisible());
assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
assertTrue(combinedDomainXYPlot0.isDomainZoomable());
assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
assertTrue(combinedDomainXYPlot0.isNotify());
assertTrue(combinedDomainXYPlot0.canSelectByRegion());
assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
assertFalse(combinedDomainXYPlot0.isDomainPannable());

combinedDomainXYPlot0.clearRangeAxes();
assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
assertNotNull(decimalFormat0);
assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
assertNull(combinedDomainXYPlot0.getNoDataMessage());
assertFalse(combinedDomainXYPlot0.canSelectByPoint());
assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
assertEquals(1, combinedDomainXYPlot0.getWeight());
assertTrue(combinedDomainXYPlot0.isRangeZoomable());
assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
assertEquals(1, combinedDomainXYPlot0.getRendererCount());
assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangePannable());
assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
assertFalse(combinedDomainXYPlot0.isSubplot());
assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
assertTrue(combinedDomainXYPlot0.isOutlineVisible());
assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
assertTrue(combinedDomainXYPlot0.isDomainZoomable());
assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
assertTrue(combinedDomainXYPlot0.isNotify());
assertTrue(combinedDomainXYPlot0.canSelectByRegion());
assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
assertFalse(combinedDomainXYPlot0.isDomainPannable());

Layer layer0 = Layer.BACKGROUND;
assertNotNull(layer0);
assertEquals("Layer.BACKGROUND", layer0.toString());

Color color0 = (Color)LegendTitle.DEFAULT_ITEM_PAINT;
assertNotNull(color0);
assertEquals(0, color0.getBlue());
assertEquals(0, color0.getRed());
assertEquals(0, color0.getGreen());
assertEquals(255, color0.getAlpha());
assertEquals(1, color0.getTransparency());
assertEquals((-16777216), color0.getRGB());

combinedDomainXYPlot0.setRangeTickBandPaint(color0);
assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
assertNull(combinedDomainXYPlot0.getNoDataMessage());
assertFalse(combinedDomainXYPlot0.canSelectByPoint());
assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
assertEquals(1, combinedDomainXYPlot0.getWeight());
assertTrue(combinedDomainXYPlot0.isRangeZoomable());
assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
assertEquals(1, combinedDomainXYPlot0.getRendererCount());
assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangePannable());
assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
assertFalse(combinedDomainXYPlot0.isSubplot());
assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
assertTrue(combinedDomainXYPlot0.isOutlineVisible());
assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
assertTrue(combinedDomainXYPlot0.isDomainZoomable());
assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
assertTrue(combinedDomainXYPlot0.isNotify());
assertTrue(combinedDomainXYPlot0.canSelectByRegion());
assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
assertFalse(combinedDomainXYPlot0.isDomainPannable());
assertEquals(0, color0.getBlue());
assertEquals(0, color0.getRed());
assertEquals(0, color0.getGreen());
assertEquals(255, color0.getAlpha());
assertEquals(1, color0.getTransparency());
assertEquals((-16777216), color0.getRGB());

Color color1 = (Color)combinedDomainXYPlot0.getDomainMinorGridlinePaint();
assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
assertNotSame(color1, color0);
assertNotNull(color1);
assertFalse(color1.equals((Object)color0));
assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
assertNull(combinedDomainXYPlot0.getNoDataMessage());
assertFalse(combinedDomainXYPlot0.canSelectByPoint());
assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
assertEquals(1, combinedDomainXYPlot0.getWeight());
assertTrue(combinedDomainXYPlot0.isRangeZoomable());
assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
assertEquals(1, combinedDomainXYPlot0.getRendererCount());
assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangePannable());
assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
assertFalse(combinedDomainXYPlot0.isSubplot());
assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
assertTrue(combinedDomainXYPlot0.isOutlineVisible());
assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
assertTrue(combinedDomainXYPlot0.isDomainZoomable());
assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
assertTrue(combinedDomainXYPlot0.isNotify());
assertTrue(combinedDomainXYPlot0.canSelectByRegion());
assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
assertFalse(combinedDomainXYPlot0.isDomainPannable());
assertEquals(255, color1.getAlpha());
assertEquals(255, color1.getBlue());
assertEquals(255, color1.getGreen());
assertEquals(255, color1.getRed());
assertEquals(1, color1.getTransparency());
assertEquals((-1), color1.getRGB());

Color color2 = (Color)combinedDomainXYPlot0.getRangeZeroBaselinePaint();
assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
assertSame(color2, color0);
assertNotSame(color2, color1);
assertNotNull(color2);
assertFalse(color2.equals((Object)color1));
assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
assertNull(combinedDomainXYPlot0.getNoDataMessage());
assertFalse(combinedDomainXYPlot0.canSelectByPoint());
assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
assertEquals(1, combinedDomainXYPlot0.getWeight());
assertTrue(combinedDomainXYPlot0.isRangeZoomable());
assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
assertEquals(1, combinedDomainXYPlot0.getRendererCount());
assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangePannable());
assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
assertFalse(combinedDomainXYPlot0.isSubplot());
assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
assertTrue(combinedDomainXYPlot0.isOutlineVisible());
assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
assertTrue(combinedDomainXYPlot0.isDomainZoomable());
assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
assertTrue(combinedDomainXYPlot0.isNotify());
assertTrue(combinedDomainXYPlot0.canSelectByRegion());
assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
assertFalse(combinedDomainXYPlot0.isDomainPannable());
assertEquals(0, color2.getRed());
assertEquals(1, color2.getTransparency());
assertEquals(0, color2.getGreen());
assertEquals((-16777216), color2.getRGB());
assertEquals(0, color2.getBlue());
assertEquals(255, color2.getAlpha());

BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
assertNotNull(basicStroke0);
assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
assertNull(combinedDomainXYPlot0.getNoDataMessage());
assertFalse(combinedDomainXYPlot0.canSelectByPoint());
assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
assertEquals(1, combinedDomainXYPlot0.getWeight());
assertTrue(combinedDomainXYPlot0.isRangeZoomable());
assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
assertEquals(1, combinedDomainXYPlot0.getRendererCount());
assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangePannable());
assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
assertFalse(combinedDomainXYPlot0.isSubplot());
assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
assertTrue(combinedDomainXYPlot0.isOutlineVisible());
assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
assertTrue(combinedDomainXYPlot0.isDomainZoomable());
assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
assertTrue(combinedDomainXYPlot0.isNotify());
assertTrue(combinedDomainXYPlot0.canSelectByRegion());
assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
assertFalse(combinedDomainXYPlot0.isDomainPannable());
assertEquals(0, basicStroke0.getEndCap());
assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
assertEquals(2, basicStroke0.getLineJoin());
assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);

ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
assertNotNull(chartRenderingInfo0);

PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
assertNotNull(plotRenderingInfo0);
assertEquals(0, plotRenderingInfo0.getSubplotCount());

combinedDomainXYPlot0.panDomainAxes(0.0, plotRenderingInfo0, point2D_Double0);
assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
assertEquals(0.0, point2D_Double0.x, 0.01);
assertEquals(0.0, point2D_Double0.y, 0.01);
assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
assertNull(combinedDomainXYPlot0.getNoDataMessage());
assertFalse(combinedDomainXYPlot0.canSelectByPoint());
assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
assertEquals(1, combinedDomainXYPlot0.getWeight());
assertTrue(combinedDomainXYPlot0.isRangeZoomable());
assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
assertEquals(1, combinedDomainXYPlot0.getRendererCount());
assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
assertEquals(0, combinedDomainXYPlot0.getRangeAxisCount());
assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
assertFalse(combinedDomainXYPlot0.isRangePannable());
assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
assertFalse(combinedDomainXYPlot0.isSubplot());
assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
assertTrue(combinedDomainXYPlot0.isOutlineVisible());
assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
assertTrue(combinedDomainXYPlot0.isDomainZoomable());
assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
assertTrue(combinedDomainXYPlot0.isNotify());
assertTrue(combinedDomainXYPlot0.canSelectByRegion());
assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
assertFalse(combinedDomainXYPlot0.isDomainPannable());
assertEquals(0, plotRenderingInfo0.getSubplotCount());


* Writing tests to file
* Writing JUnit test case 'XYPlot_ESTest' to results/Chart-4/org.jfree.chart.plot.XYPlot/BBC-F0-opt-50/tests/6
* Done!

* Computation finished
